---
\‘res = '['
for i in range(len(self.children)):
    res += self.children[i].to_str()
    if i < len(self.children)-1:
        res += ', '
return res + ']'’
V res = ‘[’
L(c) .children
   res ‘’= c.to_str()
   I !L.last_iteration
      res ‘’= ‘, ’
R res‘]’


String token
F f()
   R S :token {‘None’ {‘N’}; ‘False’ {‘0B’}; ‘True’ {‘1B’}}
===
String token;
auto f()
{
    return [&](const auto &a){return a == u"None" ? u"N"_S : a == u"False" ? u"0B"_S : a == u"True" ? u"1B"_S : throw KeyError(a);}(::token);
}


F func(arg = 1)
   R arg + 1
===
template <typename T1 = decltype(1)> auto func(const T1 &arg = 1)
{
    return arg + 1;
}


F sign(x)
   I x < 0
      R -1
   E I x > 0
      R 1
   E
      R 0
===
template <typename T1> auto sign(const T1 &x)
{
    if (x < 0)
        return -1;
    else if (x > 0)
        return 1;
    else
        return 0;
}


F f()
   I 1B
   {
   }
===
auto f()
{
    if (true) {
    }
}


// Inspired by sample from ‘Nemerle Wiki’[https://github.com/rsdn/nemerle/wiki/The-basics-(tutorial)#Rewriting_Line_Counter_without_the_loop]
fn m1() {}
fn m2() {}
fn f()
   if foo
      if bar
          m1()
   else
       m2()
===
auto m1()
{
}
auto m2()
{
}
auto f()
{
    if (foo) {
        if (bar)
            m1();
    }
    else
        m2();
}


fn m1() {}
fn m2() {}
fn m3() {}
fn m4() {}
fn f()
{
   if foo
      if bar
          m1()
      else if z
          if e
             m3()
      else
          m4()
   else
       m2()
}
===
auto m1()
{
}
auto m2()
{
}
auto m3()
{
}
auto m4()
{
}
auto f()
{
    if (foo) {
        if (bar)
            m1();
        else if (z) {
            if (e)
                m3();
        }
        else
            m4();
    }
    else
        m2();
}


T Shape
   Tuple[Int, Int] position

T Circle(Shape, Object)
   Int radious
===
class Shape
{
public:
    Tuple<int, int> position;
};

class Circle : public Shape, public Object
{
public:
    int radious;
};


T Person
   String name
   Int age

   F ()
      .age = 1

   F (name, age)
      .name = name
      .age = age

   F ()(name)
      .name = name
      R 1
===
class Person
{
public:
    String name;
    int age;

    Person()
    {
        age = 1;
    }

    template <typename T1, typename T2> Person(const T1 &name, const T2 &age) :
        name(name),
        age(age)
    {
    }

    template <typename T1> auto operator()(const T1 &name)
    {
        this->name = name;
        return 1;
    }
};


V l1 = () -> N
V l2 = x -> x[0]
V l3 = self -> self
V l4 = (x, y, reverse = 0B) -> I reverse {y < x} E x < y
V r = I reverse {y < x} E I eq {x == y} E x < y
===
auto l1 = [](){return nullptr;};
auto l2 = [](const auto &x){return _get<0>(x);};
auto l3 = [](const auto &self){return self;};
auto l4 = [](const auto &x, const auto &y, const decltype(false) &reverse = false){return reverse ? y < x : x < y;};
auto r = reverse ? y < x : eq ? x == y : x < y;


F f()
   String ch
   I ch C ‘0’..‘9’ {
   }
   if ch in ‘0’..‘9’ {
   }
   I ch !C ‘0’..‘9’ {
   }
   if ch !in ‘0’..‘9’ {
   }
===
auto f()
{
    String ch;
    if (in(ch, range_ee(u'0'_C, u'9'_C))) {
    }

    if (in(ch, range_ee(u'0'_C, u'9'_C))) {
    }

    if (!in(ch, range_ee(u'0'_C, u'9'_C))) {
    }

    if (!in(ch, range_ee(u'0'_C, u'9'_C))) {
    }
}


V id = 0
F f(str) {}
f(‘id=’id)
V s = ‘str’"\n"
V s2 = a‘’b
F to_str(indent)
   V t = ‘str’(.expression.to_str())
   R (‘ ’ * (indent * 3))‘’(.expression.to_str())"\n"
String tag = ‘<a href="’link‘"’
tag ‘’= s
===
auto id = 0;
template <typename T1> auto f(const T1 &str)
{
}

struct CodeBlock1
{
    CodeBlock1()
    {
        f(u"id="_S + id);
    }
} code_block_1;
auto s = u"str"_S + u"\n"_S;
auto s2 = a + b;
template <typename T1> auto to_str(const T1 &indent)
{
    auto t = u"str"_S + (expression.to_str());
    return (u" "_S * (indent * 3)) + (expression.to_str()) + u"\n"_S;
}
String tag = u"<a href=\""_S + link + u"\""_S;

struct CodeBlock2
{
    CodeBlock2()
    {
        tag += s;
    }
} code_block_2;


F f()
   r = abc‘’
     ‘1’
   r = abc‘’
     ‘1’def
   r = abc‘1’
     ‘’def
   r = abc‘’
     ‘’def
   r = abc‘some big ...’""
     ‘... string’
   r = abc"some big \n ..."‘’
     "... string\n"
   r = abc‘’
     '‘‘it’s’
   r = abc'‘‘it’s’
     ‘’def
   // This is a preferred way for including \r in string literals:
   r = ‘Host: api.dropboxapi.com’"\r\n"‘’
       ‘Connection: close’"\r\n"
   // ‘‘
===
auto f()
{
    r = abc + u"1"_S;
    r = abc + u"1"_S + def;
    r = abc + u"1"_S + def;
    r = abc + def;
    r = abc + u"some big ..."_S + u"... string"_S;
    r = abc + u"some big \n ..."_S + u"... string\n"_S;
    r = abc + u"it’s"_S;
    r = abc + u"it’s"_S + def;
    r = u"Host: api.dropboxapi.com"_S + u"\r\n"_S + u"Connection: close"_S + u"\r\n"_S;
}


F f()
   V arr = [1, 2, 3]
   print(arr[0..1])  // [1, 2]
   print(arr[0.<1])  // [1]
   print(arr[0<.1])  // [2]
   print(arr[0<.<2]) // [2]
   print(arr[1..])   // [2, 3]
   arr[1] = 4
   print(arr[1..])   // [4, 3]
   arr [+]= [5, 6]
   assert(arr[(0..4).step(2)] == [1, 3, 6])
   assert(arr[(1..).step(2)] == [4, 5])
   Dict[String, Int] dict
   [String = Int] dict2
   dict[‘key’] = 1
   [Int] arr2
   arr2 [+]= 10
===
auto f()
{
    auto arr = create_array({1, 2, 3});
    print(arr[range_ee(0, 1)]);
    print(arr[range_el(0, 1)]);
    print(arr[range_le(0, 1)]);
    print(arr[range_ll(0, 2)]);
    print(arr[range_ei(1)]);
    _set<1>(arr, 4);
    print(arr[range_ei(1)]);
    arr.append(create_array({5, 6}));
    assert(arr[range_ee(0, 4).step(2)] == create_array({1, 3, 6}));
    assert(arr[range_ei(1).step(2)] == create_array({4, 5}));
    Dict<String, int> dict;
    Dict<String, int> dict2;
    dict.set(u"key"_S, 1);
    Array<int> arr2;
    arr2.append(10);
}


F f()
   V s = ‘154’
   V a = [1, 5, 4]
   s[2] = ‘3’
   a[2] = 3
   assert(s[(len)-2] == ‘5’)
   assert(a[(len)-2] == 5)
   s[(len)-2] = ‘2’
   a[(len)-2] = 2
   assert(s[0.<(len)-1] == ‘12’)
   assert(a[0.<(len)-1] == [1, 2])
   assert(s[(len)-2..] == ‘23’)
   assert(a[(len)-2..] == [2, 3])
   assert(s[(len)-3..(len)-1] == ‘123’)
   assert(a[(len)-3..(len)-1] == [1, 2, 3])
   assert(s[(len)-3.<(len)-1] == ‘12’)
   assert(a[(len)-3.<(len)-1] == [1, 2])
===
auto f()
{
    auto s = u"154"_S;
    auto a = create_array({1, 5, 4});
    _set<2>(s, u'3'_C);
    _set<2>(a, 3);
    assert(s.at_plus_len( - 2) == u'5');
    assert(a.at_plus_len( - 2) == 5);
    s.set_plus_len( - 2, u'2'_C);
    a.set_plus_len( - 2, 2);
    assert(s[range_e_llen(0,  - 1)] == u"12");
    assert(a[range_e_llen(0,  - 1)] == create_array({1, 2}));
    assert(s[range_elen_i( - 2)] == u"23");
    assert(a[range_elen_i( - 2)] == create_array({2, 3}));
    assert(s[range_elen_elen( - 3,  - 1)] == u"123");
    assert(a[range_elen_elen( - 3,  - 1)] == create_array({1, 2, 3}));
    assert(s[range_elen_llen( - 3,  - 1)] == u"12");
    assert(a[range_elen_llen( - 3,  - 1)] == create_array({1, 2}));
}


F newlines()
   R ‘’
F f()
   V indent = 0
   V r = newlines()‘’(‘ ’ * (indent * 3))‘F ’(I .function_name != ‘__init__’ {.function_name} E ‘’)‘(’(I .function_arguments.empty | .function_arguments[0] != ‘self’ {.function_arguments} E .function_arguments[1..]).join(‘, ’)")\n"
   r = newlines()‘’(‘ ’ * (indent * 3))‘F ’(I .function_name != ‘__init__’ {.function_name} E ‘’)‘(’
     ‘’(I .function_arguments.empty | .function_arguments[0] != ‘self’ {.function_arguments} E .function_arguments[1..]).join(‘, ’)")\n"
   r = newlines()‘’(‘ ’ * (indent * 3))‘F ’(I .function_name != ‘__init__’ {.function_name} E ‘’)‘’
     ‘(’(I .function_arguments.empty | .function_arguments[0] != ‘self’ {.function_arguments} E .function_arguments[1..]).join(‘, ’)")\n"
   r = newlines()‘’(‘ ’ * (indent * 3))‘F ’(I .function_name != ‘__init__’ {.function_name} E ‘’)‘’ // ((
     ‘’(I .function_arguments.empty | .function_arguments[0] != ‘self’ {.function_arguments} E .function_arguments[1..]).join(‘, ’)")\n"
   r = newlines()‘’(‘ ’ * (indent * 3))‘F ’(I .function_name != ‘__init__’ {.function_name} E ‘’)‘(some big ...’""
     ‘... string’(I .function_arguments.empty | .function_arguments[0] != ‘self’ {.function_arguments} E .function_arguments[1..]).join(‘, ’)")\n"
===
auto newlines()
{
    return u""_S;
}
auto f()
{
    auto indent = 0;
    auto r = newlines() + (u" "_S * (indent * 3)) + u"F "_S + (function_name != u"__init__" ? function_name : u""_S) + u"("_S + (function_arguments.empty() || _get<0>(function_arguments) != u"self" ? function_arguments : function_arguments[range_ei(1)]).join(u", "_S) + u")\n"_S;
    r = newlines() + (u" "_S * (indent * 3)) + u"F "_S + (function_name != u"__init__" ? function_name : u""_S) + u"("_S + (function_arguments.empty() || _get<0>(function_arguments) != u"self" ? function_arguments : function_arguments[range_ei(1)]).join(u", "_S) + u")\n"_S;
    r = newlines() + (u" "_S * (indent * 3)) + u"F "_S + (function_name != u"__init__" ? function_name : u""_S) + u"("_S + (function_arguments.empty() || _get<0>(function_arguments) != u"self" ? function_arguments : function_arguments[range_ei(1)]).join(u", "_S) + u")\n"_S;
    r = newlines() + (u" "_S * (indent * 3)) + u"F "_S + (function_name != u"__init__" ? function_name : u""_S) + (function_arguments.empty() || _get<0>(function_arguments) != u"self" ? function_arguments : function_arguments[range_ei(1)]).join(u", "_S) + u")\n"_S;
    r = newlines() + (u" "_S * (indent * 3)) + u"F "_S + (function_name != u"__init__" ? function_name : u""_S) + u"(some big ..."_S + u"... string"_S + (function_arguments.empty() || _get<0>(function_arguments) != u"self" ? function_arguments : function_arguments[range_ei(1)]).join(u", "_S) + u")\n"_S;
}


F tag(ch)
   R S ch {‘*’ {‘b’}; ‘_’ {‘u’}; ‘-’ {‘s’}; ‘~’ {‘i’}}
F tag2(ch)
   R S ch {‘*’ {‘b’}; ‘**’ {‘bb’}}
===
template <typename T1> auto tag(const T1 &ch)
{
    return [&](const auto &a){return a == u'*' ? u'b'_C : a == u'_' ? u'u'_C : a == u'-' ? u's'_C : a == u'~' ? u'i'_C : throw KeyError(a);}(ch);
}
template <typename T1> auto tag2(const T1 &ch)
{
    return [&](const auto &a){return a == u'*' ? u"b"_S : a == u"**" ? u"bb"_S : throw KeyError(a);}(ch);
}


F f()
   R .children[0].to_str()‘ ’(S .symbol.id {‘and’ {‘&’}; ‘or’ {‘|’}; ‘in’ {‘C’} E {‘symbol-’(.symbol.id)}})‘ ’(.children[1].to_str())
   R .children[0].to_str()‘ ’(S .symbol.id {‘and’ {‘&’}; ‘or’ {‘|’}; ‘in’ {‘C’} E  ‘symbol-’(.symbol.id) })‘ ’(.children[1].to_str())
===
auto f()
{
    return _get<0>(children).to_str() + u" "_S + ([&](const auto &a){return a == u"and" ? u"&"_S : a == u"or" ? u"|"_S : a == u"in" ? u"C"_S : u"symbol-"_S + (symbol.id);}(symbol.id)) + u" "_S + (_get<1>(children).to_str());
    return _get<0>(children).to_str() + u" "_S + ([&](const auto &a){return a == u"and" ? u"&"_S : a == u"or" ? u"|"_S : a == u"in" ? u"C"_S : u"symbol-"_S + (symbol.id);}(symbol.id)) + u" "_S + (_get<1>(children).to_str());
}


---
V source = ‘code’
V s = copy(source).rtrim()
line_start = source.rfind("\n", source.len - 1)


F f()
   V i = 0
   V source = ‘abc_123 ’
   L i < source.len & source[i] C (‘0’..‘9’, ‘a’..‘z’, ‘A’..‘Z’, ‘_’)
      i++
   assert(i == 7)
===
auto f()
{
    auto i = 0;
    auto source = u"abc_123 "_S;
    while (i < source.len() && in(source[i], make_tuple(range_ee(u'0'_C, u'9'_C), range_ee(u'a'_C, u'z'_C), range_ee(u'A'_C, u'Z'_C), u"_"_S)))
        i++;
    assert(i == 7);
}


F to_html()
   V i = 0
   V writepos = 1
   F write_to_pos(npos)
      @writepos = @i + npos
   write_to_pos(2)
   R writepos
===
auto to_html()
{
    auto i = 0;
    auto writepos = 1;
    auto write_to_pos = [&i, &writepos](const auto &npos)
    {
        writepos = i + npos;
    };
    write_to_pos(2);
    return writepos;
}


F f(active_window, s)
   V width = active_window.rect. {.right - .left}
   active_window.pos.
      .x = 10
      .y = 20
   assert(‘string’. {.find(‘.’) ? .len} == 6)
   assert(‘str.ng’. {.find(‘.’) ? .len} == 3)
   R s.find(‘.’) ? s.len
===
template <typename T1, typename T2> auto f(const T1 &active_window, const T2 &s)
{
    auto width = [&](auto &&T){return T.right - T.left;}(active_window.rect);
    [&](auto &&T) {
        T.x = 10;
        T.y = 20;
    }(active_window.pos);
    assert([&](auto &&T){auto X = T.find(u"."_S); return X != nullptr ? *X : T.len();}(u"string"_S) == 6);
    assert([&](auto &&T){auto X = T.find(u"."_S); return X != nullptr ? *X : T.len();}(u"str.ng"_S) == 3);
    return [&]{auto R = s.find(u"."_S); return R != nullptr ? *R : s.len();}();
}


F f()
   L(n) [1, 2, 3, 4]
      I n == 30
         L.break
      print(n)

      L.was_no_break
         print(‘no break’)
===
auto f()
{
    {bool was_break = false;
    for (auto &&n : create_array({1, 2, 3, 4})) {
        if (n == 30) {
            was_break = true;
            break;
        }
        print(n);
    }
    if (!was_break)
        print(u"no break"_S);
    }
}


F f()
   L(i) 4 {L(j) 4 {I i + j == 5 {L(i).break}; print(i + j)}}
   L(i) 4 {L(j) 4 {I i + j == 5 {  ^L.break}; print(i + j)}}
   print(0)
===
auto f()
{
    for (int i = 0; i < 4; i++)
        for (int j = 0; j < 4; j++) {
            if (i + j == 5)
                goto break_;
            print(i + j);
        }
    break_:;
    for (int i = 0; i < 4; i++)
        for (int j = 0; j < 4; j++) {
            if (i + j == 5)
                goto break_1;
            print(i + j);
        }
    break_1:;
    print(0);
}


F f()
   L(v) [10, 20, 30]
      print(L.index‘: ’v)
===
auto f()
{
    {int Lindex = 0;
    for (auto &&v : create_array({10, 20, 30})) {
        print(Lindex + u": "_S + v);
        Lindex++;
    }}
}


F f()
   L(v) [10, 20, 30]
      print(L.index‘: ’v, end' ‘’)
      I !L.last_iteration
         print(‘, ’, end' ‘’)
===
auto f()
{
    {int Lindex = 0;
    {auto &&__range = create_array({10, 20, 30});
    for (auto __begin = __range.begin(), __end = __range.end(); __begin != __end;) {
        auto &&v = *__begin; ++__begin;
        print(Lindex + u": "_S + v, u""_S);
        if (!(__begin == __end))
            print(u", "_S, u""_S);
        Lindex++;
    }}}
}


F f()
   L(ch) [‘a’, ‘b’, ‘c’]
      print(ch, end' ‘’)
      I !L.last_iteration
         print(‘, ’, end' ‘’)
===
auto f()
{
    {auto &&__range = create_array({u'a'_C, u'b'_C, u'c'_C});
    for (auto __begin = __range.begin(), __end = __range.end(); __begin != __end;) {
        auto &&ch = *__begin; ++__begin;
        print(ch, u""_S);
        if (!(__begin == __end))
            print(u", "_S, u""_S);
    }}
}


F f()
   V array = [1, 2, 3, 4]
   L(i) array
      I i % 2 == 0
         L.remove_current_element_and_continue
   print(array)
===
auto f()
{
    auto array = create_array({1, 2, 3, 4});
    {auto &&__range = array;
    auto __end = __range.end();
    auto __dst = __range.begin();
    for (auto __src = __range.begin(); __src != __end;) {
        auto &&i = *__src;
        if (mod(i, 2) == 0) {
            ++__src;
            continue;
        }
        if (__dst != __src)
            *__dst = std::move(*__src);
        ++__dst;
        ++__src;
    }
    __range.erase(__dst, __end);}
    print(array);
}


[String] dirs, files
===
Array<String> dirs, files;


T TypeName
   F.destructor
      print(‘TypeName object destructed’)
===
class TypeName
{
public:
    ~TypeName()
    {
        print(u"TypeName object destructed"_S);
    }
};


I.likely 1+1 == 2
   print(‘+’)
I.unlikely 1-1 == 2
   print(‘-’)
===
struct CodeBlock1
{
    CodeBlock1()
    {
        if (likely(1 + 1 == 2))
            print(u"+"_S);
        if (unlikely(1 - 1 == 2))
            print(u"-"_S);
    }
} code_block_1;


print(‘12.0.0’.rtrim(‘.0’) == ‘12’)
print(‘12.0.0’.rtrim(‘.0’, 1) == ‘12.0’)
print(‘/a///’.rtrim(‘/’, 2) == ‘/a/’)
print(‘/a///’.ltrim(‘/’) == ‘a///’)
print(‘/a///’.trim(‘/’) == ‘a’)
print(‘//a//’.ltrim(‘/’, 1) == ‘/a//’)
print("\t word \t".rtrim(("\t", " ")) == "\t word")
print("\t word \t".ltrim(("\t", " ")) ==    "word \t")
print("\t word \t". trim(("\t", " ")) ==    "word")
print("\t word \t".rtrim(("\t", " "), 1) == "\t word ")
print("\t word \t".ltrim(("\t", " "), 1) ==   " word \t")
print("\t word \t". trim(("\t", " ")   ) ==    "word")
===
struct CodeBlock1
{
    CodeBlock1()
    {
        print(u"12.0.0"_S.rtrim(u".0"_S) == u"12");
        print(u"12.0.0"_S.rtrim(u".0"_S, 1) == u"12.0");
        print(u"/a///"_S.rtrim(u"/"_S, 2) == u"/a/");
        print(u"/a///"_S.ltrim(u"/"_S) == u"a///");
        print(u"/a///"_S.trim(u"/"_S) == u'a');
        print(u"//a//"_S.ltrim(u"/"_S, 1) == u"/a//");
        print(u"\t word \t"_S.rtrim(make_tuple(u"\t"_S, u" "_S)) == u"\t word");
        print(u"\t word \t"_S.ltrim(make_tuple(u"\t"_S, u" "_S)) == u"word \t");
        print(u"\t word \t"_S.trim(make_tuple(u"\t"_S, u" "_S)) == u"word");
        print(u"\t word \t"_S.rtrim(make_tuple(u"\t"_S, u" "_S), 1) == u"\t word ");
        print(u"\t word \t"_S.ltrim(make_tuple(u"\t"_S, u" "_S), 1) == u" word \t");
        print(u"\t word \t"_S.trim(make_tuple(u"\t"_S, u" "_S)) == u"word");
    }
} code_block_1;


F func(Int n) -> N
    print(n)

(Int -> N) fptr = func
fptr(1)
===
void func(const int n)
{
    print(n);
}
std::function<void(const int)> fptr = func;

struct CodeBlock1
{
    CodeBlock1()
    {
        fptr(1);
    }
} code_block_1;


V tag = S ‘_’
           ‘*’
              ‘b’
           ‘_’
              ‘u’
           ‘-’
              ‘s’
           ‘~’
              ‘i’
print(tag)
tag = S ‘-’
         ‘*’
            ‘b’
         ‘_’
            ‘u’
         ‘-’
            ‘s’
         ‘~’
            ‘i’
print(tag)
===
auto tag = [&](const auto &a){return a == u'*' ? u'b'_C : a == u'_' ? u'u'_C : a == u'-' ? u's'_C : a == u'~' ? u'i'_C : throw KeyError(a);}(u"_"_S);

struct CodeBlock1
{
    CodeBlock1()
    {
        print(tag);
        tag = [&](const auto &a){return a == u'*' ? u'b'_C : a == u'_' ? u'u'_C : a == u'-' ? u's'_C : a == u'~' ? u'i'_C : throw KeyError(a);}(u"-"_S);
        print(tag);
    }
} code_block_1;


T Type1
   T Type2
      F f(a = 1, b = 2)
         R a‘ ’b
   Type2 t

Type1 t
print(t.t.f(b' 3))
===
class Type1
{
public:
    class Type2
    {
    public:
        template <typename T1 = decltype(1), typename T2 = decltype(2)> auto f(const T1 &a = 1, const T2 &b = 2)
        {
            return a + u" "_S + b;
        }
    };
    Type2 t;
};
Type1 t;

struct CodeBlock1
{
    CodeBlock1()
    {
        print(t.t.f(1, 3));
    }
} code_block_1;


T Person
   String name = ‘  F.  H. ’
Person person
print(person.name.split(‘ ’, group_delimiters' 1B))
print(‘ 1 2  3  ’.split(‘ ’, group_delimiters' 1B))
===
class Person
{
public:
    String name = u"  F.  H. "_S;
};
Person person;

struct CodeBlock1
{
    CodeBlock1()
    {
        print(person.name.split(u" "_S, nullptr, true));
        print(u" 1 2  3  "_S.split(u" "_S, nullptr, true));
    }
} code_block_1;


V number = 3
L 1..number
   print(‘.’)
===
auto number = 3;

struct CodeBlock1
{
    CodeBlock1()
    {
        for (auto __unused : range_ee(1, number))
            print(u"."_S);
    }
} code_block_1;


print(‘
#4.
#4
#4
#04
#.%
#.6%
#2.6%
#2.2%
#2.2%
#2%
#5
#.
#<5.’.format(40, 4, 1.2, 1.2, 1.234, 1.234, 1.234, 1.234, -1.234, 1, ‘abc’, ‘abc’, ‘abc’)
==‘
  40.
   4
 1.2
01.2
1.234%
1.234000%
 1.234000%
 1.23%
-1.23%
 1%
  abc
abc
abc  .’)
===
struct CodeBlock1
{
    CodeBlock1()
    {
        print(uR"(
#4.
#4
#4
#04
#.%
#.6%
#2.6%
#2.2%
#2.2%
#2%
#5
#.
#<5.)"_S.format(40, 4, 1.2, 1.2, 1.234, 1.234, 1.234, 1.234, -1.234, 1, u"abc"_S, u"abc"_S, u"abc"_S) == uR"(
  40.
   4
 1.2
01.2
1.234%
1.234000%
 1.234000%
 1.23%
-1.23%
 1%
  abc
abc
abc  .)");
    }
} code_block_1;


V freqs = [1, 2]
L(&f) freqs
   f *= 2
print(freqs)
===
auto freqs = create_array({1, 2});

struct CodeBlock1
{
    CodeBlock1()
    {
        for (auto &f : freqs)
            f *= 2;
        print(freqs);
    }
} code_block_1;


V t = (1, 2)
t[0] = 3
===
auto t = make_tuple(1, 2);

struct CodeBlock1
{
    CodeBlock1()
    {
        _set<0>(t, 3);
    }
} code_block_1;


T Tuple2[T Ty] = Tuple[Ty, Ty]
T Tuple23[T Ty1, T Ty2] = Tuple[Ty1, Ty1, Ty2]
T Tuple2Int = Tuple[Int, Int]
T StaticArray = Array
T StaticIntArray[Int n] = StaticArray[Int, n]
===
template <typename Ty> using Tuple2 = Tuple<Ty, Ty>;
template <typename Ty1, typename Ty2> using Tuple23 = Tuple<Ty1, Ty1, Ty2>;
using Tuple2Int = Tuple<int, int>;
using StaticArray = Array;
template <int n> using StaticIntArray = StaticArray<int, n>;


T MyType
   Int public_variable
   . Int private_variable

T MyType2
   . Int private_variable
   Int public_variable
===
class MyType
{
public:
    int public_variable;
private:
    int private_variable;
};

class MyType2
{
private:
    int private_variable;
public:
    int public_variable;
};


// Test that shows why `and type(s.node) == ASTFunctionDefinition` is needed
T Converter
   String instr

   F to_html()
      V f = () -> @.instr
===
class Converter
{
public:
    String instr;

    auto to_html()
    {
        auto f = [this](){return instr;};
    }
};


F f(Int x, y, z)
   R x + y + z
F f2(x, Int y, z)
   R x + y + z
F f3(Int x, Float y)
   R x + y
F f4(Int x; y)
   R x + y
===
auto f(const int x, const int y, const int z)
{
    return x + y + z;
}
template <typename T1> auto f2(const T1 &x, const int y, const int z)
{
    return x + y + z;
}
auto f3(const int x, const double y)
{
    return x + y;
}
template <typename T2> auto f4(const int x, const T2 &y)
{
    return x + y;
}


print((2, 1) * 1.5)
print(1.5 * (2, 1))
print((2, 1) * (1.5, 2.0))
===
struct CodeBlock1
{
    CodeBlock1()
    {
        print(make_tuple(2, 1) * 1.5);
        print(1.5 * make_tuple(2, 1));
        print(make_tuple(2, 1) * make_tuple(1.5, 2.0));
    }
} code_block_1;


V tag = S ‘_’
           \(case) ‘*’
              ‘b’
           \(case) ‘_’
              ‘u’
===
auto tag = [&](const auto &a){return a == u'*' ? u'b'_C : a == u'_' ? u'u'_C : throw KeyError(a);}(u"_"_S);


L 2
   print(L.index)
===
struct CodeBlock1
{
    CodeBlock1()
    {
        for (int Lindex = 0; Lindex < 2; Lindex++)
            print(Lindex);
    }
} code_block_1;


V a = [[Int]]()
a [+]= [Int]()
print(a)
print([[Int]()])
===
auto a = Array<Array<int>>();

struct CodeBlock1
{
    CodeBlock1()
    {
        a.append(Array<int>());
        print(a);
        print(create_array({Array<int>()}));
    }
} code_block_1;


F getNormal((Float, Float, Float) punto) -> (Float, Float, Float)
   R punto
===
dvec3 getNormal(const dvec3 &punto)
{
    return punto;
}


print(‘1234’[1.+2])
===
struct CodeBlock1
{
    CodeBlock1()
    {
        print(u"1234"_S[range_ep(1, 2)]);
    }
} code_block_1;