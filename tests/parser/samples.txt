---
\‘res = '['
for i in range(len(self.children)):
    res += self.children[i].to_str()
    if i < len(self.children)-1:
        res += ', '
return res + ']'’
A res = ‘[’
L(c) .children
   res ‘’= c.to_str()
   I L.next != N
      res ‘’= ‘, ’
R res‘]’


String token
F f()
   R S :token {‘None’ {‘N’}; ‘False’ {‘0B’}; ‘True’ {‘1B’}}
===
String token;
auto f()
{
    return [](const auto &a){return a == u"None"_S ? u"N"_S : a == u"False"_S ? u"0B"_S : a == u"True"_S ? u"1B"_S : throw KeyError(a);}(::token);
}


F func(arg = 1)
   R arg + 1
===
template <typename T1> auto func(const T1 &arg = 1)
{
    return arg + 1;
}


F sign(x)
   I x < 0
      R -1
   E I x > 0
      R 1
   E
      R 0
===
template <typename T1> auto sign(const T1 &x)
{
    if (x < 0)
        return -1;
    else if (x > 0)
        return 1;
    else
        return 0;
}


F f()
   I 1B
   {
   }
===
auto f()
{
    if (true) {
    }
}


// Inspired by sample from ‘Nemerle Wiki’[https://github.com/rsdn/nemerle/wiki/The-basics-(tutorial)#Rewriting_Line_Counter_without_the_loop]
if foo
   if bar
       m1()
else
    m2()
===
if (foo) {
    if (bar)
        m1();
}
else
    m2();



if foo
   if bar
       m1()
   else if z
       if e
          m3()
   else
       m4()
else
    m2()
===
if (foo) {
    if (bar)
        m1();
    else if (z) {
        if (e)
            m3();
    }
    else
        m4();
}
else
    m2();


T Shape
   Tuple[Int, Int] position

T Circle(Shape, Object)
   Int radious
===
class Shape
{
public:
    Tuple<int, int> position;
};

class Circle : public Shape, public Object
{
public:
    int radious;
};


T Person
   String name
   Int age

   F ()
      .age = 1

   F (name, age)
      .name = name
      .age = age

   F ()(name)
      .name = name
      R 1
===
class Person
{
public:
    String name;
    int age;

    Person()
    {
        age = 1;
    }

    template <typename T1, typename T2> Person(const T1 &name, const T2 &age)
    {
        this->name = name;
        this->age = age;
    }

    template <typename T1> auto operator()(const T1 &name)
    {
        this->name = name;
        return 1;
    }
};


---
A l1 = () -> N
A l2 = x -> x[0]
A l3 = self -> self
A l4 = (x, y, reverse = 0B) -> I reverse {y < x} E x < y
===