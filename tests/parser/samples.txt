---
\‘res = '['
for i in range(len(self.children)):
    res += self.children[i].to_str()
    if i < len(self.children)-1:
        res += ', '
return res + ']'’
V res = ‘[’
L(c) .children
   res ‘’= c.to_str()
   I !L.last_iteration
      res ‘’= ‘, ’
R res‘]’


String token
F f()
   R S :token {‘None’ {‘N’}; ‘False’ {‘0B’}; ‘True’ {‘1B’}}
===
String token;
auto f()
{
    return [&](const auto &a){return a == u"None" ? u"N"_S : a == u"False" ? u"0B"_S : a == u"True" ? u"1B"_S : throw KeyError(a);}(::token);
}


F func(arg = 1)
   R arg + 1
===
template <typename T1 = decltype(1)> auto func(const T1 &arg = 1)
{
    return arg + 1;
}


F sign(x)
   I x < 0
      R -1
   E I x > 0
      R 1
   E
      R 0
===
template <typename T1> auto sign(const T1 &x)
{
    if (x < 0)
        return -1;
    else if (x > 0)
        return 1;
    else
        return 0;
}


F f()
   I 1B
   {
   }
===
auto f()
{
    if (true) {
    }
}


// Inspired by sample from ‘Nemerle Wiki’[https://github.com/rsdn/nemerle/wiki/The-basics-(tutorial)#Rewriting_Line_Counter_without_the_loop]
fn m1() {}
fn m2() {}
fn f()
   if foo
      if bar
         m1()
   else
      m2()
===
auto m1()
{
}
auto m2()
{
}
auto f()
{
    if (foo) {
        if (bar)
            m1();
    }
    else
        m2();
}


fn m1() {}
fn m2() {}
fn m3() {}
fn m4() {}
fn f()
{
   if foo
      if bar
         m1()
      else if z
         if e
            m3()
      else
         m4()
   else
      m2()
}
===
auto m1()
{
}
auto m2()
{
}
auto m3()
{
}
auto m4()
{
}
auto f()
{
    if (foo) {
        if (bar)
            m1();
        else if (z) {
            if (e)
                m3();
        }
        else
            m4();
    }
    else
        m2();
}


T Shape
   Tuple[Int, Int] position

T Circle(Shape, Object)
   Int radious
===
class Shape
{
public:
    Tuple<int, int> position;
};

class Circle : public Shape, public Object
{
public:
    int radious;
};


T Person
   String name
   Int age

   F ()
      .age = 1

   F (name, age)
      .name = name
      .age = age

   F ()(name)
      .name = name
      R 1
===
class Person
{
public:
    String name;
    int age;

    Person()
    {
        age = 1;
    }

    template <typename T1, typename T2> Person(const T1 &name, const T2 &age) :
        name(name),
        age(age)
    {
    }

    template <typename T1> auto operator()(const T1 &name)
    {
        this->name = name;
        return 1;
    }
};


V l1 = () -> N
V l2 = x -> x[0]
V l3 = self -> self
V l4 = (x, y, reverse = 0B) -> I reverse {y < x} E x < y
V r = I reverse {y < x} E I eq {x == y} E x < y
===
auto l1 = [](){return nullptr;};
auto l2 = [](const auto &x){return _get<0>(x);};
auto l3 = [](const auto &self){return self;};
auto l4 = [](const auto &x, const auto &y, const decltype(false) &reverse = false){return reverse ? y < x : x < y;};
auto r = reverse ? y < x : eq ? x == y : x < y;


F f()
   String ch
   I ch C ‘0’..‘9’ {
   }
   if ch in ‘0’..‘9’ {
   }
   I ch !C ‘0’..‘9’ {
   }
   if ch !in ‘0’..‘9’ {
   }
===
auto f()
{
    String ch;
    if (in(ch, range_ee(u'0'_C, u'9'_C))) {
    }

    if (in(ch, range_ee(u'0'_C, u'9'_C))) {
    }

    if (!in(ch, range_ee(u'0'_C, u'9'_C))) {
    }

    if (!in(ch, range_ee(u'0'_C, u'9'_C))) {
    }
}


V id = 0
F f(str) {}
f(‘id=’id)
V s = ‘str’"\n"
V s2 = a‘’b
T Node
   String expression
   F to_str(indent)
      V t = ‘str’(.expression.to_str())
      R (‘ ’ * (indent * 3))‘’(.expression.to_str())"\n"
String tag = ‘<a href="’link‘"’
tag ‘’= s
===
auto id = 0;
template <typename T1> auto f(const T1 &str)
{
}

struct CodeBlock1
{
    CodeBlock1()
    {
        f(u"id="_S & id);
    }
} code_block_1;

auto s = u"str"_S & u"\n"_S;
auto s2 = a & b;
class Node
{
public:
    String expression;
    template <typename T1> auto to_str(const T1 &indent)
    {
        auto t = u"str"_S & (expression.to_str());
        return (u" "_S * (indent * 3)) & (expression.to_str()) & u"\n"_S;
    }
};
String tag = u"<a href=\""_S & link & u"\""_S;

struct CodeBlock2
{
    CodeBlock2()
    {
        tag &= s;
    }
} code_block_2;


F f()
   r = abc‘’
     ‘1’
   r = abc‘’
     ‘1’def
   r = abc‘1’
     ‘’def
   r = abc‘’
     ‘’def
   r = abc‘some big ...’""
     ‘... string’
   r = abc"some big \n ..."‘’
     "... string\n"
   r = abc‘’
     '‘‘it’s’
   r = abc'‘‘it’s’
     ‘’def
   // This is a preferred way for including \r in string literals:
   r = ‘Host: api.dropboxapi.com’"\r\n"‘’
       ‘Connection: close’"\r\n"
   // ‘‘
===
auto f()
{
    r = abc & u"1"_S;
    r = abc & u"1"_S & def;
    r = abc & u"1"_S & def;
    r = abc & def;
    r = abc & u"some big ..."_S & u"... string"_S;
    r = abc & u"some big \n ..."_S & u"... string\n"_S;
    r = abc & u"it’s"_S;
    r = abc & u"it’s"_S & def;
    r = u"Host: api.dropboxapi.com"_S & u"\r\n"_S & u"Connection: close"_S & u"\r\n"_S;
}


F f()
   V arr = [1, 2, 3]
   print(arr[0..1])  // [1, 2]
   print(arr[0.<1])  // [1]
   print(arr[0<.1])  // [2]
   print(arr[0<.<2]) // [2]
   print(arr[1..])   // [2, 3]
   arr[1] = 4
   print(arr[1..])   // [4, 3]
   arr [+]= [5, 6]
   assert(arr[(0..4).step(2)] == [1, 3, 6])
   assert(arr[(1..).step(2)] == [4, 5])
   Dict[String, Int] dict
   [String = Int] dict2
   dict[‘key’] = 1
   [Int] arr2
   arr2 [+]= 10
===
auto f()
{
    auto arr = create_array({1, 2, 3});
    print(arr[range_ee(0, 1)]);
    print(arr[range_el(0, 1)]);
    print(arr[range_le(0, 1)]);
    print(arr[range_ll(0, 2)]);
    print(arr[range_ei(1)]);
    _set<1>(arr, 4);
    print(arr[range_ei(1)]);
    arr.append(create_array({5, 6}));
    assert(arr[range_ee(0, 4).step(2)] == create_array({1, 3, 6}));
    assert(arr[range_ei(1).step(2)] == create_array({4, 5}));
    Dict<String, int> dict;
    Dict<String, int> dict2;
    dict.set(u"key"_S, 1);
    Array<int> arr2;
    arr2.append(10);
}


F f()
   V s = ‘154’
   V a = [1, 5, 4]
   s[2] = ‘3’
   a[2] = 3
   assert(s[(len)-2] == ‘5’)
   assert(a[(len)-2] == 5)
   s[(len)-2] = ‘2’
   a[(len)-2] = 2
   assert(s[0.<(len)-1] == ‘12’)
   assert(a[0.<(len)-1] == [1, 2])
   assert(s[(len)-2..] == ‘23’)
   assert(a[(len)-2..] == [2, 3])
   assert(s[(len)-3..(len)-1] == ‘123’)
   assert(a[(len)-3..(len)-1] == [1, 2, 3])
   assert(s[(len)-3.<(len)-1] == ‘12’)
   assert(a[(len)-3.<(len)-1] == [1, 2])
===
auto f()
{
    auto s = u"154"_S;
    auto a = create_array({1, 5, 4});
    _set<2>(s, u'3'_C);
    _set<2>(a, 3);
    assert(s.at_plus_len( - 2) == u'5');
    assert(a.at_plus_len( - 2) == 5);
    s.set_plus_len( - 2, u'2'_C);
    a.set_plus_len( - 2, 2);
    assert(s[range_e_llen(0,  - 1)] == u"12");
    assert(a[range_e_llen(0,  - 1)] == create_array({1, 2}));
    assert(s[range_elen_i( - 2)] == u"23");
    assert(a[range_elen_i( - 2)] == create_array({2, 3}));
    assert(s[range_elen_elen( - 3,  - 1)] == u"123");
    assert(a[range_elen_elen( - 3,  - 1)] == create_array({1, 2, 3}));
    assert(s[range_elen_llen( - 3,  - 1)] == u"12");
    assert(a[range_elen_llen( - 3,  - 1)] == create_array({1, 2}));
}


F newlines()
   R ‘’
T ASTFunctionDefinition
   String function_name
   F f()
      V indent = 0
      V r = newlines()‘’(‘ ’ * (indent * 3))‘F ’(I .function_name != ‘__init__’ {.function_name} E ‘’)‘(’(I .function_arguments.empty | .function_arguments[0] != ‘self’ {.function_arguments} E .function_arguments[1..]).join(‘, ’)")\n"
      r = newlines()‘’(‘ ’ * (indent * 3))‘F ’(I .function_name != ‘__init__’ {.function_name} E ‘’)‘(’
        ‘’(I .function_arguments.empty | .function_arguments[0] != ‘self’ {.function_arguments} E .function_arguments[1..]).join(‘, ’)")\n"
      r = newlines()‘’(‘ ’ * (indent * 3))‘F ’(I .function_name != ‘__init__’ {.function_name} E ‘’)‘’
        ‘(’(I .function_arguments.empty | .function_arguments[0] != ‘self’ {.function_arguments} E .function_arguments[1..]).join(‘, ’)")\n"
      r = newlines()‘’(‘ ’ * (indent * 3))‘F ’(I .function_name != ‘__init__’ {.function_name} E ‘’)‘’ // ((
        ‘’(I .function_arguments.empty | .function_arguments[0] != ‘self’ {.function_arguments} E .function_arguments[1..]).join(‘, ’)")\n"
      r = newlines()‘’(‘ ’ * (indent * 3))‘F ’(I .function_name != ‘__init__’ {.function_name} E ‘’)‘(some big ...’""
        ‘... string’(I .function_arguments.empty | .function_arguments[0] != ‘self’ {.function_arguments} E .function_arguments[1..]).join(‘, ’)")\n"
===
auto newlines()
{
    return u""_S;
}
class ASTFunctionDefinition
{
public:
    String function_name;
    auto f()
    {
        auto indent = 0;
        auto r = newlines() & (u" "_S * (indent * 3)) & u"F "_S & (function_name != u"__init__" ? function_name : u""_S) & u"("_S & (function_arguments.empty() || _get<0>(function_arguments) != u"self" ? function_arguments : function_arguments[range_ei(1)]).join(u", "_S) & u")\n"_S;
        r = newlines() & (u" "_S * (indent * 3)) & u"F "_S & (function_name != u"__init__" ? function_name : u""_S) & u"("_S & (function_arguments.empty() || _get<0>(function_arguments) != u"self" ? function_arguments : function_arguments[range_ei(1)]).join(u", "_S) & u")\n"_S;
        r = newlines() & (u" "_S * (indent * 3)) & u"F "_S & (function_name != u"__init__" ? function_name : u""_S) & u"("_S & (function_arguments.empty() || _get<0>(function_arguments) != u"self" ? function_arguments : function_arguments[range_ei(1)]).join(u", "_S) & u")\n"_S;
        r = newlines() & (u" "_S * (indent * 3)) & u"F "_S & (function_name != u"__init__" ? function_name : u""_S) & (function_arguments.empty() || _get<0>(function_arguments) != u"self" ? function_arguments : function_arguments[range_ei(1)]).join(u", "_S) & u")\n"_S;
        r = newlines() & (u" "_S * (indent * 3)) & u"F "_S & (function_name != u"__init__" ? function_name : u""_S) & u"(some big ..."_S & u"... string"_S & (function_arguments.empty() || _get<0>(function_arguments) != u"self" ? function_arguments : function_arguments[range_ei(1)]).join(u", "_S) & u")\n"_S;
    }
};


F tag(ch)
   R S ch {‘*’ {‘b’}; ‘_’ {‘u’}; ‘-’ {‘s’}; ‘~’ {‘i’}}
F tag2(ch)
   R S ch {‘*’ {‘b’}; ‘**’ {‘bb’}}
===
template <typename T1> auto tag(const T1 &ch)
{
    return [&](const auto &a){return a == u'*' ? u'b'_C : a == u'_' ? u'u'_C : a == u'-' ? u's'_C : a == u'~' ? u'i'_C : throw KeyError(a);}(ch);
}
template <typename T1> auto tag2(const T1 &ch)
{
    return [&](const auto &a){return a == u'*' ? u"b"_S : a == u"**" ? u"bb"_S : throw KeyError(a);}(ch);
}


T Node
   [String] children
   F f()
      R .children[0].to_str()‘ ’(S .symbol.id {‘and’ {‘&’}; ‘or’ {‘|’}; ‘in’ {‘C’} E {‘symbol-’(.symbol.id)}})‘ ’(.children[1].to_str())
      R .children[0].to_str()‘ ’(S .symbol.id {‘and’ {‘&’}; ‘or’ {‘|’}; ‘in’ {‘C’} E  ‘symbol-’(.symbol.id) })‘ ’(.children[1].to_str())
===
class Node
{
public:
    Array<String> children;
    auto f()
    {
        return _get<0>(children).to_str() & u" "_S & ([&](const auto &a){return a == u"and" ? u"&"_S : a == u"or" ? u"|"_S : a == u"in" ? u"C"_S : u"symbol-"_S & (symbol.id);}(symbol.id)) & u" "_S & (_get<1>(children).to_str());
        return _get<0>(children).to_str() & u" "_S & ([&](const auto &a){return a == u"and" ? u"&"_S : a == u"or" ? u"|"_S : a == u"in" ? u"C"_S : u"symbol-"_S & (symbol.id);}(symbol.id)) & u" "_S & (_get<1>(children).to_str());
    }
};


---
V source = ‘code’
V s = copy(source).rtrim()
line_start = source.rfind("\n", source.len - 1)


F f()
   V i = 0
   V source = ‘abc_123 ’
   L i < source.len & source[i] C (‘0’..‘9’, ‘a’..‘z’, ‘A’..‘Z’, ‘_’)
      i++
   assert(i == 7)
===
auto f()
{
    auto i = 0;
    auto source = u"abc_123 "_S;
    while (i < source.len() && in(source[i], make_tuple(range_ee(u'0'_C, u'9'_C), range_ee(u'a'_C, u'z'_C), range_ee(u'A'_C, u'Z'_C), u"_"_S)))
        i++;
    assert(i == 7);
}


F to_html()
   V i = 0
   V writepos = 1
   F write_to_pos(npos)
      @writepos = @i + npos
   write_to_pos(2)
   R writepos
===
auto to_html()
{
    auto i = 0;
    auto writepos = 1;
    auto write_to_pos = [&i, &writepos](const auto &npos)
    {
        writepos = i + npos;
    };
    write_to_pos(2);
    return writepos;
}


F f(active_window, s)
   V width = active_window.rect. {.right - .left}
   active_window.pos.
      .x = 10
      .y = 20
   assert(‘string’. {.find(‘.’) ? .len} == 6)
   assert(‘str.ng’. {.find(‘.’) ? .len} == 3)
   R s.find(‘.’) ? s.len
===
template <typename T1, typename T2> auto f(const T1 &active_window, const T2 &s)
{
    auto width = [&](auto &&T){return T.right - T.left;}(active_window.rect);
    [&](auto &&T) {
        T.x = 10;
        T.y = 20;
    }(active_window.pos);
    assert([&](auto &&T){auto X = T.find(u"."_S); return X != nullptr ? *X : T.len();}(u"string"_S) == 6);
    assert([&](auto &&T){auto X = T.find(u"."_S); return X != nullptr ? *X : T.len();}(u"str.ng"_S) == 3);
    return [&]{auto R = s.find(u"."_S); return R != nullptr ? *R : s.len();}();
}


F f()
   L(n) [1, 2, 3, 4]
      I n == 30
         L.break
      print(n)

   L.was_no_break
      print(‘no break’)
===
auto f()
{
    for (auto &&n : create_array({1, 2, 3, 4})) {
        if (n == 30)
            goto break_;
        print(n);
    }
    print(u"no break"_S);
    break_:;
}


F f()
   L(i) 4 {L(j) 4 {I i + j == 5 {L(i).break}; print(i + j)}}
   L(i) 4 {L(j) 4 {I i + j == 5 {  ^L.break}; print(i + j)}}
   print(0)
===
auto f()
{
    for (int i = 0; i < 4; i++)
        for (int j = 0; j < 4; j++) {
            if (i + j == 5)
                goto break_;
            print(i + j);
        }
    break_:;
    for (int i = 0; i < 4; i++)
        for (int j = 0; j < 4; j++) {
            if (i + j == 5)
                goto break_1;
            print(i + j);
        }
    break_1:;
    print(0);
}


F f()
   L(v) [10, 20, 30]
      print(L.index‘: ’v)
===
auto f()
{
    {int Lindex = 0;
    for (auto &&v : create_array({10, 20, 30})) {
        print(Lindex & u": "_S & v);
        Lindex++;
    }}
}


F f()
   L(v) [10, 20, 30]
      print(L.index‘: ’v, end' ‘’)
      I !L.last_iteration
         print(‘, ’, end' ‘’)
===
auto f()
{
    {int Lindex = 0;
    {auto &&__range = create_array({10, 20, 30});
    for (auto __begin = __range.begin(), __end = __range.end(); __begin != __end;) {
        auto &&v = *__begin; ++__begin;
        print(Lindex & u": "_S & v, u""_S);
        if (!(__begin == __end))
            print(u", "_S, u""_S);
        Lindex++;
    }}}
}


F f()
   L(ch) [‘a’, ‘b’, ‘c’]
      print(ch, end' ‘’)
      I !L.last_iteration
         print(‘, ’, end' ‘’)
===
auto f()
{
    {auto &&__range = create_array({u'a'_C, u'b'_C, u'c'_C});
    for (auto __begin = __range.begin(), __end = __range.end(); __begin != __end;) {
        auto &&ch = *__begin; ++__begin;
        print(ch, u""_S);
        if (!(__begin == __end))
            print(u", "_S, u""_S);
    }}
}


F f()
   V array = [1, 2, 3, 4]
   L(i) array
      I i % 2 == 0
         L.remove_current_element_and_continue
   print(array)
===
auto f()
{
    auto array = create_array({1, 2, 3, 4});
    {auto &&__range = array;
    auto __end = __range.end();
    auto __dst = __range.begin();
    for (auto __src = __range.begin(); __src != __end;) {
        auto &&i = *__src;
        if (mod(i, 2) == 0) {
            ++__src;
            continue;
        }
        if (__dst != __src)
            *__dst = std::move(*__src);
        ++__dst;
        ++__src;
    }
    __range.erase(__dst, __end);}
    print(array);
}


[String] dirs, files
===
Array<String> dirs, files;


T TypeName
   F.destructor
      print(‘TypeName object destructed’)
===
class TypeName
{
public:
    ~TypeName()
    {
        print(u"TypeName object destructed"_S);
    }
};


I.likely 1+1 == 2
   print(‘+’)
I.unlikely 1-1 == 2
   print(‘-’)
===
struct CodeBlock1
{
    CodeBlock1()
    {
        if (likely(1 + 1 == 2))
            print(u"+"_S);
        if (unlikely(1 - 1 == 2))
            print(u"-"_S);
    }
} code_block_1;


print(‘12.0.0’.rtrim(‘.0’) == ‘12’)
print(‘12.0.0’.rtrim(‘.0’, 1) == ‘12.0’)
print(‘/a///’.rtrim(‘/’, 2) == ‘/a/’)
print(‘/a///’.ltrim(‘/’) == ‘a///’)
print(‘/a///’.trim(‘/’) == ‘a’)
print(‘//a//’.ltrim(‘/’, 1) == ‘/a//’)
print("\t word \t".rtrim(("\t", " ")) == "\t word")
print("\t word \t".ltrim(("\t", " ")) ==    "word \t")
print("\t word \t". trim(("\t", " ")) ==    "word")
print("\t word \t".rtrim(("\t", " "), 1) == "\t word ")
print("\t word \t".ltrim(("\t", " "), 1) ==   " word \t")
print("\t word \t". trim(("\t", " ")   ) ==    "word")
===
struct CodeBlock1
{
    CodeBlock1()
    {
        print(u"12.0.0"_S.rtrim(u".0"_S) == u"12");
        print(u"12.0.0"_S.rtrim(u".0"_S, 1) == u"12.0");
        print(u"/a///"_S.rtrim(u"/"_S, 2) == u"/a/");
        print(u"/a///"_S.ltrim(u"/"_S) == u"a///");
        print(u"/a///"_S.trim(u"/"_S) == u'a');
        print(u"//a//"_S.ltrim(u"/"_S, 1) == u"/a//");
        print(u"\t word \t"_S.rtrim(make_tuple(u"\t"_S, u" "_S)) == u"\t word");
        print(u"\t word \t"_S.ltrim(make_tuple(u"\t"_S, u" "_S)) == u"word \t");
        print(u"\t word \t"_S.trim(make_tuple(u"\t"_S, u" "_S)) == u"word");
        print(u"\t word \t"_S.rtrim(make_tuple(u"\t"_S, u" "_S), 1) == u"\t word ");
        print(u"\t word \t"_S.ltrim(make_tuple(u"\t"_S, u" "_S), 1) == u" word \t");
        print(u"\t word \t"_S.trim(make_tuple(u"\t"_S, u" "_S)) == u"word");
    }
} code_block_1;


F func(Int n) -> N
   print(n)

(Int -> N) fptr = func
fptr(1)
===
void func(const int n)
{
    print(n);
}

std::function<void(const int)> fptr = func;

struct CodeBlock1
{
    CodeBlock1()
    {
        fptr(1);
    }
} code_block_1;


V tag = S ‘_’
           ‘*’
              ‘b’
           ‘_’
              ‘u’
           ‘-’
              ‘s’
           ‘~’
              ‘i’
print(tag)
tag = S ‘-’
         ‘*’
            ‘b’
         ‘_’
            ‘u’
         ‘-’
            ‘s’
         ‘~’
            ‘i’
print(tag)
===
auto tag = [&](const auto &a){return a == u'*' ? u'b'_C : a == u'_' ? u'u'_C : a == u'-' ? u's'_C : a == u'~' ? u'i'_C : throw KeyError(a);}(u"_"_S);

struct CodeBlock1
{
    CodeBlock1()
    {
        print(tag);
        tag = [&](const auto &a){return a == u'*' ? u'b'_C : a == u'_' ? u'u'_C : a == u'-' ? u's'_C : a == u'~' ? u'i'_C : throw KeyError(a);}(u"-"_S);
        print(tag);
    }
} code_block_1;


T Type1
   T Type2
      F f(a = 1, b = 2)
         R a‘ ’b
   Type2 t

Type1 t
print(t.t.f(b' 3))
===
class Type1
{
public:
    class Type2
    {
    public:
        template <typename T1 = decltype(1), typename T2 = decltype(2)> auto f(const T1 &a = 1, const T2 &b = 2)
        {
            return a & u" "_S & b;
        }
    };
    Type2 t;
};

Type1 t;

struct CodeBlock1
{
    CodeBlock1()
    {
        print(t.t.f(1, 3));
    }
} code_block_1;


T Person
   String name = ‘  F.  H. ’
Person person
print(person.name.split(‘ ’, group_delimiters' 1B))
print(‘ 1 2  3  ’.split(‘ ’, group_delimiters' 1B))
===
class Person
{
public:
    String name = u"  F.  H. "_S;
};
Person person;

struct CodeBlock1
{
    CodeBlock1()
    {
        print(person.name.split(u" "_S, nullptr, true));
        print(u" 1 2  3  "_S.split(u" "_S, nullptr, true));
    }
} code_block_1;


V number = 3
L 1..number
   print(‘.’)
===
auto number = 3;

struct CodeBlock1
{
    CodeBlock1()
    {
        for (auto __unused : range_ee(1, number))
            print(u"."_S);
    }
} code_block_1;


print(‘
#4.
#4
#4
#04
#.%
#.6%
#2.6%
#2.2%
#2.2%
#2%
#5
#.
#<5.’.format(40, 4, 1.2, 1.2, 1.234, 1.234, 1.234, 1.234, -1.234, 1, ‘abc’, ‘abc’, ‘abc’)
==‘
  40.
   4
 1.2
01.2
1.234%
1.234000%
 1.234000%
 1.23%
-1.23%
 1%
  abc
abc
abc  .’)
===
struct CodeBlock1
{
    CodeBlock1()
    {
        print(uR"(
#4.
#4
#4
#04
#.%
#.6%
#2.6%
#2.2%
#2.2%
#2%
#5
#.
#<5.)"_S.format(40, 4, 1.2, 1.2, 1.234, 1.234, 1.234, 1.234, -1.234, 1, u"abc"_S, u"abc"_S, u"abc"_S) == uR"(
  40.
   4
 1.2
01.2
1.234%
1.234000%
 1.234000%
 1.23%
-1.23%
 1%
  abc
abc
abc  .)");
    }
} code_block_1;


V freqs = [1, 2]
L(&f) freqs
   f *= 2
print(freqs)
===
auto freqs = create_array({1, 2});

struct CodeBlock1
{
    CodeBlock1()
    {
        for (auto &f : freqs)
            f *= 2;
        print(freqs);
    }
} code_block_1;


V t = (1, 2)
t[0] = 3
===
auto t = make_tuple(1, 2);

struct CodeBlock1
{
    CodeBlock1()
    {
        _set<0>(t, 3);
    }
} code_block_1;


T Tuple2[T Ty] = Tuple[Ty, Ty]
T Tuple23[T Ty1, T Ty2] = Tuple[Ty1, Ty1, Ty2]
T Tuple2Int = Tuple[Int, Int]
T StaticArray = Array
T StaticIntArray[Int n] = StaticArray[Int, n]
===
template <typename Ty> using Tuple2 = Tuple<Ty, Ty>;
template <typename Ty1, typename Ty2> using Tuple23 = Tuple<Ty1, Ty1, Ty2>;
using Tuple2Int = ivec2;
using StaticArray = Array;
template <int n> using StaticIntArray = StaticArray<int, n>;


T MyType
   Int public_variable
   . Int private_variable

T MyType2
   . Int private_variable
   Int public_variable
===
class MyType
{
public:
    int public_variable;
private:
    int private_variable;
};

class MyType2
{
private:
    int private_variable;
public:
    int public_variable;
};


// Test that shows why `and type(s.node) == ASTFunctionDefinition` is needed
T Converter
   String instr

   F to_html()
      V f = () -> @.instr
===
class Converter
{
public:
    String instr;

    auto to_html()
    {
        auto f = [this](){return instr;};
    }
};


F f(Int x, y, z)
   R x + y + z
F f2(x, Int y, z)
   R x + y + z
F f3(Int x, Float y)
   R x + y
F f4(Int x; y)
   R x + y
===
auto f(const int x, const int y, const int z)
{
    return x + y + z;
}
template <typename T1> auto f2(const T1 &x, const int y, const int z)
{
    return x + y + z;
}
auto f3(const int x, const double y)
{
    return x + y;
}
template <typename T2> auto f4(const int x, const T2 &y)
{
    return x + y;
}


print((2, 1) * 1.5)
print(1.5 * (2, 1))
print((2, 1) * (1.5, 2.0))
===
struct CodeBlock1
{
    CodeBlock1()
    {
        print(make_tuple(2, 1) * 1.5);
        print(1.5 * make_tuple(2, 1));
        print(make_tuple(2, 1) * make_tuple(1.5, 2.0));
    }
} code_block_1;


V tag = S ‘_’
           \(case) ‘*’
              ‘b’
           \(case) ‘_’
              ‘u’
===
auto tag = [&](const auto &a){return a == u'*' ? u'b'_C : a == u'_' ? u'u'_C : throw KeyError(a);}(u"_"_S);


L 2
   print(L.index)
===
struct CodeBlock1
{
    CodeBlock1()
    {
        for (int Lindex = 0; Lindex < 2; Lindex++)
            print(Lindex);
    }
} code_block_1;


V a = [[Int]]()
a [+]= [Int]()
print(a)
print([[Int]()])
===
auto a = Array<Array<int>>();

struct CodeBlock1
{
    CodeBlock1()
    {
        a.append(Array<int>());
        print(a);
        print(create_array({Array<int>()}));
    }
} code_block_1;


F getNormal((Float, Float, Float) punto) -> (Float, Float, Float)
   R punto
===
dvec3 getNormal(const dvec3 &punto)
{
    return punto;
}


print(‘1234’[1.+2])
===
struct CodeBlock1
{
    CodeBlock1()
    {
        print(u"1234"_S[range_ep(1, 2)]);
    }
} code_block_1;


T Maze
   Int _height
   F calcDistance(pt1)
      R 0

T MazeSolver
   Maze maze
   F sortPoints(points)
      V distances = points.map(point -> @.maze.calcDistance(point))
===
class Maze
{
public:
    int _height;
    template <typename T1> auto calcDistance(const T1 &pt1)
    {
        return 0;
    }
};

class MazeSolver
{
public:
    Maze maze;
    template <typename T1> auto sortPoints(const T1 &points)
    {
        auto distances = points.map([this](const auto &point){return maze.calcDistance(point);});
    }
};


V (private, a) = (1B, 0)
V new = 0B
print(new)
===
auto [_private_, a] = make_tuple(true, 0);
auto _new_ = false;

struct CodeBlock1
{
    CodeBlock1()
    {
        print(_new_);
    }
} code_block_1;


F print_set(map, key)
   V? it = map.find(key) // test const
   print(it ? Set([1]))
   I it == N | it.empty
      print(-1)
      R
   I it == Set([1])
      print(-2)
      R
   L(value) it
      print(value, end' ‘ ’)
   print()

V set_values = [1 = Set([2, 3]), 2 = Set[Int]()]
print_set(set_values, 1)
print_set(set_values, 2)
print_set(set_values, 3)
V? it = set_values.find(1) // test non-const
it.add(4)
print_set(set_values, 1)
===
template <typename T1, typename T2> auto print_set(const T1 &map, const T2 &key)
{
    auto it = map.find(key);
    print([&]{auto R = it; return R != nullptr ? *R : create_set({1});}());
    if (it == nullptr || it->empty()) {
        print(-1);
        return;
    }
    if (*it == create_set({1})) {
        print(-2);
        return;
    }
    for (auto &&value : *it)
        print(value, u" "_S);
    print();
}

auto set_values = create_dict(dict_of(1, create_set({2, 3}))(2, Set<int>()));

struct CodeBlock1
{
    CodeBlock1()
    {
        print_set(set_values, 1);
        print_set(set_values, 2);
        print_set(set_values, 3);
    }
} code_block_1;

auto it = set_values.find(1);

struct CodeBlock2
{
    CodeBlock2()
    {
        it->add(4);
        print_set(set_values, 1);
    }
} code_block_2;


print(1 == 2 == 3)
print(1 == 2 == 3 == 4)
print(1 == 2 == 3 == 4 == 5)
===
struct CodeBlock1
{
    CodeBlock1()
    {
        print(equal(1, 2, 3));
        print(equal(1, 2, 3, 4));
        print(equal(1, 2, 3, 4, 5));
    }
} code_block_1;


String s
print(s.last.code)
===
String s;

struct CodeBlock1
{
    CodeBlock1()
    {
        print(s.last().code);
    }
} code_block_1;


V some_variable = 2
                - 3
===
auto some_variable = 2 - 3;


-V one = 1
-V (x, y) = input().split(‘ ’).map(Int)
===
const auto one = 1;
const auto [x, y] = bind_array<2>(input().split(u" "_S).map([](const auto &x){return to_int(x);}));


V? i = ‘str’.find(‘s’)
Int j
j = i
===
auto i = u"str"_S.find(u"s"_S);
int j;

struct CodeBlock1
{
    CodeBlock1()
    {
        j = *i;
    }
} code_block_1;


F gnomesort(&a)
   R a
print(gnomesort(&[3, 4, 2, 5, 1, 6]))
print(gnomesort(a' &[3, 4, 2, 5, 1, 6]))
===
template <typename T1> auto gnomesort(T1 &a)
{
    return a;
}

struct CodeBlock1
{
    CodeBlock1()
    {
        print(gnomesort(make_ref(create_array({3, 4, 2, 5, 1, 6}))));
        print(gnomesort(make_ref(create_array({3, 4, 2, 5, 1, 6}))));
    }
} code_block_1;


F f([Int] &l = [Int]())
   l.append(1)
   print(l)

f()
f()
===
auto f(Array<int> &l = make_ref(Array<int>()))
{
    l.append(1);
    print(l);
}

struct CodeBlock1
{
    CodeBlock1()
    {
        f();
        f();
    }
} code_block_1;


F f([Int] &l = [0, 2])
   l.append(1)
   print(l)

f()
f()
===
auto f(Array<int> &l = make_ref(create_array({0, 2})))
{
    l.append(1);
    print(l);
}

struct CodeBlock1
{
    CodeBlock1()
    {
        f();
        f();
    }
} code_block_1;


F run_utm(halt, state, rules_in)
   V st = state

run_utm(
   halt' ‘halt’,
   state' ‘a’,
   rules_in'
      [‘a 0 1 right b’.split(‘ ’, group_delimiters' 1B),
       ‘a 1 1 left  c’.split(‘ ’, group_delimiters' 1B),
       ‘b 0 1 left  a’.split(‘ ’, group_delimiters' 1B)]
   )
===
template <typename T1, typename T2, typename T3> auto run_utm(const T1 &halt, const T2 &state, const T3 &rules_in)
{
    auto st = state;
}

struct CodeBlock1
{
    CodeBlock1()
    {
        run_utm(u"halt"_S, u"a"_S, create_array({u"a 0 1 right b"_S.split(u" "_S, nullptr, true), u"a 1 1 left  c"_S.split(u" "_S, nullptr, true), u"b 0 1 left  a"_S.split(u" "_S, nullptr, true)}));
    }
} code_block_1;


-V
   n_rows = 10
   n_cols = 10
   grid_size = n_rows * n_cols
   min_words = 25
===
const auto n_rows = 10;
const auto n_cols = 10;
const auto grid_size = n_rows * n_cols;
const auto min_words = 25;


V str = |‘First line.
          Second line.’

F f(s)
   V str = s|‘First line.

              Second line.
               Third line.’
   V s1 = |‘Don‘t!
            Don‘t!’’’''
   V s2 = |''‘‘‘Don’t!
                Don’t!’
===
auto str = uR"(First line.
Second line.)"_S;

template <typename T1> auto f(const T1 &s)
{
    auto str = s & uR"(First line.

Second line.
 Third line.)"_S;
    auto s1 = uR"(Don‘t!
Don‘t!)"_S;
    auto s2 = uR"(Don’t!
Don’t!)"_S;
}


V prod = 1
V s = 0

-V
   x = +5
   y = -5
   z = -2
   one = 1
   three = 3
   seven = 7
===
auto prod = 1;
auto s = 0;

const auto x = +5;
const auto y = -5;
const auto z = -2;
const auto one = 1;
const auto three = 3;
const auto seven = 7;


// [https://www.rosettacode.org/wiki/Loops/With_multiple_ranges#11l]
V prod = 1
V s = 0

-V
   x = +5
   y = -5
   z = -2
   one = 1
   three = 3
   seven = 7
===
auto prod = 1;
auto s = 0;

const auto x = +5;
const auto y = -5;
const auto z = -2;
const auto one = 1;
const auto three = 3;
const auto seven = 7;


// [https://www.rosettacode.org/wiki/MD5/Implementation#11l]
-V
   rotate_amounts = [7, 12, 17, 22, 7, 12, 17, 22, 7, 12, 17, 22, 7, 12, 17, 22,
                     5,  9, 14, 20, 5,  9, 14, 20, 5,  9, 14, 20, 5,  9, 14, 20,
                     4, 11, 16, 23, 4, 11, 16, 23, 4, 11, 16, 23, 4, 11, 16, 23,
                     6, 10, 15, 21, 6, 10, 15, 21, 6, 10, 15, 21, 6, 10, 15, 21]

   constants = (0.<64).map(i -> UInt32(UInt64(abs(sin(i + 1)) * 2.0 ^ 32) [&] FFFF'FFFF))

   init_values = (UInt32(6745'2301), UInt32(EFCD'AB89), UInt32(98BA'DCFE), UInt32(1032'5476))
===
const auto rotate_amounts = create_array({7, 12, 17, 22, 7, 12, 17, 22, 7, 12, 17, 22, 7, 12, 17, 22, 5, 9, 14, 20, 5, 9, 14, 20, 5, 9, 14, 20, 5, 9, 14, 20, 4, 11, 16, 23, 4, 11, 16, 23, 4, 11, 16, 23, 4, 11, 16, 23, 6, 10, 15, 21, 6, 10, 15, 21, 6, 10, 15, 21, 6, 10, 15, 21});

const auto constants = range_el(0, 64).map([](const auto &i){return to_uint32(to_uint64(abs(sin(i + 1)) * pow(2.0, 32)) & 0xFFFF'FFFF);});

const auto init_values = make_tuple(to_uint32(0x6745'2301), to_uint32(0xEFCD'AB89), to_uint32(0x98BA'DCFE), to_uint32(0x1032'5476));


[[Int = String]] save
===
Array<Dict<int, String>> save;


I t C M
   L(nv) M
      I 1B
         print(1)
         print(2)
E
   print(‘NO’)
   exit()

I t C M
   L(nv) M
      I 1B
         print(1)
         print(2)
===
struct CodeBlock1
{
    CodeBlock1()
    {
        if (in(t, M)) {
            for (auto &&nv : M)
                if (true) {
                    print(1);
                    print(2);
                }
        }
        else {
            print(u"NO"_S);
            exit();
        }

        if (in(t, M))
            for (auto &&nv : M)
                if (true) {
                    print(1);
                    print(2);
                }
    }
} code_block_1;


test_module:()
test_module:(‘abc’)
===
namespace test_module {
#include "test_module.hpp"
}

struct CodeBlock1
{
    CodeBlock1()
    {
        test_module::_();
        test_module::_(u"abc"_S);
    }
} code_block_1;


V a = [1,]
V d = [1 = ‘s’,]
===
auto a = create_array({1});
auto d = create_dict(dict_of(1, u's'_C));


[Tuple[Int, Int] = String] t
===
Dict<ivec2, String> t;


T Starship
   [String = Int] :stats
   Int :i1
   Int :i2 = 1
   :i3 = 2

   F :set_i3(i3)
      .:i3 = i3

   F f()
      .:i1 = 3
      .:set_i3(4)

   F :set_i1(a, b)
      .:i1 = a + b
      .:set_i3(5)

print(Starship.:stats)
Starship.set_i1(1, 2)
Starship.set_i1(a' 1, b' 2)
print(Starship.:i1)
print(Starship.:i2)
print(Starship.:i3)
Starship().f()
print(Starship.:i3)
===
class Starship
{
public:
    static inline Dict<String, int> s_stats;
    static inline int s_i1;
    static inline int s_i2 = 1;
    static inline auto s_i3 = 2;

    template <typename T1> static auto s_set_i3(const T1 &i3)
    {
        s_i3 = i3;
    }

    auto f()
    {
        s_i1 = 3;
        s_set_i3(4);
    }

    template <typename T1, typename T2> static auto s_set_i1(const T1 &a, const T2 &b)
    {
        s_i1 = a + b;
        s_set_i3(5);
    }
};

struct CodeBlock1
{
    CodeBlock1()
    {
        print(Starship::s_stats);
        Starship::s_set_i1(1, 2);
        Starship::s_set_i1(1, 2);
        print(Starship::s_i1);
        print(Starship::s_i2);
        print(Starship::s_i3);
        Starship().f();
        print(Starship::s_i3);
    }
} code_block_1;


T Ty
   T SubTy
      F :f(a)
         R a
      T SubSubTy
         F :g(b)
            R b
   SubTy st

Ty.SubTy.f(a' 1)
Ty.SubTy.SubSubTy.g(b' 2)
===
class Ty
{
public:
    class SubTy
    {
    public:
        template <typename T1> static auto s_f(const T1 &a)
        {
            return a;
        }
        class SubSubTy
        {
        public:
            template <typename T1> static auto s_g(const T1 &b)
            {
                return b;
            }
        };
    };
    SubTy st;
};

struct CodeBlock1
{
    CodeBlock1()
    {
        Ty::SubTy::s_f(1);
        Ty::SubTy::SubSubTy::s_g(2);
    }
} code_block_1;


F fake_random()
   -V seq = [3, 1, 2, 4, 7, 5, 6]
   //:V n = 0 //static variable
   V :n = 0 //static variable
   :n = (:n + 1) % seq.len
   R seq[:n]

L 3
   print(fake_random())
===
auto fake_random()
{
    const auto seq = create_array({3, 1, 2, 4, 7, 5, 6});
    static auto s_n = 0;
    s_n = mod((s_n + 1), seq.len());
    return seq[s_n];
}

struct CodeBlock1
{
    CodeBlock1()
    {
        for (int Lindex = 0; Lindex < 3; Lindex++)
            print(fake_random());
    }
} code_block_1;


F p(a)
   print(a[%-2])

X.try
   V a = [1, 2, 3]
   p(a)
   a[%-1] = 4
   print(a[%-1])
   print(a[%-3])
   print(a[%-4])
X.catch IndexError err
   print(‘Wrong index: ’err)
===
template <typename T1> auto p(const T1 &a)
{
    print(a.at_ni(-2));
}

struct CodeBlock1
{
    CodeBlock1()
    {
        try
        {
            auto a = create_array({1, 2, 3});
            p(a);
            a.at_ni(-1) = 4;
            print(a.at_ni(-1));
            print(a.at_ni(-3));
            print(a.at_ni(-4));
        }
        catch (const IndexError& err)
        {
            print(u"Wrong index: "_S & err);
        }
    }
} code_block_1;


T Type
   . -:private_const_static_var = 10
   -const_var = 11
   -Int c
   -Int cc = 2

   F ()
      .const_var = -11
      .c = 1
      .cc = 3
===
class Type
{
private:
    static const auto s_private_const_static_var = 10;
public:
    const decltype(11) const_var = 11;
    const int c;
    const int cc = 2;

    Type() :
        const_var(-11),
        c(1),
        cc(3)
    {
    }
};


F f()
   V :n = 0 //static local variable
   F g()
      @:n++
===
auto f()
{
    static auto s_n = 0;
    auto g = []()
    {
        s_n++;
    };
}


F p(=s, keep_newline)
   I !keep_newline
      s .= rtrim("\n", 1)
   print(s.len)

p("...\n\n", 0B)
===
template <typename T1, typename T2> auto p(T1 s, const T2 &keep_newline)
{
    if (!keep_newline)
        s = s.rtrim(u"\n"_S, 1);
    print(s.len());
}

struct CodeBlock1
{
    CodeBlock1()
    {
        p(u"...\n\n"_S, false);
    }
} code_block_1;


T Type
   T SubType
      member = 0

V t = Type.SubType()
===
class Type
{
public:
    class SubType
    {
    public:
        decltype(0) member = 0;
    };
};

auto t = Type::SubType();


// [https://codeforces.com/usertalk/with/2020TAndr]:‘def __best(n, m, arr: List[Tuple[Callable[[Int64, Int64, Int64], Int64], Int64]]) -> Tuple[Callable[[Int64, Int64, Int64], Int64], Int64]:’
F f([((Int, Int) -> Int)] &arr) {}
===
auto f(Array<std::function<int(const int, const int)>> &arr)
{
}