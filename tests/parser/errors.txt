F f() R 1
      ^Error: expected a new scope (indented block or opening curly bracket)


r = ‘a’‘b’
       ^Error: expected end of statement


r = "a""b"
       ^Error: expected end of statement


r = ‘a’ ‘b’
        ^Error: expected end of statement


f(‘id=’ id) // (
        ^Error: expected )


r = .newlines()‘’(‘ ’ * (indent * 3))‘F ’(I .function_name != ‘__init__’ {.function_name} E ‘’)‘’,
                                                                                                 ^Error: unknown unary operator
  ‘(’(I .function_arguments.empty | .function_arguments[0] != ‘self’ {.function_arguments} E .function_arguments[1..]).join(‘, ’)")\n"


r = .newlines()‘’(‘ ’ * (indent * 3))‘F ’(I .function_name != ‘__init__’ {.function_name} E ‘’)
  ‘(’(I .function_arguments.empty | .function_arguments[0] != ‘self’ {.function_arguments} E .function_arguments[1..]).join(‘, ’)")\n"
^Error: expected end of statement


r = .newlines()‘’(‘ ’ * (indent * 3))‘F ’(I .function_name != ‘__init__’ {.function_name} E ‘’)‘(’
  (I .function_arguments.empty | .function_arguments[0] != ‘self’ {.function_arguments} E .function_arguments[1..]).join(‘, ’)")\n"
^Error: expected end of statement


// This is wrong because there is probability of forgotten comma after `‘(some big ...’`, if you want line joining please specify it explicitly (via appending `""`) // )
r = .newlines()‘’(‘ ’ * (indent * 3))‘F ’(I .function_name != ‘__init__’ {.function_name} E ‘’)‘(some big ...’
  ‘... string’(I .function_arguments.empty | .function_arguments[0] != ‘self’ {.function_arguments} E .function_arguments[1..]).join(‘, ’)")\n"
^Error: expected end of statement


L i < s.len & s[i] E ‘0’..‘9’
                   ^Error: no symbol corresponding to token `E` (belonging to Category.KEYWORD) found while parsing expression


.
 ^Error: unexpected end of source


---
A source = ‘code’
A s = source.rtrim()
      ^Error: please wrap `source` in `copy()`
line_start = source.rfind("\n", source.len - 1)


T Ty
{
}
T Ty
  ^Error: redefinition of already defined identifier is not allowed
{
}


f(1)
^Error: call of undefined function `f`


F f(a)
{
}
F f(a, b)
{
}
f(1)
^Error: functions' overloading is not supported for now


F f(a = 1, bb = 2)
   R a + bb
print(f(b' 3))
        ^Error: argument `b` is not found in function `f`


T Ty
{
   F () {}
   F (a) {}
}
A t = Ty()
      ^Error: constructors' overloading is not supported for now (see type `Ty`)


F f(a = 10, b)
            ^Error: non-default argument follows default argument
   R a + b


F f(a = 10, ', b)
   R a + b
f(1)
   ^Error: missing required argument `b`


F f(a = 10, ', b, c)
   R a + b + c
f(c' 20)
  ^Error: argument `b` of function `f` has no default value, please specify its value here


:start:
(String, Int -> String) f
F ff(s, i)
   R s * i
f = ff
assert(f(‘s’) == ‘ss’)
        ^Error: wrong number of arguments passed to function pointer


X.try
{
}
X.catch
        ^Error: expected exception object type name
    exit(-1)


---
X.try
{
}
X.catch Exception
                  ^Error: expected exception object name
    exit(-1)


non_existing_module:func()
^Error: can not import module `non_existing_module`: file 'tests/parser/non_existing_module.11l' is not found


L(i) 10
   L(j) 20
      L(k).break
      ^Error: loop corresponding to this `L(k).break` statement is not found


L 10
   L 20
      ^^L.break
      ^Error: loop corresponding to this `^^L.break` statement is not found


L 10
   ^^1
     ^Error: expected `L.break`


L 10
^Error: this kind of loop does not support `L.next`
   I L.next
      print(1)


Array[Animal] animals
     ^Error: type `Animal` is not defined


Int Animal
Array[Animal] animals
     ^Error: `Animal`: expected a type name


T Animal
   F.virtual.abstract say(arg) -> N
   ^Error: type should be specified for argument `arg` [for virtual functions all arguments should have types]


F.destructor
^Error: destructor declaration allowed only inside types
   print(‘destructor called’)
