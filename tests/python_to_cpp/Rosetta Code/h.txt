# https://www.rosettacode.org/wiki/Huffman_coding#Python
import heapq
import collections
from typing import NamedTuple, List, Tuple
Char = str

class Element(NamedTuple):
    weight : int
    symbols : List[Tuple[Char, str]]

    def __lt__(self, other):
        return (self.weight, self.symbols) < (other.weight, other.symbols)

def encode(symb2freq):
    """Huffman encode the given dict mapping symbols to weights"""
    #heap = [[wt, [sym, ""]] for sym, wt in symb2freq.items()]
    heap = [Element(wt, [(sym, '')]) for sym, wt in symb2freq.items()]
    heapq.heapify(heap)
    while len(heap) > 1:
        lo = heapq.heappop(heap)
        hi = heapq.heappop(heap)
        #for pair in lo[1:]:
        #for sym in lo.symbols:
        #    sym[1] = '0' + sym[1]
        #    sym = (sym[0], '0' + sym[1])
        for i in range(len(lo.symbols)):
            lo.symbols[i] = (lo.symbols[i][0], '0' + lo.symbols[i][1])
        #for pair in hi[1:]:
        for i in range(len(hi.symbols)):
            hi.symbols[i] = (hi.symbols[i][0], '1' + hi.symbols[i][1])
        #heapq.heappush(heap, [lo[0] + hi[0]] + lo[1:] + hi[1:])
        heapq.heappush(heap, Element(lo.weight + hi.weight, lo.symbols + hi.symbols))
    #return sorted(heapq.heappop(heap)[1:], key=lambda p: (len(p[-1]), p))
    return sorted(heapq.heappop(heap).symbols, key=lambda p: (len(p[1]), p))

txt = "this is an example for huffman encoding"
symb2freq = collections.defaultdict(int) # Char
for ch in txt:
    symb2freq[ch] += 1
# in Python 3.1+:
# symb2freq = collections.Counter(txt)
huff = encode(symb2freq)
print("Symbol\tWeight\tHuffman Code")
for p in huff:
    print("%s\t%s\t%s" % (p[0], symb2freq[p[0]], p[1]))
===
T Element
   Int weight
   [(Char, String)] symbols

   F <(other)
      R (.weight, .symbols) < (other.weight, other.symbols)
   F (weight, symbols)
      .weight = weight
      .symbols = symbols

F encode(symb2freq)
   ‘Huffman encode the given dict mapping symbols to weights’

   V heap = symb2freq.map((sym, wt) -> Element(wt, [(sym, ‘’)]))
   minheap:heapify(&heap)
   L heap.len > 1
      V lo = minheap:pop(&heap)
      V hi = minheap:pop(&heap)

      L(i) 0 .< lo.symbols.len
         lo.symbols[i] = (lo.symbols[i][0], ‘0’lo.symbols[i][1])

      L(i) 0 .< hi.symbols.len
         hi.symbols[i] = (hi.symbols[i][0], ‘1’hi.symbols[i][1])

      minheap:push(&heap, Element(lo.weight + hi.weight, lo.symbols + hi.symbols))

   R sorted(minheap:pop(&heap).symbols, key' p -> (p[1].len, p))

V txt = ‘this is an example for huffman encoding’
V symb2freq = DefaultDict[Char, Int]()
L(ch) txt
   symb2freq[ch]++

V huff = encode(symb2freq)
print("Symbol\tWeight\tHuffman Code")
L(p) huff
   print("#.\t#.\t#.".format(p[0], symb2freq[p[0]], p[1]))
===
class Element
{
public:
    int weight;
    Array<Tuple<Char, String>> symbols;

    template <typename T1> auto operator<(const T1 &other) const
    {
        return make_tuple(weight, symbols) < make_tuple(other.weight, other.symbols);
    }
    template <typename T1, typename T2> Element(const T1 &weight, const T2 &symbols) :
        weight(weight),
        symbols(symbols)
    {
    }
};

template <typename T1> auto encode(const T1 &symb2freq)
{
    u"Huffman encode the given dict mapping symbols to weights"_S;

    auto heap = symb2freq.map([](const auto &sym, const auto &wt){return Element(wt, create_array({make_tuple(sym, u""_S)}));});
    minheap::heapify(heap);
    while (heap.len() > 1) {
        auto lo = minheap::pop(heap);
        auto hi = minheap::pop(heap);
        for (auto i : range_el(0, lo.symbols.len()))
            lo.symbols.set(i, make_tuple(_get<0>(lo.symbols[i]), u"0"_S & _get<1>(lo.symbols[i])));
        for (auto i : range_el(0, hi.symbols.len()))
            hi.symbols.set(i, make_tuple(_get<0>(hi.symbols[i]), u"1"_S & _get<1>(hi.symbols[i])));

        minheap::push(heap, Element(lo.weight + hi.weight, lo.symbols + hi.symbols));
    }

    return sorted(minheap::pop(heap).symbols, [](const auto &p){return make_tuple(_get<1>(p).len(), p);});
}

auto txt = u"this is an example for huffman encoding"_S;
auto symb2freq = DefaultDict<Char, int>();

struct CodeBlock1
{
    CodeBlock1()
    {
        for (auto &&ch : txt)
            symb2freq[ch]++;
    }
} code_block_1;

auto huff = encode(symb2freq);

struct CodeBlock2
{
    CodeBlock2()
    {
        print(u"Symbol\tWeight\tHuffman Code"_S);
        for (auto &&p : huff)
            print(u"#.\t#.\t#."_S.format(_get<0>(p), symb2freq[_get<0>(p)], _get<1>(p)));
    }
} code_block_2;