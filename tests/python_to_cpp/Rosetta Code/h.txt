# https://www.rosettacode.org/wiki/Huffman_coding#Python
import heapq
import collections
from typing import NamedTuple, List, Tuple
Char = str

class Element(NamedTuple):
    weight : int
    symbols : List[Tuple[Char, str]]

    def __lt__(self, other):
        return (self.weight, self.symbols) < (other.weight, other.symbols)

def encode(symb2freq):
    """Huffman encode the given dict mapping symbols to weights"""
    #heap = [[wt, [sym, ""]] for sym, wt in symb2freq.items()]
    heap = [Element(wt, [(sym, '')]) for sym, wt in symb2freq.items()]
    heapq.heapify(heap)
    while len(heap) > 1:
        lo = heapq.heappop(heap)
        hi = heapq.heappop(heap)
        #for pair in lo[1:]:
        #for sym in lo.symbols:
        #    sym[1] = '0' + sym[1]
        #    sym = (sym[0], '0' + sym[1])
        for i in range(len(lo.symbols)):
            lo.symbols[i] = (lo.symbols[i][0], '0' + lo.symbols[i][1])
        #for pair in hi[1:]:
        for i in range(len(hi.symbols)):
            hi.symbols[i] = (hi.symbols[i][0], '1' + hi.symbols[i][1])
        #heapq.heappush(heap, [lo[0] + hi[0]] + lo[1:] + hi[1:])
        heapq.heappush(heap, Element(lo.weight + hi.weight, lo.symbols + hi.symbols))
    #return sorted(heapq.heappop(heap)[1:], key=lambda p: (len(p[-1]), p))
    return sorted(heapq.heappop(heap).symbols, key=lambda p: (len(p[1]), p))

txt = "this is an example for huffman encoding"
symb2freq = collections.defaultdict(int) # Char
for ch in txt:
    symb2freq[ch] += 1
# in Python 3.1+:
# symb2freq = collections.Counter(txt)
huff = encode(symb2freq)
print("Symbol\tWeight\tHuffman Code")
for p in huff:
    print("%s\t%s\t%s" % (p[0], symb2freq[p[0]], p[1]))
===
T Element
   Int weight
   [(Char, String)] symbols

   F <(other)
      R (.weight, .symbols) < (other.weight, other.symbols)
   F (weight, symbols)
      .weight = weight
      .symbols = symbols

F encode(symb2freq)
   ‘Huffman encode the given dict mapping symbols to weights’
   V heap = symb2freq.map((sym, wt) -> Element(wt, [(sym, ‘’)]))
   minheap:heapify(&heap)
   L heap.len > 1
      V lo = minheap:pop(&heap)
      V hi = minheap:pop(&heap)
      L(i) 0 .< lo.symbols.len
         lo.symbols[i] = (lo.symbols[i][0], ‘0’lo.symbols[i][1])
      L(i) 0 .< hi.symbols.len
         hi.symbols[i] = (hi.symbols[i][0], ‘1’hi.symbols[i][1])
      minheap:push(&heap, Element(lo.weight + hi.weight, lo.symbols + hi.symbols))
   R sorted(minheap:pop(&heap).symbols, key' p -> (p[1].len, p))

V txt = ‘this is an example for huffman encoding’
V symb2freq = DefaultDict[Char, Int]()
L(ch) txt
   symb2freq[ch]++
V huff = encode(symb2freq)
print("Symbol\tWeight\tHuffman Code")
L(p) huff
   print("#.\t#.\t#.".format(p[0], symb2freq[p[0]], p[1]))
===
class Element
{
public:
    int weight;
    Array<Tuple<Char, String>> symbols;

    template <typename T1> auto operator<(const T1 &other) const
    {
        return make_tuple(weight, symbols) < make_tuple(other.weight, other.symbols);
    }
    template <typename T1, typename T2> Element(const T1 &weight, const T2 &symbols) :
        weight(weight),
        symbols(symbols)
    {
    }
};

template <typename T1> auto encode(const T1 &symb2freq)
{
    u"Huffman encode the given dict mapping symbols to weights"_S;
    auto heap = symb2freq.map([](const auto &sym, const auto &wt){return Element(wt, create_array({make_tuple(sym, u""_S)}));});
    minheap::heapify(heap);
    while (heap.len() > 1) {
        auto lo = minheap::pop(heap);
        auto hi = minheap::pop(heap);
        for (auto i : range_el(0, lo.symbols.len()))
            lo.symbols.set(i, make_tuple(_get<0>(lo.symbols[i]), u"0"_S & _get<1>(lo.symbols[i])));
        for (auto i : range_el(0, hi.symbols.len()))
            hi.symbols.set(i, make_tuple(_get<0>(hi.symbols[i]), u"1"_S & _get<1>(hi.symbols[i])));
        minheap::push(heap, Element(lo.weight + hi.weight, lo.symbols + hi.symbols));
    }
    return sorted(minheap::pop(heap).symbols, [](const auto &p){return make_tuple(_get<1>(p).len(), p);});
}

auto txt = u"this is an example for huffman encoding"_S;
auto symb2freq = DefaultDict<Char, int>();

struct CodeBlock1
{
    CodeBlock1()
    {
        for (auto &&ch : txt)
            symb2freq[ch]++;
    }
} code_block_1;

auto huff = encode(symb2freq);

struct CodeBlock2
{
    CodeBlock2()
    {
        print(u"Symbol\tWeight\tHuffman Code"_S);
        for (auto &&p : huff)
            print(u"#.\t#.\t#."_S.format(_get<0>(p), symb2freq[_get<0>(p)], _get<1>(p)));
    }
} code_block_2;


# https://www.rosettacode.org/wiki/Hilbert_curve#D
class Point:
    x = 0
    y = 0

    def rot(self, n, rx, ry):
        if not ry:
            if rx:
                self.x = (n - 1) - self.x
                self.y = (n - 1) - self.y

            (self.x, self.y) = (self.y, self.x)

    def calcD(self, n):
        d = 0
        s = n >> 1
        while s > 0:
            rx = ((self.x & s) != 0)
            ry = ((self.y & s) != 0)
            d += s * s * ((3 if rx else 0) ^ (1 if ry else 0))
            self.rot(s, rx, ry)
            s >>= 1
        return d

def fromD(n, d):
    p = Point()
    t = d
    s = 1
    while s < n:
        rx = ((t & 2) != 0)
        ry = (((t ^ (1 if rx else 0)) & 1) != 0)
        p.rot(s, rx, ry)
        p.x += (s if rx else 0)
        p.y += (s if ry else 0)
        t >>= 2
        s <<= 1
    return p

def getPointsForCurve(n):
    points : List[Point] = []
    for d in range(n * n):
        points += [fromD(n, d)]
    return points

def drawCurve(points, n):
    canvas = [[' '] * (n * 3 - 2) for i in range(n)]

    for i in range(1, len(points)):
        lastPoint = points[i - 1]
        curPoint = points[i]
        deltaX = curPoint.x - lastPoint.x
        deltaY = curPoint.y - lastPoint.y
        if deltaX == 0:
            assert deltaY != 0, "Duplicate point"
            row = max(curPoint.y, lastPoint.y)
            col = curPoint.x * 3
            canvas[row][col] = '|'
        else:
            assert deltaY == 0, "Diagonal line"
            row = curPoint.y
            col = min(curPoint.x, lastPoint.x) * 3 + 1
            canvas[row][col] = '_'
            canvas[row][col + 1] = '_'

    lines : List[str] = []
    for row in canvas:
        lines += [''.join(row)]
    return lines

for order in range(1, 6):
    n = 1 << order
    points = getPointsForCurve(n)
    print("Hilbert curve, order="+str(order))
    lines = drawCurve(points, n)
    for line in lines:
        print(line)
    print()
===
T Point
   x = 0
   y = 0

   F rot(n, rx, ry)
      I !ry
         I rx
            .x = (n - 1) - .x
            .y = (n - 1) - .y

         swap(&.x, &.y)

   F calcD(n)
      V d = 0
      V s = n >> 1
      L s > 0
         V rx = ((.x [&] s) != 0)
         V ry = ((.y [&] s) != 0)
         d += s * s * ((I rx {3} E 0) (+) (I ry {1} E 0))
         .rot(s, rx, ry)
         s >>= 1
      R d

F fromD(n, d)
   V p = Point()
   V t = d
   V s = 1
   L s < n
      V rx = ((t [&] 2) != 0)
      V ry = (((t (+) (I rx {1} E 0)) [&] 1) != 0)
      p.rot(s, rx, ry)
      p.x += (I rx {s} E 0)
      p.y += (I ry {s} E 0)
      t >>= 2
      s <<= 1
   R p

F getPointsForCurve(n)
   [Point] points
   L(d) 0 .< n * n
      points [+]= fromD(n, d)
   R points

F drawCurve(points, n)
   V canvas = [[‘ ’] * (n * 3 - 2)] * n

   L(i) 1 .< points.len
      V lastPoint = points[i - 1]
      V curPoint = points[i]
      V deltaX = curPoint.x - lastPoint.x
      V deltaY = curPoint.y - lastPoint.y
      I deltaX == 0
         assert(deltaY != 0, ‘Duplicate point’)
         V row = max(curPoint.y, lastPoint.y)
         V col = curPoint.x * 3
         canvas[row][col] = ‘|’
      E
         assert(deltaY == 0, ‘Diagonal line’)
         V row = curPoint.y
         V col = min(curPoint.x, lastPoint.x) * 3 + 1
         canvas[row][col] = ‘_’
         canvas[row][col + 1] = ‘_’

   [String] lines
   L(row) canvas
      lines [+]= row.join(‘’)
   R lines

L(order) 1..5
   V n = 1 << order
   V points = getPointsForCurve(n)
   print(‘Hilbert curve, order=’String(order))
   V lines = drawCurve(points, n)
   L(line) lines
      print(line)
   print()
===
class Point
{
public:
    decltype(0) x = 0;
    decltype(0) y = 0;

    template <typename T1, typename T2, typename T3> auto rot(const T1 &n, const T2 &rx, const T3 &ry)
    {
        if (!ry) {
            if (rx) {
                x = (n - 1) - x;
                y = (n - 1) - y;
            }

            swap(x, y);
        }
    }

    template <typename T1> auto calcD(const T1 &n)
    {
        auto d = 0;
        auto s = n >> 1;
        while (s > 0) {
            auto rx = ((x & s) != 0);
            auto ry = ((y & s) != 0);
            d += s * s * ((rx ? 3 : 0) ^ (ry ? 1 : 0));
            rot(s, rx, ry);
            s >>= 1;
        }
        return d;
    }
};

template <typename T1, typename T2> auto fromD(const T1 &n, const T2 &d)
{
    auto p = Point();
    auto t = d;
    auto s = 1;
    while (s < n) {
        auto rx = ((t & 2) != 0);
        auto ry = (((t ^ (rx ? 1 : 0)) & 1) != 0);
        p.rot(s, rx, ry);
        p.x += (rx ? s : 0);
        p.y += (ry ? s : 0);
        t >>= 2;
        s <<= 1;
    }
    return p;
}

template <typename T1> auto getPointsForCurve(const T1 &n)
{
    Array<Point> points;
    for (auto d : range_el(0, n * n))
        points.append(fromD(n, d));
    return points;
}

template <typename T1, typename T2> auto drawCurve(const T1 &points, const T2 &n)
{
    auto canvas = create_array({create_array({u' '_C}) * (n * 3 - 2)}) * n;

    for (auto i : range_el(1, points.len())) {
        auto lastPoint = points[i - 1];
        auto curPoint = points[i];
        auto deltaX = curPoint.x - lastPoint.x;
        auto deltaY = curPoint.y - lastPoint.y;
        if (deltaX == 0) {
            assert(deltaY != 0, u"Duplicate point"_S);
            auto row = max(curPoint.y, lastPoint.y);
            auto col = curPoint.x * 3;
            canvas[row].set(col, u'|'_C);
        }
        else {
            assert(deltaY == 0, u"Diagonal line"_S);
            auto row = curPoint.y;
            auto col = min(curPoint.x, lastPoint.x) * 3 + 1;
            canvas[row].set(col, u'_'_C);
            canvas[row].set(col + 1, u'_'_C);
        }
    }

    Array<String> lines;
    for (auto &&row : canvas)
        lines.append(row.join(u""_S));
    return lines;
}

struct CodeBlock1
{
    CodeBlock1()
    {
        for (auto order : range_ee(1, 5)) {
            auto n = 1 << order;
            auto points = getPointsForCurve(n);
            print(u"Hilbert curve, order="_S & String(order));
            auto lines = drawCurve(points, n);
            for (auto &&line : lines)
                print(line);
            print();
        }
    }
} code_block_1;


# https://www.rosettacode.org/wiki/Hourglass_puzzle#Python
t4 = 0
while t4 < 10_000:
    t7_left = 7 - t4 % 7
    if t7_left == 9 - 4:
        print(
"""Turn over both hour glasses at the same time and continue flipping them each
when they individually run down until the 4 hour glass is flipped {} times,
wherupon the 7 hour glass is immediately placed on its side with {} hours
of sand in it.
You can measure 9 hours by flipping the 4 hour glass once, then
flipping the remaining sand in the 7 hour glass when the 4 hour glass ends.
""".format(t4//4, t7_left))
        break
    t4 += 4
else:
    print('Not found')
===
V t4 = 0
L t4 < 10'000
   V t7_left = 7 - t4 % 7
   I t7_left == 9 - 4
      print(‘Turn over both hour glasses at the same time and continue flipping them each
when they individually run down until the 4 hour glass is flipped #. times,
wherupon the 7 hour glass is immediately placed on its side with #. hours
of sand in it.
You can measure 9 hours by flipping the 4 hour glass once, then
flipping the remaining sand in the 7 hour glass when the 4 hour glass ends.
’.format(t4 I/ 4, t7_left))
      L.break
   t4 += 4
L.was_no_break
   print(‘Not found’)
===
auto t4 = 0;

struct CodeBlock1
{
    CodeBlock1()
    {
        while (t4 < 10'000) {
            auto t7_left = 7 - mod(t4, 7);
            if (t7_left == 9 - 4) {
                print(uR"(Turn over both hour glasses at the same time and continue flipping them each
when they individually run down until the 4 hour glass is flipped #. times,
wherupon the 7 hour glass is immediately placed on its side with #. hours
of sand in it.
You can measure 9 hours by flipping the 4 hour glass once, then
flipping the remaining sand in the 7 hour glass when the 4 hour glass ends.
)"_S.format(idiv(t4, 4), t7_left));
                goto break_;
            }
            t4 += 4;
        }
        print(u"Not found"_S);
        break_:;
    }
} code_block_1;


# https://www.rosettacode.org/wiki/Hex_words#Python
def digroot(n):
    while n > 9:
        n = sum([int(d) for d in str(n)])
    return n

lines = open('unixdict.txt').read().split("\n")
words = [w for w in lines if len(w) >= 4 and all(c in 'abcdef' for c in w)]
results = [(w, int(w, 16), digroot(int(w, 16))) for w in words]

print("Hex words in unixdict.txt:\nRoot  Word      Base 10\n", "-"*22)
for a in sorted(results, key=lambda x:x[2]):
    print(f"{a[2]}     {a[0]:<6}{a[1]:10}")

print("Total count of these words:", len(results))
print("\nHex words with > 3 distinct letters:\nRoot  Word      Base 10\n", "-"*22)
results = [a for a in results if len(set(list(str(a[0])))) > 3]
for a in sorted(results, key=lambda x:x[2]):
    print(f"{a[2]}     {a[0]:<6}{a[1]:10}")

print("Total count of those words:", len(results))
===
F digroot(=n)
   L n > 9
      n = sum(String(n).map(d -> Int(d)))
   R n

V lines = File(‘unixdict.txt’).read().split("\n")
V words = lines.filter(w -> w.len >= 4 & all(w.map(c -> c C ‘abcdef’)))
V results = words.map(w -> (w, Int(w, radix' 16), digroot(Int(w, radix' 16))))

print("Hex words in unixdict.txt:\nRoot  Word      Base 10\n "(‘-’ * 22))
L(a) sorted(results, key' x -> x[2])
   print(f:‘{a[2]}     {a[0]:<6}{a[1]:10}’)

print(‘Total count of these words: ’results.len)
print("\nHex words with > 3 distinct letters:\nRoot  Word      Base 10\n "(‘-’ * 22))
results = results.filter(a -> Set(Array(String(a[0]))).len > 3)
L(a) sorted(results, key' x -> x[2])
   print(f:‘{a[2]}     {a[0]:<6}{a[1]:10}’)

print(‘Total count of those words: ’results.len)
===
template <typename T1> auto digroot(T1 n)
{
    while (n > 9)
        n = sum_map(String(n), [](const auto &d){return to_int(d);});
    return n;
}

auto lines = File(u"unixdict.txt"_S).read().split(u"\n"_S);
auto words = lines.filter([](const auto &w){return w.len() >= 4 && all_map(w, [](const auto &c){return in(c, u"abcdef"_S);});});
auto results = words.map([](const auto &w){return make_tuple(w, to_int(w, 16), digroot(to_int(w, 16)));});

struct CodeBlock1
{
    CodeBlock1()
    {
        print(u"Hex words in unixdict.txt:\nRoot  Word      Base 10\n "_S & (u"-"_S * 22));
        for (auto &&a : sorted(results, [](const auto &x){return _get<2>(x);}))
            print(u"#.     #<6#10"_S.format(_get<2>(a), _get<0>(a), _get<1>(a)));

        print(u"Total count of these words: "_S & results.len());
        print(u"\nHex words with > 3 distinct letters:\nRoot  Word      Base 10\n "_S & (u"-"_S * 22));
        results = results.filter([](const auto &a){return create_set(create_array(String(_get<0>(a)))).len() > 3;});
        for (auto &&a : sorted(results, [](const auto &x){return _get<2>(x);}))
            print(u"#.     #<6#10"_S.format(_get<2>(a), _get<0>(a), _get<1>(a)));

        print(u"Total count of those words: "_S & results.len());
    }
} code_block_1;