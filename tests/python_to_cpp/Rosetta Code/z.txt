# https://www.rosettacode.org/wiki/Zeckendorf_number_representation#Python
n = 20
def z(n):
    if n == 0 : return [0]
    fib = [2,1]
    while fib[0] < n: fib = [sum(fib[:2])] + fib
    dig : List[int] = []
    for f in fib:
        if f <= n:
            dig += [1]
            n -= f
        else:
            dig += [0]
    return dig if dig[0] else dig[1:]

for i in range(n + 1):
    print('%3i: %8s' % (i, ''.join(str(d) for d in z(i))))
===
V n = 20
F z(=n)
   I n == 0
      R [0]
   V fib = [2, 1]
   L fib[0] < n
      fib = [sum(fib[0.<2])] [+] fib
   [Int] dig
   L(f) fib
      I f <= n
         dig [+]= 1
         n -= f
      E
         dig [+]= 0
   R I dig[0] {dig} E dig[1..]

L(i) 0 .. n
   print(‘#3: #8’.format(i, z(i).map(d -> String(d)).join(‘’)))
===
auto n = 20;
template <typename T1> auto z(T1 n)
{
    if (n == 0)
        return create_array({0});
    auto fib = create_array({2, 1});
    while (_get<0>(fib) < n)
        fib = create_array({sum(fib[range_el(0, 2)])}) + fib;
    Array<int> dig;
    for (auto &&f : fib)
        if (f <= n) {
            dig.append(1);
            n -= f;
        }
        else
            dig.append(0);
    return _get<0>(dig) ? dig : dig[range_ei(1)];
}

struct CodeBlock1
{
    CodeBlock1()
    {
        for (auto i : range_ee(0, n))
            print(u"#3: #8"_S.format(i, z(i).map([](const auto &d){return String(d);}).join(u""_S)));
    }
} code_block_1;


# https://www.rosettacode.org/wiki/Zhang-Suen_thinning_algorithm#Python
# Example from [http://nayefreza.wordpress.com/2013/05/11/zhang-suen-thinning-algorithm-java-implementation/ this blog post].
beforeTxt = \
R'''1100111
1100111
1100111
1100111
1100110
1100110
1100110
1100110
1100110
1100110
1100110
1100110
1111110
0000000'''

# Thanks to [http://www.network-science.de/ascii/ this site] and vim for these next two examples
smallrc01 = \
R'''00000000000000000000000000000000
01111111110000000111111110000000
01110001111000001111001111000000
01110000111000001110000111000000
01110001111000001110000000000000
01111111110000001110000000000000
01110111100000001110000111000000
01110011110011101111001111011100
01110001111011100111111110011100
00000000000000000000000000000000'''

rc01 = \
R'''00000000000000000000000000000000000000000000000000000000000
01111111111111111100000000000000000001111111111111000000000
01111111111111111110000000000000001111111111111111000000000
01111111111111111111000000000000111111111111111111000000000
01111111100000111111100000000001111111111111111111000000000
00011111100000111111100000000011111110000000111111000000000
00011111100000111111100000000111111100000000000000000000000
00011111111111111111000000000111111100000000000000000000000
00011111111111111110000000000111111100000000000000000000000
00011111111111111111000000000111111100000000000000000000000
00011111100000111111100000000111111100000000000000000000000
00011111100000111111100000000111111100000000000000000000000
00011111100000111111100000000011111110000000111111000000000
01111111100000111111100000000001111111111111111111000000000
01111111100000111111101111110000111111111111111111011111100
01111111100000111111101111110000001111111111111111011111100
01111111100000111111101111110000000001111111111111011111100
00000000000000000000000000000000000000000000000000000000000'''

def intarray(binstring):
    '''Change a 2D matrix of 01 chars into a list of lists of ints'''
    return [[(1 if ch == '1' else 0) for ch in line]
            for line in binstring.split("\n")]

def chararray(intmatrix):
    '''Change a 2d list of lists of 1/0 ints into lines of 1/0 chars'''
    return '\n'.join(''.join(str(p) for p in row) for row in intmatrix)

def toTxt(intmatrix):
    '''Change a 2d list of lists of 1/0 ints into lines of '#' and '.' chars'''
    return '\n'.join(''.join(('#' if p else '.') for p in row) for row in intmatrix)

def neighbours_array(x, y, image):
    '''Return 8-neighbours of point p1 of picture, in order'''
    i = image
    (x1, y1, x_1, y_1) = (x+1, y-1, x-1, y+1)
    #print ((x,y))
    return [i[y1][x],  i[y1][x1],   i[y][x1],  i[y_1][x1],  # P2,P3,P4,P5
            i[y_1][x], i[y_1][x_1], i[y][x_1], i[y1][x_1]]  # P6,P7,P8,P9

def neighbours_tuple(x, y, image):
    '''Return 8-neighbours of point p1 of picture, in order'''
    i = image
    (x1, y1, x_1, y_1) = (x+1, y-1, x-1, y+1)
    #print ((x,y))
    return (i[y1][x],  i[y1][x1],   i[y][x1],  i[y_1][x1],  # P2,P3,P4,P5
            i[y_1][x], i[y_1][x_1], i[y][x_1], i[y1][x_1])  # P6,P7,P8,P9

def transitions(neighbours):
    #n = neighbours + neighbours[0:1]    # P2, ... P9, P2
    #return sum((n1, n2) == (0, 1) for n1, n2 in zip(n, n[1:]))
    s = 0
    for i in range(7):
        s += int((neighbours[i], neighbours[i+1]) == (0, 1))
    return s + int((neighbours[7], neighbours[0]) == (0, 1))

def zhangSuen(image : list):
    changing1 = [(-1, -1)]
    changing2 = [(-1, -1)]
    while len(changing1) != 0 or len(changing2) != 0:
        # Step 1
        changing1 = []
        for y in range(1, len(image) - 1):
            for x in range(1, len(image[0]) - 1):
                n = neighbours_array(x, y, image)
                (P2,P3,P4,P5,P6,P7,P8,P9) = neighbours_tuple(x, y, image)
                if (image[y][x] == 1 and    # (Condition 0)
                    P4 * P6 * P8 == 0 and   # Condition 4
                    P2 * P4 * P6 == 0 and   # Condition 3
                    transitions(n) == 1 and # Condition 2
                    2 <= sum(n) <= 6):      # Condition 1
                    changing1.append((x,y))
        for x, y in changing1: image[y][x] = 0
        # Step 2
        changing2 = []
        for y in range(1, len(image) - 1):
            for x in range(1, len(image[0]) - 1):
                n = neighbours_array(x, y, image)
                (P2,P3,P4,P5,P6,P7,P8,P9) = neighbours_tuple(x, y, image)
                if (image[y][x] == 1 and    # (Condition 0)
                    P2 * P6 * P8 == 0 and   # Condition 4
                    P2 * P4 * P8 == 0 and   # Condition 3
                    transitions(n) == 1 and # Condition 2
                    2 <= sum(n) <= 6):      # Condition 1
                    changing2.append((x,y))
        for x, y in changing2: image[y][x] = 0
        #print changing1
        #print changing2
    return image

for picture in (beforeTxt, smallrc01, rc01):
    image = intarray(picture)
    print('\nFrom:\n%s' % toTxt(image))
    after = zhangSuen(image)
    print('\nTo thinned:\n%s' % toTxt(after))
===
V beforeTxt = ‘1100111
1100111
1100111
1100111
1100110
1100110
1100110
1100110
1100110
1100110
1100110
1100110
1111110
0000000’

V smallrc01 = ‘00000000000000000000000000000000
01111111110000000111111110000000
01110001111000001111001111000000
01110000111000001110000111000000
01110001111000001110000000000000
01111111110000001110000000000000
01110111100000001110000111000000
01110011110011101111001111011100
01110001111011100111111110011100
00000000000000000000000000000000’

V rc01 = ‘00000000000000000000000000000000000000000000000000000000000
01111111111111111100000000000000000001111111111111000000000
01111111111111111110000000000000001111111111111111000000000
01111111111111111111000000000000111111111111111111000000000
01111111100000111111100000000001111111111111111111000000000
00011111100000111111100000000011111110000000111111000000000
00011111100000111111100000000111111100000000000000000000000
00011111111111111111000000000111111100000000000000000000000
00011111111111111110000000000111111100000000000000000000000
00011111111111111111000000000111111100000000000000000000000
00011111100000111111100000000111111100000000000000000000000
00011111100000111111100000000111111100000000000000000000000
00011111100000111111100000000011111110000000111111000000000
01111111100000111111100000000001111111111111111111000000000
01111111100000111111101111110000111111111111111111011111100
01111111100000111111101111110000001111111111111111011111100
01111111100000111111101111110000000001111111111111011111100
00000000000000000000000000000000000000000000000000000000000’

F intarray(binstring)
   ‘Change a 2D matrix of 01 chars into a list of lists of ints’
   R binstring.split("\n").map(line -> line.map(ch -> (I ch == ‘1’ {1} E 0)))

F chararray(intmatrix)
   ‘Change a 2d list of lists of 1/0 ints into lines of 1/0 chars’
   R intmatrix.map(row -> row.map(p -> String(p)).join(‘’)).join("\n")

F toTxt(intmatrix)
   ‘Change a 2d list of lists of 1/0 ints into lines of '#' and '.' chars’
   R intmatrix.map(row -> row.map(p -> (I p {‘#’} E ‘.’)).join(‘’)).join("\n")

F neighbours_array(x, y, image)
   ‘Return 8-neighbours of point p1 of picture, in order’
   V i = image
   V (x1, y1, x_1, y_1) = (x + 1, y - 1, x - 1, y + 1)
   R [i[y1][x], i[y1][x1], i[y][x1], i[y_1][x1], i[y_1][x], i[y_1][x_1], i[y][x_1], i[y1][x_1]]

F neighbours_tuple(x, y, image)
   ‘Return 8-neighbours of point p1 of picture, in order’
   V i = image
   V (x1, y1, x_1, y_1) = (x + 1, y - 1, x - 1, y + 1)
   R (i[y1][x], i[y1][x1], i[y][x1], i[y_1][x1], i[y_1][x], i[y_1][x_1], i[y][x_1], i[y1][x_1])

F transitions(neighbours)
   V s = 0
   L(i) 7
      s += Int((neighbours[i], neighbours[i + 1]) == (0, 1))
   R s + Int((neighbours[7], neighbours[0]) == (0, 1))

F zhangSuen(&image)
   V changing1 = [(-1, -1)]
   V changing2 = [(-1, -1)]
   L !changing1.empty | !changing2.empty
      changing1.drop()
      L(y) 1 .< image.len - 1
         L(x) 1 .< image[0].len - 1
            V n = neighbours_array(x, y, image)
            V (P2, P3, P4, P5, P6, P7, P8, P9) = neighbours_tuple(x, y, image)
            I (image[y][x] == 1 & P4 * P6 * P8 == 0 & P2 * P4 * P6 == 0 & transitions(n) == 1 & sum(n) C 2..6)
               changing1.append((x, y))
      L(x, y) changing1
         image[y][x] = 0
      changing2.drop()
      L(y) 1 .< image.len - 1
         L(x) 1 .< image[0].len - 1
            V n = neighbours_array(x, y, image)
            V (P2, P3, P4, P5, P6, P7, P8, P9) = neighbours_tuple(x, y, image)
            I (image[y][x] == 1 & P2 * P6 * P8 == 0 & P2 * P4 * P8 == 0 & transitions(n) == 1 & sum(n) C 2..6)
               changing2.append((x, y))
      L(x, y) changing2
         image[y][x] = 0
   R image

L(picture) (beforeTxt, smallrc01, rc01)
   V image = intarray(picture)
   print("\nFrom:\n#.".format(toTxt(image)))
   V after = zhangSuen(&image)
   print("\nTo thinned:\n#.".format(toTxt(after)))
===
auto beforeTxt = uR"(1100111
1100111
1100111
1100111
1100110
1100110
1100110
1100110
1100110
1100110
1100110
1100110
1111110
0000000)"_S;

auto smallrc01 = uR"(00000000000000000000000000000000
01111111110000000111111110000000
01110001111000001111001111000000
01110000111000001110000111000000
01110001111000001110000000000000
01111111110000001110000000000000
01110111100000001110000111000000
01110011110011101111001111011100
01110001111011100111111110011100
00000000000000000000000000000000)"_S;

auto rc01 = uR"(00000000000000000000000000000000000000000000000000000000000
01111111111111111100000000000000000001111111111111000000000
01111111111111111110000000000000001111111111111111000000000
01111111111111111111000000000000111111111111111111000000000
01111111100000111111100000000001111111111111111111000000000
00011111100000111111100000000011111110000000111111000000000
00011111100000111111100000000111111100000000000000000000000
00011111111111111111000000000111111100000000000000000000000
00011111111111111110000000000111111100000000000000000000000
00011111111111111111000000000111111100000000000000000000000
00011111100000111111100000000111111100000000000000000000000
00011111100000111111100000000111111100000000000000000000000
00011111100000111111100000000011111110000000111111000000000
01111111100000111111100000000001111111111111111111000000000
01111111100000111111101111110000111111111111111111011111100
01111111100000111111101111110000001111111111111111011111100
01111111100000111111101111110000000001111111111111011111100
00000000000000000000000000000000000000000000000000000000000)"_S;

template <typename T1> auto intarray(const T1 &binstring)
{
    u"Change a 2D matrix of 01 chars into a list of lists of ints"_S;
    return binstring.split(u"\n"_S).map([](const auto &line){return line.map([](const auto &ch){return (ch == u'1' ? 1 : 0);});});
}

template <typename T1> auto chararray(const T1 &intmatrix)
{
    u"Change a 2d list of lists of 1/0 ints into lines of 1/0 chars"_S;
    return intmatrix.map([](const auto &row){return row.map([](const auto &p){return String(p);}).join(u""_S);}).join(u"\n"_S);
}

template <typename T1> auto toTxt(const T1 &intmatrix)
{
    u"Change a 2d list of lists of 1/0 ints into lines of '#' and '.' chars"_S;
    return intmatrix.map([](const auto &row){return row.map([](const auto &p){return (p ? u'#'_C : u'.'_C);}).join(u""_S);}).join(u"\n"_S);
}

template <typename T1, typename T2, typename T3> auto neighbours_array(const T1 &x, const T2 &y, const T3 &image)
{
    u"Return 8-neighbours of point p1 of picture, in order"_S;
    auto i = image;
    auto [x1, _y1_, x_1, y_1] = make_tuple(x + 1, y - 1, x - 1, y + 1);
    return create_array({i[_y1_][x], i[_y1_][x1], i[y][x1], i[y_1][x1], i[y_1][x], i[y_1][x_1], i[y][x_1], i[_y1_][x_1]});
}

template <typename T1, typename T2, typename T3> auto neighbours_tuple(const T1 &x, const T2 &y, const T3 &image)
{
    u"Return 8-neighbours of point p1 of picture, in order"_S;
    auto i = image;
    auto [x1, _y1_, x_1, y_1] = make_tuple(x + 1, y - 1, x - 1, y + 1);
    return make_tuple(i[_y1_][x], i[_y1_][x1], i[y][x1], i[y_1][x1], i[y_1][x], i[y_1][x_1], i[y][x_1], i[_y1_][x_1]);
}

template <typename T1> auto transitions(const T1 &neighbours)
{
    auto s = 0;
    for (int i = 0; i < 7; i++)
        s += to_int(make_tuple(neighbours[i], neighbours[i + 1]) == make_tuple(0, 1));
    return s + to_int(make_tuple(_get<7>(neighbours), _get<0>(neighbours)) == make_tuple(0, 1));
}

template <typename T1> auto zhangSuen(T1 &image)
{
    auto changing1 = create_array({make_tuple(-1, -1)});
    auto changing2 = create_array({make_tuple(-1, -1)});
    while (!changing1.empty() || !changing2.empty()) {
        changing1.drop();
        for (auto y : range_el(1, image.len() - 1))
            for (auto x : range_el(1, _get<0>(image).len() - 1)) {
                auto n = neighbours_array(x, y, image);
                auto [P2, P3, P4, P5, P6, P7, P8, P9] = neighbours_tuple(x, y, image);
                if ((image[y][x] == 1 && P4 * P6 * P8 == 0 && P2 * P4 * P6 == 0 && transitions(n) == 1 && in(sum(n), range_ee(2, 6))))
                    changing1.append(make_tuple(x, y));
            }
        for (auto &&[x, y] : changing1)
            image[y].set(x, 0);
        changing2.drop();
        for (auto y : range_el(1, image.len() - 1))
            for (auto x : range_el(1, _get<0>(image).len() - 1)) {
                auto n = neighbours_array(x, y, image);
                auto [P2, P3, P4, P5, P6, P7, P8, P9] = neighbours_tuple(x, y, image);
                if ((image[y][x] == 1 && P2 * P6 * P8 == 0 && P2 * P4 * P8 == 0 && transitions(n) == 1 && in(sum(n), range_ee(2, 6))))
                    changing2.append(make_tuple(x, y));
            }
        for (auto &&[x, y] : changing2)
            image[y].set(x, 0);
    }
    return image;
}

struct CodeBlock1
{
    CodeBlock1()
    {
        for (auto &&picture : make_tuple(beforeTxt, smallrc01, rc01)) {
            auto image = intarray(picture);
            print(u"\nFrom:\n#."_S.format(toTxt(image)));
            auto after = zhangSuen(image);
            print(u"\nTo thinned:\n#."_S.format(toTxt(after)));
        }
    }
} code_block_1;


# https://www.rosettacode.org/wiki/Zig-zag_matrix#Python
def zigzag(n):
    def compare(xy):
        (x, y) = xy
        return (x + y, -y if (x + y) % 2 else y)
    xs = range(n)
    return {index: n for n, index in enumerate(sorted(
        ((x, y) for x in xs for y in xs),
        key=compare
    ))}

def printzz(myarray):
    n = int(len(myarray) ** 0.5 + 0.5)
    xs = range(n)
    print('\n'.join(
        [''.join("%3i" % myarray[(x, y)] for x in xs) for y in xs]
    ))

printzz(zigzag(6))
===
F zigzag(n)
   F compare(xy)
      V (x, y) = xy
      R (x + y, I (x + y) % 2 {-y} E y)
   V xs = 0 .< n
   R Dict(enumerate(sorted((multiloop(xs, xs, (x, y) -> (x, y))), key' compare)), (n, index) -> (index, n))

F printzz(myarray)
   V n = Int(myarray.len ^ 0.5 + 0.5)
   V xs = 0 .< n
   print((xs.map(y -> @xs.map(x -> ‘#3’.format(@@myarray[(x, @y)])).join(‘’))).join("\n"))

printzz(zigzag(6))
===
template <typename T1> auto zigzag(const T1 &n)
{
    auto compare = [](const auto &xy)
    {
        auto [x, y] = xy;
        return make_tuple(x + y, mod((x + y), 2) ? -y : y);
    };
    auto xs = range_el(0, n);
    return create_dict(enumerate(sorted((multiloop(xs, xs, [](const auto &x, const auto &y){return make_tuple(x, y);})), compare)), [](const auto &n, const auto &index){return make_tuple(index, n);});
}

template <typename T1> auto printzz(const T1 &myarray)
{
    auto n = to_int(pow(myarray.len(), 0.5) + 0.5);
    auto xs = range_el(0, n);
    print((xs.map([&myarray, &xs](const auto &y){return xs.map([&myarray, &y](const auto &x){return u"#3"_S.format(myarray[make_tuple(x, y)]);}).join(u""_S);})).join(u"\n"_S));
}

struct CodeBlock1
{
    CodeBlock1()
    {
        printzz(zigzag(6));
    }
} code_block_1;


# https://www.rosettacode.org/wiki/Zeckendorf_arithmetic#Python
from copy import deepcopy

class Zeckendorf:
    dLen : int

    def __init__(self, x='0'):
        q = 1
        i = len(x) - 1
        self.dLen = i // 2
        self.dVal = 0
        while i >= 0:
            self.dVal = self.dVal + (ord(x[i]) - ord('0')) * q
            q = q * 2
            i = i -1

    def a(self, n):
        i = n
        while True:
            if self.dLen < i:
                self.dLen = i
            j = (self.dVal >> (i * 2)) & 3
            if j == 0 or j == 1:
                return
            if j == 2:
                if (self.dVal >> ((i + 1) * 2) & 1) != 1:
                    return
                self.dVal = self.dVal + (1 << (i * 2 + 1))
                return
            if j == 3:
                temp = 3 << (i * 2)
                temp = temp ^ -1
                self.dVal = self.dVal & temp
                self.b((i + 1) * 2)
            i = i + 1

    def b(self, pos):
        if pos == 0:
            self.inc()
            return
        if (self.dVal >> pos) & 1 == 0:
            self.dVal = self.dVal + (1 << pos)
            self.a(int(pos / 2))
            if pos > 1:
                self.a(int(pos / 2) - 1)
        else:
            temp = 1 << pos
            temp = temp ^ -1
            self.dVal = self.dVal & temp
            self.b(pos + 1)
            self.b(pos - (2 if pos > 1 else 1))

    def c(self, pos):
        if (self.dVal >> pos) & 1 == 1:
            temp = 1 << pos
            temp = temp ^ -1
            self.dVal = self.dVal & temp
            return
        self.c(pos + 1)
        if pos > 0:
            self.b(pos - 1)
        else:
            self.inc()

    def inc(self) -> None:
        self.dVal = self.dVal + 1
        self.a(0)

    def __add__(self, rhs):
        copy = self
        rhs_dVal = rhs.dVal
        limit = (rhs.dLen + 1) * 2
        for gn in range(0, limit):
            if ((rhs_dVal >> gn) & 1) == 1:
                copy.b(gn)
        return copy

    def __sub__(self, rhs):
        copy = self
        rhs_dVal = rhs.dVal
        limit = (rhs.dLen + 1) * 2
        for gn in range(0, limit):
            if (rhs_dVal >> gn) & 1 == 1:
                copy.c(gn)
        while (((copy.dVal >> ((copy.dLen * 2) & 31)) & 3) == 0) or (copy.dLen == 0):
            copy.dLen = copy.dLen - 1
        return copy

    def __mul__(self, rhs):
        na = deepcopy(rhs)
        nb = deepcopy(rhs)
        nr = Zeckendorf()
        dVal = self.dVal
        for i in range(0, (self.dLen + 1) * 2):
            if ((dVal >> i) & 1) > 0:
                nr = nr + nb
            nt = deepcopy(nb)
            nb = nb + na
            na = deepcopy(nt)
        return nr

    def __str__(self):
        dig = ["00", "01", "10"]
        dig1 = ["", "1", "10"]

        if self.dVal == 0:
            return '0'
        idx = (self.dVal >> ((self.dLen * 2) & 31)) & 3
        sb : str = dig1[idx]
        i = self.dLen - 1
        while i >= 0:
            idx = (self.dVal >> (i * 2)) & 3
            sb += dig[idx]
            i = i - 1
        return sb

# main
print("Addition:")
g = Zeckendorf("10")
g = g + Zeckendorf("10")
print(g)
g = g + Zeckendorf("10")
print(g)
g = g + Zeckendorf("1001")
print(g)
g = g + Zeckendorf("1000")
print(g)
g = g + Zeckendorf("10101")
print(g)
print()

print("Subtraction:")
g = Zeckendorf("1000")
g = g - Zeckendorf("101")
print(g)
g = Zeckendorf("10101010")
g = g - Zeckendorf("1010101")
print(g)
print()

print("Multiplication:")
g = Zeckendorf("1001")
g = g * Zeckendorf("101")
print(g)
g = Zeckendorf("101010")
g = g + Zeckendorf("101")
print(g)
===
T Zeckendorf
   Int dLen
   dVal = 0

   F (x = ‘0’)
      V q = 1
      V i = x.len - 1
      .dLen = i I/ 2
      L i >= 0
         .dVal = .dVal + (x[i].code - ‘0’.code) * q
         q = q * 2
         i = i - 1

   F a(n)
      V i = n
      L
         I .dLen < i
            .dLen = i
         V j = (.dVal >> (i * 2)) [&] 3
         I j == 0 | j == 1
            R
         I j == 2
            I (.dVal >> ((i + 1) * 2) [&] 1) != 1
               R
            .dVal = .dVal + (1 << (i * 2 + 1))
            R
         I j == 3
            V temp = 3 << (i * 2)
            temp = temp (+) -1
            .dVal = .dVal [&] temp
            .b((i + 1) * 2)
         i = i + 1

   F b(pos)
      I pos == 0
         .inc()
         R
      I (.dVal >> pos) [&] 1 == 0
         .dVal = .dVal + (1 << pos)
         .a(Int(pos / 2))
         I pos > 1
            .a(Int(pos / 2) - 1)
      E
         V temp = 1 << pos
         temp = temp (+) -1
         .dVal = .dVal [&] temp
         .b(pos + 1)
         .b(pos - (I pos > 1 {2} E 1))

   F c(pos)
      I (.dVal >> pos) [&] 1 == 1
         V temp = 1 << pos
         temp = temp (+) -1
         .dVal = .dVal [&] temp
         R
      .c(pos + 1)
      I pos > 0
         .b(pos - 1)
      E
         .inc()

   F inc() -> Void
      .dVal = .dVal + 1
      .a(0)

   F +(rhs)
      V copy = (.)
      V rhs_dVal = rhs.dVal
      V limit = (rhs.dLen + 1) * 2
      L(gn) 0 .< limit
         I ((rhs_dVal >> gn) [&] 1) == 1
            copy.b(gn)
      R copy

   F -(rhs)
      V copy = (.)
      V rhs_dVal = rhs.dVal
      V limit = (rhs.dLen + 1) * 2
      L(gn) 0 .< limit
         I (rhs_dVal >> gn) [&] 1 == 1
            copy.c(gn)
      L (((copy.dVal >> ((copy.dLen * 2) [&] 31)) [&] 3) == 0) | (copy.dLen == 0)
         copy.dLen = copy.dLen - 1
      R copy

   F *(rhs)
      V na = copy(rhs)
      V nb = copy(rhs)
      V nr = Zeckendorf()
      V dVal = .dVal
      L(i) 0 .< (.dLen + 1) * 2
         I ((dVal >> i) [&] 1) > 0
            nr = nr + nb
         V nt = copy(nb)
         nb = nb + na
         na = copy(nt)
      R nr

   F String()
      V dig = [‘00’, ‘01’, ‘10’]
      V dig1 = [‘’, ‘1’, ‘10’]

      I .dVal == 0
         R ‘0’
      V idx = (.dVal >> ((.dLen * 2) [&] 31)) [&] 3
      String sb = dig1[idx]
      V i = .dLen - 1
      L i >= 0
         idx = (.dVal >> (i * 2)) [&] 3
         sb ‘’= dig[idx]
         i = i - 1
      R sb

print(‘Addition:’)
V g = Zeckendorf(‘10’)
g = g + Zeckendorf(‘10’)
print(g)
g = g + Zeckendorf(‘10’)
print(g)
g = g + Zeckendorf(‘1001’)
print(g)
g = g + Zeckendorf(‘1000’)
print(g)
g = g + Zeckendorf(‘10101’)
print(g)
print()

print(‘Subtraction:’)
g = Zeckendorf(‘1000’)
g = g - Zeckendorf(‘101’)
print(g)
g = Zeckendorf(‘10101010’)
g = g - Zeckendorf(‘1010101’)
print(g)
print()

print(‘Multiplication:’)
g = Zeckendorf(‘1001’)
g = g * Zeckendorf(‘101’)
print(g)
g = Zeckendorf(‘101010’)
g = g + Zeckendorf(‘101’)
print(g)
===
class Zeckendorf
{
public:
    int dLen;
    decltype(0) dVal = 0;

    template <typename T1 = decltype(u"0"_S)> Zeckendorf(const T1 &x = u"0"_S)
    {
        auto q = 1;
        auto i = x.len() - 1;
        dLen = idiv(i, 2);
        while (i >= 0) {
            dVal = dVal + (x[i].code - u'0'_C.code) * q;
            q = q * 2;
            i = i - 1;
        }
    }

    template <typename T1> auto a(const T1 &n)
    {
        auto i = n;
        while (true) {
            if (dLen < i)
                dLen = i;
            auto j = (dVal >> (i * 2)) & 3;
            if (j == 0 || j == 1)
                return;
            if (j == 2) {
                if ((dVal >> ((i + 1) * 2) & 1) != 1)
                    return;
                dVal = dVal + (1 << (i * 2 + 1));
                return;
            }
            if (j == 3) {
                auto temp = 3 << (i * 2);
                temp = temp ^ -1;
                dVal = dVal & temp;
                b((i + 1) * 2);
            }
            i = i + 1;
        }
    }

    template <typename T1> auto b(const T1 &pos)
    {
        if (pos == 0) {
            inc();
            return;
        }
        if (((dVal >> pos) & 1) == 0) {
            dVal = dVal + (1 << pos);
            a(to_int(pos / 2.0));
            if (pos > 1)
                a(to_int(pos / 2.0) - 1);
        }
        else {
            auto temp = 1 << pos;
            temp = temp ^ -1;
            dVal = dVal & temp;
            b(pos + 1);
            b(pos - (pos > 1 ? 2 : 1));
        }
    }

    template <typename T1> auto c(const T1 &pos)
    {
        if (((dVal >> pos) & 1) == 1) {
            auto temp = 1 << pos;
            temp = temp ^ -1;
            dVal = dVal & temp;
            return;
        }
        c(pos + 1);
        if (pos > 0)
            b(pos - 1);
        else
            inc();
    }

    void inc()
    {
        dVal = dVal + 1;
        a(0);
    }

    template <typename T1> auto operator+(const T1 &rhs) const
    {
        auto copy = *this;
        auto rhs_dVal = rhs.dVal;
        auto limit = (rhs.dLen + 1) * 2;
        for (auto gn : range_el(0, limit))
            if (((rhs_dVal >> gn) & 1) == 1)
                copy.b(gn);
        return copy;
    }
    template <typename Ty> auto &operator+=(const Ty &t)
    {
        *this = *this + t;
        return *this;
    }

    template <typename T1> auto operator-(const T1 &rhs) const
    {
        auto copy = *this;
        auto rhs_dVal = rhs.dVal;
        auto limit = (rhs.dLen + 1) * 2;
        for (auto gn : range_el(0, limit))
            if (((rhs_dVal >> gn) & 1) == 1)
                copy.c(gn);
        while ((((copy.dVal >> ((copy.dLen * 2) & 31)) & 3) == 0) || (copy.dLen == 0))
            copy.dLen = copy.dLen - 1;
        return copy;
    }
    template <typename Ty> auto &operator-=(const Ty &t)
    {
        *this = *this - t;
        return *this;
    }

    template <typename T1> auto operator*(const T1 &rhs) const
    {
        auto na = copy(rhs);
        auto nb = copy(rhs);
        auto nr = Zeckendorf();
        auto dVal = this->dVal;
        for (auto i : range_el(0, (dLen + 1) * 2)) {
            if (((dVal >> i) & 1) > 0)
                nr = nr + nb;
            auto nt = copy(nb);
            nb = nb + na;
            na = copy(nt);
        }
        return nr;
    }
    template <typename Ty> auto &operator*=(const Ty &t)
    {
        *this = *this * t;
        return *this;
    }

    operator String() const
    {
        auto dig = create_array({u"00"_S, u"01"_S, u"10"_S});
        auto dig1 = create_array({u""_S, u"1"_S, u"10"_S});

        if (dVal == 0)
            return u"0"_S;
        auto idx = (dVal >> ((dLen * 2) & 31)) & 3;
        String sb = dig1[idx];
        auto i = dLen - 1;
        while (i >= 0) {
            idx = (dVal >> (i * 2)) & 3;
            sb &= dig[idx];
            i = i - 1;
        }
        return sb;
    }
};

struct CodeBlock1
{
    CodeBlock1()
    {
        print(u"Addition:"_S);
    }
} code_block_1;

auto g = Zeckendorf(u"10"_S);

struct CodeBlock2
{
    CodeBlock2()
    {
        g = g + Zeckendorf(u"10"_S);
        print(g);
        g = g + Zeckendorf(u"10"_S);
        print(g);
        g = g + Zeckendorf(u"1001"_S);
        print(g);
        g = g + Zeckendorf(u"1000"_S);
        print(g);
        g = g + Zeckendorf(u"10101"_S);
        print(g);
        print();

        print(u"Subtraction:"_S);
        g = Zeckendorf(u"1000"_S);
        g = g - Zeckendorf(u"101"_S);
        print(g);
        g = Zeckendorf(u"10101010"_S);
        g = g - Zeckendorf(u"1010101"_S);
        print(g);
        print();

        print(u"Multiplication:"_S);
        g = Zeckendorf(u"1001"_S);
        g = g * Zeckendorf(u"101"_S);
        print(g);
        g = Zeckendorf(u"101010"_S);
        g = g + Zeckendorf(u"101"_S);
        print(g);
    }
} code_block_2;


# https://www.rosettacode.org/wiki/Zumkeller_numbers#D
def getDivisors(n):
    divs = [1, n]
    i = 2
    while i * i <= n:
        if n % i == 0:
            divs += [i]

            j = n // i
            if i != j:
                divs += [j]
        i += 1
    return divs

def isPartSum(divs, sum):
    if sum == 0:
        return True

    le = len(divs)
    if le == 0:
        return False

    last = divs[-1]
    newDivs : List[int] = []
    for i in range(le - 1):
        newDivs += [divs[i]]

    if last > sum:
        return isPartSum(newDivs, sum)
    else:
        return isPartSum(newDivs, sum) or isPartSum(newDivs, sum - last)

def isZumkeller(n):
    divs = getDivisors(n)
    s = sum(divs)

    if s % 2 == 1:
        return False

    if n % 2 == 1:
        abundance = s - 2 * n
        return abundance > 0 and abundance % 2 == 0

    return isPartSum(divs, s // 2)

print('The first 220 Zumkeller numbers are:')
i = 2
count = 0
while count < 220:
    if isZumkeller(i):
        print('%3d ' % i, end = '')
        count += 1
        if count % 20 == 0:
            print()
    i += 1

print("\nThe first 40 odd Zumkeller numbers are:")
i = 3
count = 0
while count < 40:
    if isZumkeller(i):
        print('%5d ' % i, end = '')
        count += 1
        if count % 10 == 0:
            print()
    i += 2

print("\nThe first 40 odd Zumkeller numbers which don't end in 5 are:")
i = 3
count = 0
while count < 40:
    if i % 10 != 5 and isZumkeller(i):
        print('%7d ' % i, end = '')
        count += 1
        if count % 8 == 0:
            print()
    i += 2
===
F getDivisors(n)
   V divs = [1, n]
   V i = 2
   L i * i <= n
      I n % i == 0
         divs [+]= i

         V j = n I/ i
         I i != j
            divs [+]= j
      i++
   R divs

F isPartSum(divs, sum)
   I sum == 0
      R 1B

   V le = divs.len
   I le == 0
      R 0B

   V last = divs.last
   [Int] newDivs
   L(i) 0 .< le - 1
      newDivs [+]= divs[i]

   I last > sum
      R isPartSum(newDivs, sum)
   E
      R isPartSum(newDivs, sum) | isPartSum(newDivs, sum - last)

F isZumkeller(n)
   V divs = getDivisors(n)
   V s = sum(divs)

   I s % 2 == 1
      R 0B

   I n % 2 == 1
      V abundance = s - 2 * n
      R abundance > 0 & abundance % 2 == 0

   R isPartSum(divs, s I/ 2)

print(‘The first 220 Zumkeller numbers are:’)
V i = 2
V count = 0
L count < 220
   I isZumkeller(i)
      print(‘#3 ’.format(i), end' ‘’)
      count++
      I count % 20 == 0
         print()
   i++

print("\nThe first 40 odd Zumkeller numbers are:")
i = 3
count = 0
L count < 40
   I isZumkeller(i)
      print(‘#5 ’.format(i), end' ‘’)
      count++
      I count % 10 == 0
         print()
   i += 2

print("\nThe first 40 odd Zumkeller numbers which don't end in 5 are:")
i = 3
count = 0
L count < 40
   I i % 10 != 5 & isZumkeller(i)
      print(‘#7 ’.format(i), end' ‘’)
      count++
      I count % 8 == 0
         print()
   i += 2
===
template <typename T1> auto getDivisors(const T1 &n)
{
    auto divs = create_array({1, n});
    auto i = 2;
    while (i * i <= n) {
        if (mod(n, i) == 0) {
            divs.append(i);

            auto j = idiv(n, i);
            if (i != j)
                divs.append(j);
        }
        i++;
    }
    return divs;
}

template <typename T1, typename T2> auto isPartSum(const T1 &divs, const T2 &sum)
{
    if (sum == 0)
        return true;

    auto le = divs.len();
    if (le == 0)
        return false;

    auto last = divs.last();
    Array<int> newDivs;
    for (auto i : range_el(0, le - 1))
        newDivs.append(divs[i]);

    if (last > sum)
        return isPartSum(newDivs, sum);
    else
        return isPartSum(newDivs, sum) || isPartSum(newDivs, sum - last);
}

template <typename T1> auto isZumkeller(const T1 &n)
{
    auto divs = getDivisors(n);
    auto s = sum(divs);

    if (mod(s, 2) == 1)
        return false;

    if (mod(n, 2) == 1) {
        auto abundance = s - 2 * n;
        return abundance > 0 && mod(abundance, 2) == 0;
    }

    return isPartSum(divs, idiv(s, 2));
}

struct CodeBlock1
{
    CodeBlock1()
    {
        print(u"The first 220 Zumkeller numbers are:"_S);
    }
} code_block_1;

auto i = 2;
auto count = 0;

struct CodeBlock2
{
    CodeBlock2()
    {
        while (count < 220) {
            if (isZumkeller(i)) {
                print(u"#3 "_S.format(i), u""_S);
                count++;
                if (mod(count, 20) == 0)
                    print();
            }
            i++;
        }

        print(u"\nThe first 40 odd Zumkeller numbers are:"_S);
        i = 3;
        count = 0;
        while (count < 40) {
            if (isZumkeller(i)) {
                print(u"#5 "_S.format(i), u""_S);
                count++;
                if (mod(count, 10) == 0)
                    print();
            }
            i += 2;
        }

        print(u"\nThe first 40 odd Zumkeller numbers which don't end in 5 are:"_S);
        i = 3;
        count = 0;
        while (count < 40) {
            if (mod(i, 10) != 5 && isZumkeller(i)) {
                print(u"#7 "_S.format(i), u""_S);
                count++;
                if (mod(count, 8) == 0)
                    print();
            }
            i += 2;
        }
    }
} code_block_2;