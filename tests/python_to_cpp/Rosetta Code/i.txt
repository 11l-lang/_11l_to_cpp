# https://www.rosettacode.org/wiki/Inheritance/Single#Python
class Animal:
  pass #functions go here...
class Dog(Animal):
  pass #functions go here...
class Cat(Animal):
  pass #functions go here...
class Lab(Dog):
  pass #functions go here...
class Collie(Dog):
  pass #functions go here...
===
T Animal
{
}
T Dog(Animal)
{
}
T Cat(Animal)
{
}
T Lab(Dog)
{
}
T Collie(Dog)
{
}
===
class Animal
{
};

class Dog : public Animal
{
};

class Cat : public Animal
{
};

class Lab : public Dog
{
};

class Collie : public Dog
{
};


# https://www.rosettacode.org/wiki/Input/Output_for_lines_of_text#Python
def do_stuff(words):
    print(words)

linecount = int(input())
for x in range(linecount):
    line = input()
    do_stuff(line)
===
F do_stuff(words)
   print(words)
V linecount = Int(input())
L(x) 0 .< linecount
   V line = input()
   do_stuff(line)
===
template <typename T1> auto do_stuff(const T1 &words)
{
    print(words);
}
auto linecount = to_int(input());

struct CodeBlock1
{
    CodeBlock1()
    {
        for (auto x : range_el(0, linecount)) {
            auto line = input();
            do_stuff(line);
        }
    }
} code_block_1;


# https://www.rosettacode.org/wiki/Input/Output_for_pairs_of_numbers#Python
def do_stuff(a, b):
    return a + b

t = int(input())
for x in range(0, t):
    (a, b) = map(int, input().split(' '))
    print(do_stuff(a, b))
===
F do_stuff(a, b)
   R a + b
V t = Int(input())
L(x) 0 .< t
   V (a, b) = input().split(‘ ’).map(Int)
   print(do_stuff(a, b))
===
template <typename T1, typename T2> auto do_stuff(const T1 &a, const T2 &b)
{
    return a + b;
}
auto t = to_int(input());

struct CodeBlock1
{
    CodeBlock1()
    {
        for (auto x : range_el(0, t)) {
            auto [a, b] = bind_array<2>(input().split(u" "_S).map([](const auto &x){return to_int(x);}));
            print(do_stuff(a, b));
        }
    }
} code_block_1;


# https://www.rosettacode.org/wiki/Integer_comparison#Python
a = int(input('Enter value of a: '))
b = int(input('Enter value of b: '))

if a < b:
    print('a is less than b')
if a > b:
    print('a is greater than b')
if a == b:
    print('a is equal to b')
===
V a = Int(input(‘Enter value of a: ’))
V b = Int(input(‘Enter value of b: ’))

I a < b
   print(‘a is less than b’)
I a > b
   print(‘a is greater than b’)
I a == b
   print(‘a is equal to b’)
===
auto a = to_int(input(u"Enter value of a: "_S));
auto b = to_int(input(u"Enter value of b: "_S));

struct CodeBlock1
{
    CodeBlock1()
    {
        if (a < b)
            print(u"a is less than b"_S);
        if (a > b)
            print(u"a is greater than b"_S);
        if (a == b)
            print(u"a is equal to b"_S);
    }
} code_block_1;


# https://www.rosettacode.org/wiki/Integer_sequence#Python
import itertools

for i in itertools.count(1):
    print(i)
===
//import itertools

L(i) 1..
   print(i)
===
struct CodeBlock1
{
    CodeBlock1()
    {
        for (auto i : range_ei(1))
            print(i);
    }
} code_block_1;


# https://www.rosettacode.org/wiki/Intersecting_number_wheels#Python:_Simplified_procedural
from typing import Dict, List

def nextfrom(w : dict, name):
    while True:
        nxt = w[name][0]
        w[name] = w[name][1:] + w[name][:1]
        if '0' <= nxt[0] <= '9':
            return nxt
        name = nxt

for group in '''
A: 1 2 3
A: 1 B 2; B: 3 4
A: 1 D D; D: 6 7 8
A: 1 B C; B: 3 4; C: 5 B'''.strip("\n").split('\n'):
    print("Intersecting Number Wheel group:\n  " + group)
    wheel : Dict[str, List[str]] = {}
    first = ''
    for w in group.split(';'):
        s = w.strip(' ').split(' ')
        name = s[0]
        wheel[name[:-1]] = s[1:]
        first = name[:-1] if first == '' else first
    gen = ' '.join(nextfrom(wheel, first) for i in range(20))
    print("  Generates:\n    " + gen + " ...\n")
===

F nextfrom(&w, =name)
   L
      V nxt = w[name][0]
      w[name] = w[name][1..] + w[name][0.<1]
      I nxt[0] C ‘0’..‘9’
         R nxt
      name = nxt

L(group) ‘
A: 1 2 3
A: 1 B 2; B: 3 4
A: 1 D D; D: 6 7 8
A: 1 B C; B: 3 4; C: 5 B’.trim("\n").split("\n")
   print("Intersecting Number Wheel group:\n  "group)
   [String = [String]] wheel
   V first = ‘’
   L(w) group.split(‘;’)
      V s = w.trim(‘ ’).split(‘ ’)
      V name = s[0]
      wheel[name[0 .< (len)-1]] = s[1..]
      first = I first == ‘’ {name[0 .< (len)-1]} E first
   V gen = (0.<20).map(i -> nextfrom(&@wheel, @first)).join(‘ ’)
   print("  Generates:\n    "gen" ...\n")
===
template <typename T1, typename T2> auto nextfrom(T1 &w, T2 name)
{
    while (true) {
        auto nxt = _get<0>(w[name]);
        w.set(name, w[name][range_ei(1)] + w[name][range_el(0, 1)]);
        if (in(_get<0>(nxt), range_ee(u'0'_C, u'9'_C)))
            return nxt;
        name = nxt;
    }
}

struct CodeBlock1
{
    CodeBlock1()
    {

        for (auto &&group : uR"(
A: 1 2 3
A: 1 B 2; B: 3 4
A: 1 D D; D: 6 7 8
A: 1 B C; B: 3 4; C: 5 B)"_S.trim(u"\n"_S).split(u"\n"_S)) {
            print(u"Intersecting Number Wheel group:\n  "_S & group);
            Dict<String, Array<String>> wheel;
            auto first = u""_S;
            for (auto &&w : group.split(u";"_S)) {
                auto s = w.trim(u" "_S).split(u" "_S);
                auto name = _get<0>(s);
                wheel.set(name[range_e_llen(0,  - 1)], s[range_ei(1)]);
                first = first == u"" ? name[range_e_llen(0,  - 1)] : first;
            }
            auto gen = range_el(0, 20).map([&first, &wheel](const auto &i){return nextfrom(wheel, first);}).join(u" "_S);
            print(u"  Generates:\n    "_S & gen & u" ...\n"_S);
        }
    }
} code_block_1;


# https://www.rosettacode.org/wiki/ISBN13_check_digit#Python
def is_isbn13(n):
    n = n.replace('-','').replace(' ', '')
    if len(n) != 13:
        return False
    product = (sum(int(ch) for ch in n[::2])
               + sum(int(ch) * 3 for ch in n[1::2]))
    return product % 10 == 0

tests = '''
978-1734314502
978-1734314509
978-1788399081
978-1788399083'''.strip("\n").split("\n")
for t in tests:
    print("ISBN13 "+t+" validates "+is_isbn13(t))
===
F is_isbn13(=n)
   n = n.replace(‘-’, ‘’).replace(‘ ’, ‘’)
   I n.len != 13
      R 0B
   V product = (sum(n[(0..).step(2)].map(ch -> Int(ch))) + sum(n[(1..).step(2)].map(ch -> Int(ch) * 3)))
   R product % 10 == 0
V tests = ‘
978-1734314502
978-1734314509
978-1788399081
978-1788399083’.trim("\n").split("\n")
L(t) tests
   print(‘ISBN13 ’t‘ validates ’is_isbn13(t))
===
template <typename T1> auto is_isbn13(T1 n)
{
    n = n.replace(u"-"_S, u""_S).replace(u" "_S, u""_S);
    if (n.len() != 13)
        return false;
    auto product = (sum_map(n[range_ei(0).step(2)], [](const auto &ch){return to_int(ch);}) + sum_map(n[range_ei(1).step(2)], [](const auto &ch){return to_int(ch) * 3;}));
    return mod(product, 10) == 0;
}
auto tests = uR"(
978-1734314502
978-1734314509
978-1788399081
978-1788399083)"_S.trim(u"\n"_S).split(u"\n"_S);

struct CodeBlock1
{
    CodeBlock1()
    {
        for (auto &&t : tests)
            print(u"ISBN13 "_S & t & u" validates "_S & is_isbn13(t));
    }
} code_block_1;


# https://www.rosettacode.org/wiki/I_before_E_except_after_C#Python
import re

PLAUSIBILITY_RATIO = 2

def plausibility_check(comment, x, y):
    print('\n  Checking plausibility of: %s' % comment)
    if x > PLAUSIBILITY_RATIO * y:
        print('    PLAUSIBLE. As we have counts of %i vs %i, a ratio of %4.1f times'
              % (x, y, float(x) / y))
    else:
        if x > y:
            print('    IMPLAUSIBLE. As although we have counts of %i vs %i, a ratio of %4.1f times does not make it plausible'
                  % (x, y, float(x) / y))
        else:
            print('    IMPLAUSIBLE, probably contra-indicated. As we have counts of %i vs %i, a ratio of %4.1f times'
                  % (x, y, float(x) / y))
    return x > PLAUSIBILITY_RATIO * y

def simple_stats():
    words = open('unixdict.txt').read().split("\n")
    cie = len({word for word in words if 'cie' in word})
    cei = len({word for word in words if 'cei' in word})
    not_c_ie = len({word for word in words if re.search(r'(^ie|[^c]ie)', word)})
    not_c_ei = len({word for word in words if re.search(r'(^ei|[^c]ei)', word)})
    return (cei, cie, not_c_ie, not_c_ei)

def print_result(cei, cie, not_c_ie, not_c_ei):
    if ( plausibility_check('I before E when not preceded by C', not_c_ie, not_c_ei)
         and plausibility_check('E before I when preceded by C', cei, cie) ):
        print('\nOVERALL IT IS PLAUSIBLE!')
    else:
        print('\nOVERALL IT IS IMPLAUSIBLE!')
    print('(To be plausible, one count must exceed another by %i times)' % PLAUSIBILITY_RATIO)

print('Checking plausibility of "I before E except after C":')
(cei, cie, not_c_ie, not_c_ei) = simple_stats()
print_result(cei, cie, not_c_ie, not_c_ei)
===
//import re
V PLAUSIBILITY_RATIO = 2

F plausibility_check(comment, x, y)
   print("\n  Checking plausibility of: #.".format(comment))
   I x > :PLAUSIBILITY_RATIO * y
      print(‘    PLAUSIBLE. As we have counts of #. vs #., a ratio of #2.1 times’.format(x, y, Float(x) / y))
   E
      I x > y
         print(‘    IMPLAUSIBLE. As although we have counts of #. vs #., a ratio of #2.1 times does not make it plausible’.format(x, y, Float(x) / y))
      E
         print(‘    IMPLAUSIBLE, probably contra-indicated. As we have counts of #. vs #., a ratio of #2.1 times’.format(x, y, Float(x) / y))
   R x > :PLAUSIBILITY_RATIO * y

F simple_stats()
   V words = File(‘unixdict.txt’).read().split("\n")
   V cie = Set(words.filter(word -> ‘cie’ C word)).len
   V cei = Set(words.filter(word -> ‘cei’ C word)).len
   V not_c_ie = Set(words.filter(word -> re:‘(^ie|[^c]ie)’.search(word))).len
   V not_c_ei = Set(words.filter(word -> re:‘(^ei|[^c]ei)’.search(word))).len
   R (cei, cie, not_c_ie, not_c_ei)

F print_result(cei, cie, not_c_ie, not_c_ei)
   I (plausibility_check(‘I before E when not preceded by C’, not_c_ie, not_c_ei) & plausibility_check(‘E before I when preceded by C’, cei, cie))
      print("\nOVERALL IT IS PLAUSIBLE!")
   E
      print("\nOVERALL IT IS IMPLAUSIBLE!")
   print(‘(To be plausible, one count must exceed another by #. times)’.format(:PLAUSIBILITY_RATIO))
print(‘Checking plausibility of "I before E except after C":’)
V (cei, cie, not_c_ie, not_c_ei) = simple_stats()
print_result(cei, cie, not_c_ie, not_c_ei)
===
auto PLAUSIBILITY_RATIO = 2;

template <typename T1, typename T2, typename T3> auto plausibility_check(const T1 &comment, const T2 &x, const T3 &y)
{
    print(u"\n  Checking plausibility of: #."_S.format(comment));
    if (x > ::PLAUSIBILITY_RATIO * y)
        print(u"    PLAUSIBLE. As we have counts of #. vs #., a ratio of #2.1 times"_S.format(x, y, to_float(x) / y));
    else
        if (x > y)
            print(u"    IMPLAUSIBLE. As although we have counts of #. vs #., a ratio of #2.1 times does not make it plausible"_S.format(x, y, to_float(x) / y));
        else
            print(u"    IMPLAUSIBLE, probably contra-indicated. As we have counts of #. vs #., a ratio of #2.1 times"_S.format(x, y, to_float(x) / y));
    return x > ::PLAUSIBILITY_RATIO * y;
}

auto simple_stats()
{
    auto words = File(u"unixdict.txt"_S).read().split(u"\n"_S);
    auto cie = create_set(words.filter([](const auto &word){return in(u"cie"_S, word);})).len();
    auto cei = create_set(words.filter([](const auto &word){return in(u"cei"_S, word);})).len();
    auto not_c_ie = create_set(words.filter([](const auto &word){return re::_(u"(^ie|[^c]ie)"_S).search(word);})).len();
    auto not_c_ei = create_set(words.filter([](const auto &word){return re::_(u"(^ei|[^c]ei)"_S).search(word);})).len();
    return make_tuple(cei, cie, not_c_ie, not_c_ei);
}

template <typename T1, typename T2, typename T3, typename T4> auto print_result(const T1 &cei, const T2 &cie, const T3 &not_c_ie, const T4 &not_c_ei)
{
    if ((plausibility_check(u"I before E when not preceded by C"_S, not_c_ie, not_c_ei) && plausibility_check(u"E before I when preceded by C"_S, cei, cie)))
        print(u"\nOVERALL IT IS PLAUSIBLE!"_S);
    else
        print(u"\nOVERALL IT IS IMPLAUSIBLE!"_S);
    print(u"(To be plausible, one count must exceed another by #. times)"_S.format(::PLAUSIBILITY_RATIO));
}

struct CodeBlock1
{
    CodeBlock1()
    {
        print(u"Checking plausibility of \"I before E except after C\":"_S);
    }
} code_block_1;
auto [cei, cie, not_c_ie, not_c_ei] = simple_stats();

struct CodeBlock2
{
    CodeBlock2()
    {
        print_result(cei, cie, not_c_ie, not_c_ei);
    }
} code_block_2;


# https://www.rosettacode.org/wiki/Inverted_index#D
from typing import DefaultDict, Set
import collections, re

index : DefaultDict[str, Set[str]] = collections.defaultdict(set)

def parse_file(fname, fcontents):
    for word in re.split(r"\W", fcontents):
        index[word.lower()].add(fname)

for fname, fcontents in [('inv1.txt', 'It is what it is.'),
                         ('inv2.txt', 'What is it?'),
                         ('inv3.txt', 'It is a banana!')]:
    parse_file(fname, fcontents)

for w in ['cat', 'is', 'banana', 'it', 'what']:
    print("\nEnter a word to search for: (q to quit):", w)
    if w in index:
        print("'%s' found in %s." % (w, sorted(list(index[w]))))
    else:
        print("'%s' not found." % w)
===
//import collections, re
DefaultDict[String, Set[String]] index

F parse_file(fname, fcontents)
   L(word) fcontents.split(re:‘\W’)
      :index[word.lowercase()].add(fname)

L(fname, fcontents) [(‘inv1.txt’, ‘It is what it is.’), (‘inv2.txt’, ‘What is it?’), (‘inv3.txt’, ‘It is a banana!’)]
   parse_file(fname, fcontents)

L(w) [‘cat’, ‘is’, ‘banana’, ‘it’, ‘what’]
   print("\nEnter a word to search for: (q to quit): "w)
   I w C index
      print(‘'#.' found in #..’.format(w, sorted(Array(index[w]))))
   E
      print(‘'#.' not found.’.format(w))
===
DefaultDict<String, Set<String>> index;

template <typename T1, typename T2> auto parse_file(const T1 &fname, const T2 &fcontents)
{
    for (auto &&word : fcontents.split(re::_(uR"(\W)"_S)))
        ::index[word.lowercase()].add(fname);
}

struct CodeBlock1
{
    CodeBlock1()
    {
        for (auto &&[fname, fcontents] : create_array({make_tuple(u"inv1.txt"_S, u"It is what it is."_S), make_tuple(u"inv2.txt"_S, u"What is it?"_S), make_tuple(u"inv3.txt"_S, u"It is a banana!"_S)}))
            parse_file(fname, fcontents);

        for (auto &&w : create_array({u"cat"_S, u"is"_S, u"banana"_S, u"it"_S, u"what"_S})) {
            print(u"\nEnter a word to search for: (q to quit): "_S & w);
            if (in(w, index))
                print(u"'#.' found in #.."_S.format(w, sorted(create_array(index[w]))));
            else
                print(u"'#.' not found."_S.format(w));
        }
    }
} code_block_1;


# https://www.rosettacode.org/wiki/Iterated_digits_squaring#Python
import math

def next_step(x):
    result = 0
    while x > 0:
        result += (x % 10) ** 2
        x //= 10
    return result

def check(number):
    candidate = 0
    for n in number:
        candidate = candidate * 10 + n

    while candidate != 89 and candidate != 1:
        candidate = next_step(candidate)

    if candidate == 89:
        digits_count = [0] * 10
        for d in number:
            digits_count[d] += 1

        result = math.factorial(len(number))
        for c in digits_count:
            result //= math.factorial(c)
        return result

    return 0

limit = 100000000
cache_size = int(math.ceil(math.log10(limit)))
assert 10 ** cache_size == limit

number = [0] * cache_size
result = 0
i = cache_size - 1

while True:
    if i == 0 and number[i] == 9:
        break
    if i == cache_size - 1 and number[i] < 9:
        number[i] += 1
        result += check(number)
    elif number[i] == 9:
        i -= 1
    else:
        number[i] += 1
        for j in range(i + 1, cache_size):
            number[j] = number[i]
        i = cache_size - 1
        result += check(number)

print(result)
===
//import math

F next_step(=x)
   V result = 0
   L x > 0
      result += (x % 10) ^ 2
      x I/= 10
   R result

F check(number)
   V candidate = 0
   L(n) number
      candidate = candidate * 10 + n

   L candidate != 89 & candidate != 1
      candidate = next_step(candidate)

   I candidate == 89
      V digits_count = [0] * 10
      L(d) number
         digits_count[d]++
      V result = factorial(number.len)
      L(c) digits_count
         result I/= factorial(c)
      R result
   R 0
V limit = 100000000
V cache_size = Int(ceil(log10(limit)))
assert(10 ^ cache_size == limit)
V number = [0] * cache_size
V result = 0
V i = cache_size - 1

L
   I i == 0 & number[i] == 9
      L.break
   I i == cache_size - 1 & number[i] < 9
      number[i]++
      result += check(number)
   E I number[i] == 9
      i--
   E
      number[i]++
      L(j) i + 1 .< cache_size
         number[j] = number[i]
      i = cache_size - 1
      result += check(number)
print(result)
===
template <typename T1> auto next_step(T1 x)
{
    auto result = 0;
    while (x > 0) {
        result += square((mod(x, 10)));
        x = idiv(x, 10);
    }
    return result;
}

template <typename T1> auto check(const T1 &number)
{
    auto candidate = 0;
    for (auto &&n : number)
        candidate = candidate * 10 + n;
    while (candidate != 89 && candidate != 1)
        candidate = next_step(candidate);

    if (candidate == 89) {
        auto digits_count = create_array({0}) * 10;
        for (auto &&d : number)
            digits_count[d]++;
        auto result = factorial(number.len());
        for (auto &&c : digits_count)
            result = idiv(result, factorial(c));
        return result;
    }
    return 0;
}
auto limit = 100000000;
auto cache_size = to_int(ceil(log10(limit)));

struct CodeBlock1
{
    CodeBlock1()
    {
        assert(pow(10, cache_size) == limit);
    }
} code_block_1;
auto number = create_array({0}) * cache_size;
auto result = 0;
auto i = cache_size - 1;

struct CodeBlock2
{
    CodeBlock2()
    {

        while (true) {
            if (i == 0 && number[i] == 9)
                break;
            if (i == cache_size - 1 && number[i] < 9) {
                number[i]++;
                result += check(number);
            }
            else if (number[i] == 9)
                i--;
            else {
                number[i]++;
                for (auto j : range_el(i + 1, cache_size))
                    number.set(j, number[i]);
                i = cache_size - 1;
                result += check(number);
            }
        }
        print(result);
    }
} code_block_2;