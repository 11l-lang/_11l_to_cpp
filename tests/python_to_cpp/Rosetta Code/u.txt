# https://www.rosettacode.org/wiki/Ulam_numbers#Python
def ulam(n):
    if n <= 2:
        return n
    mx = 1352000
    lst = [1, 2] + [0] * mx
    sums = [0] * (mx * 2 + 1)
    sums[3] = 1
    size = 2
    query : int
    while size < n:
        query = lst[size-1] + 1
        while True:
            if sums[query] == 1:
                for i in range(size):
                    sum = query + lst[i]
                    t = sums[sum] + 1
                    if t <= 2:
                        sums[sum] = t
                (lst[size], size) = (query, size + 1)
                break
            query += 1
    return query

for p in range(5):
    n = 10**p
    print("The %d%s Ulam number is %d" % (n, 'th' if n!=1 else 'st', ulam(n)))
===
F ulam(n)
   I n <= 2
      R n
   V mx = 1352000
   V lst = [1, 2] [+] [0] * mx
   V sums = [0] * (mx * 2 + 1)
   sums[3] = 1
   V size = 2
   Int query
   L size < n
      query = lst[size - 1] + 1
      L
         I sums[query] == 1
            L(i) 0 .< size
               V sum = query + lst[i]
               V t = sums[sum] + 1
               I t <= 2
                  sums[sum] = t
            (lst[size], size) = (query, size + 1)
            L.break
         query++
   R query

L(p) 5
   V n = 10 ^ p
   print(‘The #.#. Ulam number is #.’.format(n, I n != 1 {‘th’} E ‘st’, ulam(n)))
===
template <typename T1> auto ulam(const T1 &n)
{
    if (n <= 2)
        return n;
    auto mx = 1352000;
    auto lst = create_array({1, 2}) + create_array({0}) * mx;
    auto sums = create_array({0}) * (mx * 2 + 1);
    _set<3>(sums, 1);
    auto size = 2;
    int query;
    while (size < n) {
        query = lst[size - 1] + 1;
        while (true) {
            if (sums[query] == 1) {
                for (auto i : range_el(0, size)) {
                    auto sum = query + lst[i];
                    auto t = sums[sum] + 1;
                    if (t <= 2)
                        sums.set(sum, t);
                }
                assign_from_tuple(lst[size], size, make_tuple(query, size + 1));
                break;
            }
            query++;
        }
    }
    return query;
}

struct CodeBlock1
{
    CodeBlock1()
    {
        for (int p = 0; p < 5; p++) {
            auto n = pow(10, p);
            print(u"The #.#. Ulam number is #."_S.format(n, n != 1 ? u"th"_S : u"st"_S, ulam(n)));
        }
    }
} code_block_1;


# https://www.rosettacode.org/wiki/Ulam_spiral_(for_primes)#Python
import math

def cell(n, x, y, start=1):
    d = 0
    y = y - n//2
    x = x - (n - 1)//2
    l = 2*max(abs(x), abs(y))
    d = (l*3 + x + y) if y >= x else (l - x - y)
    return (l - 1)**2 + d + start - 1

def show_spiral(n, symbol='# ', start=1, space=''):
    top = start + n*n + 1
    is_prime = [False,False,True] + [True,False]*(top//2)
    for x in range(3, 1 + int(math.sqrt(top))):
        if not is_prime[x]: continue
        for i in range(x*x, top, x*2):
            is_prime[i] = False

    f : Callable[[int], str] = lambda _: symbol # how to show prime cells

    if space == '': space = ' '*len(symbol)

    if len(symbol) == 0: # print numbers instead
        max_str = len(str(n*n + start - 1))
        if space == '': space = ('.'*max_str) + ' '
        f = lambda x: str(x).rjust(max_str) + ' ' # ('%' + str(max_str) + 'd ')%x

    cell_str = lambda x: f(x) if is_prime[x] else space

    for y in range(n):
        print(''.join(cell_str(v) for v in [cell(n, x, y, start) for x in range(n)]))
    print()

show_spiral(10, symbol='# ', space='  ')
show_spiral(9, symbol='', space=' - ')
===
F cell(n, =x, =y, start = 1)
   V d = 0
   y = y - n I/ 2
   x = x - (n - 1) I/ 2
   V l = 2 * max(abs(x), abs(y))
   d = I y >= x {(l * 3 + x + y)} E (l - x - y)
   R (l - 1) ^ 2 + d + start - 1

F show_spiral(n, symbol = ‘# ’, start = 1, =space = ‘’)
   V top = start + n * n + 1
   V is_prime = [0B, 0B, 1B] [+] [1B, 0B] * (top I/ 2)
   L(x) 3 .< 1 + Int(sqrt(top))
      I !is_prime[x]
         L.continue
      L(i) (x * x .< top).step(x * 2)
         is_prime[i] = 0B

   (Int -> String) f = _ -> @symbol

   I space == ‘’
      space = ‘ ’ * symbol.len

   I symbol.empty
      V max_str = String(n * n + start - 1).len
      I space == ‘’
         space = (‘.’ * max_str)‘ ’
      f = x -> String(x).rjust(@max_str)‘ ’

   V cell_str = x -> I @is_prime[x] {@f(x)} E @space

   L(y) 0 .< n
      print((0 .< n).map(x -> cell(@n, x, @y, @start)).map(v -> @cell_str(v)).join(‘’))
   print()

show_spiral(10, symbol' ‘# ’, space' ‘  ’)
show_spiral(9, symbol' ‘’, space' ‘ - ’)
===
template <typename T1, typename T2, typename T3, typename T4 = decltype(1)> auto cell(const T1 &n, T2 x, T3 y, const T4 &start = 1)
{
    auto d = 0;
    y = y - idiv(n, 2);
    x = x - idiv((n - 1), 2);
    auto l = 2 * max(abs(x), abs(y));
    d = y >= x ? (l * 3 + x + y) : (l - x - y);
    return square((l - 1)) + d + start - 1;
}

template <typename T1, typename T2 = decltype(u"# "_S), typename T3 = decltype(1), typename T4 = decltype(u""_S)> auto show_spiral(const T1 &n, const T2 &symbol = u"# "_S, const T3 &start = 1, T4 space = u""_S)
{
    auto top = start + n * n + 1;
    auto is_prime = create_array({false, false, true}) + create_array({true, false}) * (idiv(top, 2));
    for (auto x : range_el(3, 1 + to_int(sqrt(top)))) {
        if (!is_prime[x])
            continue;
        for (auto i : range_el(x * x, top).step(x * 2))
            is_prime.set(i, false);
    }

    std::function<String(const int)> f = [&symbol](const auto &_){return symbol;};

    if (space == u"")
        space = u" "_S * symbol.len();

    if (symbol.empty()) {
        auto max_str = String(n * n + start - 1).len();
        if (space == u"")
            space = (u"."_S * max_str) & u" "_S;
        f = [&max_str](const auto &x){return String(x).rjust(max_str) & u" "_S;};
    }

    auto cell_str = [&f, &is_prime, &space](const auto &x){return is_prime[x] ? f(x) : space;};

    for (auto y : range_el(0, n))
        print(range_el(0, n).map([&n, &start, &y](const auto &x){return cell(n, x, y, start);}).map([&cell_str](const auto &v){return cell_str(v);}).join(u""_S));
    print();
}

struct CodeBlock1
{
    CodeBlock1()
    {
        show_spiral(10, u"# "_S, 1, u"  "_S);
        show_spiral(9, u""_S, 1, u" - "_S);
    }
} code_block_1;


# https://www.rosettacode.org/wiki/Unix/ls#Python
import os
print('\n'.join(sorted(os.listdir('.'))))
===
print(sorted(fs:list_dir(‘.’)).join("\n"))
===
struct CodeBlock1
{
    CodeBlock1()
    {
        print(sorted(fs::list_dir(u"."_S)).join(u"\n"_S));
    }
} code_block_1;


# https://www.rosettacode.org/wiki/UPC#Kotlin
LEFT_DIGITS = {
    "   ## #": 0,
    "  ##  #": 1,
    "  #  ##": 2,
    " #### #": 3,
    " #   ##": 4,
    " ##   #": 5,
    " # ####": 6,
    " ### ##": 7,
    " ## ###": 8,
    "   # ##": 9
}

RIGHT_DIGITS = {k.replace(' ', 's').replace('#', ' ').replace('s', '#') : v for k, v in LEFT_DIGITS.items()}

END_SENTINEL = "# #"
MID_SENTINEL = " # # "

def decodeUPC(input):
    def decode(candidate):
        pos = 0
        part = candidate[pos : pos + len(END_SENTINEL)]
        if part == END_SENTINEL:
            pos += len(END_SENTINEL)
        else:
            return (False, [0]*0)

        output : List[int] = []
        for i in range(6):
            part = candidate[pos : pos + 7]
            pos += 7

            if part in LEFT_DIGITS:
                output += [LEFT_DIGITS[part]]
            else:
                return (False, output)

        part = candidate[pos : pos + len(MID_SENTINEL)]
        if part == MID_SENTINEL:
            pos += len(MID_SENTINEL)
        else:
            return (False, output)

        for i in range(6):
            part = candidate[pos : pos + 7]
            pos += 7

            if part in RIGHT_DIGITS:
                output += [RIGHT_DIGITS[part]]
            else:
                return (False, output)

        part = candidate[pos : pos + len(END_SENTINEL)]
        if part == END_SENTINEL:
            pos += len(END_SENTINEL)
        else:
            return (False, output)

        sum = 0
        for i, v in enumerate(output):
            if i % 2 == 0:
                sum += 3 * v
            else:
                sum += v
        return (sum % 10 == 0, output)

    candidate = input.strip(' ')
    out = decode(candidate)
    if out[0]:
        print(out[1])
    else:
        out = decode(candidate[::-1])
        if out[0]:
            print(out[1], 'Upside down')
        else:
            if len(out[1]) == 12:
                print('Invalid checksum')
            else:
                print('Invalid digit(s)')

barcodes = [
    "         # #   # ##  #  ## #   ## ### ## ### ## #### # # # ## ##  #   #  ##  ## ###  # ##  ## ### #  # #       ",
    "        # # #   ##   ## # #### #   # ## #   ## #   ## # # # ###  # ###  ##  ## ###  # #  ### ###  # # #         ",
    "         # #    # # #  ###  #   #    # #  #   #    # # # # ## #   ## #   ## #   ##   # # #### ### ## # #         ",
    "       # # ##  ## ##  ##   #  #   #  # ###  # ##  ## # # #   ## ##  #  ### ## ## #   # #### ## #   # #        ",
    "         # # ### ## #   ## ## ###  ##  # ##   #   # ## # # ### #  ## ##  #    # ### #  ## ##  #      # #          ",
    "          # #  #   # ##  ##  #   #   #  # ##  ##  #   # # # # #### #  ##  # #### #### # #  ##  # #### # #         ",
    "         # #  #  ##  ##  # #   ## ##   # ### ## ##   # # # #  #   #   #  #  ### # #    ###  # #  #   # #        ",
    "        # # #    # ##  ##   #  # ##  ##  ### #   #  # # # ### ## ## ### ## ### ### ## #  ##  ### ## # #         ",
    "         # # ### ##   ## # # #### #   ## # #### # #### # # #   #  # ###  #    # ###  # #    # ###  # # #       ",
    "        # # # #### ##   # #### # #   ## ## ### #### # # # #  ### # ###  ###  # # ###  #    # #  ### # #         ",
]

for barcode in barcodes:
    decodeUPC(barcode)
===
V LEFT_DIGITS = [‘   ## #’ = 0, ‘  ##  #’ = 1, ‘  #  ##’ = 2, ‘ #### #’ = 3, ‘ #   ##’ = 4, ‘ ##   #’ = 5, ‘ # ####’ = 6, ‘ ### ##’ = 7, ‘ ## ###’ = 8, ‘   # ##’ = 9]

V RIGHT_DIGITS = Dict(LEFT_DIGITS.items(), (k, v) -> (k.replace(‘ ’, ‘s’).replace(‘#’, ‘ ’).replace(‘s’, ‘#’), v))

V END_SENTINEL = ‘# #’
V MID_SENTINEL = ‘ # # ’

F decodeUPC(input)
   F decode(candidate)
      V pos = 0
      V part = candidate[pos .< pos + :END_SENTINEL.len]
      I part == :END_SENTINEL
         pos += :END_SENTINEL.len
      E
         R (0B, [Int]())

      [Int] output
      L(i) 6
         part = candidate[pos .< pos + 7]
         pos += 7

         I part C :LEFT_DIGITS
            output [+]= :LEFT_DIGITS[part]
         E
            R (0B, output)

      part = candidate[pos .< pos + :MID_SENTINEL.len]
      I part == :MID_SENTINEL
         pos += :MID_SENTINEL.len
      E
         R (0B, output)

      L(i) 6
         part = candidate[pos .< pos + 7]
         pos += 7

         I part C :RIGHT_DIGITS
            output [+]= :RIGHT_DIGITS[part]
         E
            R (0B, output)

      part = candidate[pos .< pos + :END_SENTINEL.len]
      I part == :END_SENTINEL
         pos += :END_SENTINEL.len
      E
         R (0B, output)

      V sum = 0
      L(v) output
         V i = L.index
         I i % 2 == 0
            sum += 3 * v
         E
            sum += v
      R (sum % 10 == 0, output)

   V candidate = input.trim(‘ ’)
   V out = decode(candidate)
   I out[0]
      print(out[1])
   E
      out = decode(reversed(candidate))
      I out[0]
         print(out[1]‘ Upside down’)
      E
         I out[1].len == 12
            print(‘Invalid checksum’)
         E
            print(‘Invalid digit(s)’)

V barcodes = [‘         # #   # ##  #  ## #   ## ### ## ### ## #### # # # ## ##  #   #  ##  ## ###  # ##  ## ### #  # #       ’, ‘        # # #   ##   ## # #### #   # ## #   ## #   ## # # # ###  # ###  ##  ## ###  # #  ### ###  # # #         ’, ‘         # #    # # #  ###  #   #    # #  #   #    # # # # ## #   ## #   ## #   ##   # # #### ### ## # #         ’, ‘       # # ##  ## ##  ##   #  #   #  # ###  # ##  ## # # #   ## ##  #  ### ## ## #   # #### ## #   # #        ’, ‘         # # ### ## #   ## ## ###  ##  # ##   #   # ## # # ### #  ## ##  #    # ### #  ## ##  #      # #          ’, ‘          # #  #   # ##  ##  #   #   #  # ##  ##  #   # # # # #### #  ##  # #### #### # #  ##  # #### # #         ’, ‘         # #  #  ##  ##  # #   ## ##   # ### ## ##   # # # #  #   #   #  #  ### # #    ###  # #  #   # #        ’, ‘        # # #    # ##  ##   #  # ##  ##  ### #   #  # # # ### ## ## ### ## ### ### ## #  ##  ### ## # #         ’, ‘         # # ### ##   ## # # #### #   ## # #### # #### # # #   #  # ###  #    # ###  # #    # ###  # # #       ’, ‘        # # # #### ##   # #### # #   ## ## ### #### # # # #  ### # ###  ###  # # ###  #    # #  ### # #         ’]

L(barcode) barcodes
   decodeUPC(barcode)
===
auto LEFT_DIGITS = create_dict(dict_of(u"   ## #"_S, 0)(u"  ##  #"_S, 1)(u"  #  ##"_S, 2)(u" #### #"_S, 3)(u" #   ##"_S, 4)(u" ##   #"_S, 5)(u" # ####"_S, 6)(u" ### ##"_S, 7)(u" ## ###"_S, 8)(u"   # ##"_S, 9));

auto RIGHT_DIGITS = create_dict(LEFT_DIGITS.items(), [](const auto &k, const auto &v){return make_tuple(k.replace(u" "_S, u"s"_S).replace(u"#"_S, u" "_S).replace(u"s"_S, u"#"_S), v);});

auto END_SENTINEL = u"# #"_S;
auto MID_SENTINEL = u" # # "_S;

template <typename T1> auto decodeUPC(const T1 &input)
{
    auto decode = [](const auto &candidate)
    {
        auto pos = 0;
        auto part = candidate[range_el(pos, pos + ::END_SENTINEL.len())];
        if (part == ::END_SENTINEL)
            pos += ::END_SENTINEL.len();
        else
            return make_tuple(false, Array<int>());

        Array<int> output;
        for (int i = 0; i < 6; i++) {
            part = candidate[range_el(pos, pos + 7)];
            pos += 7;

            if (in(part, ::LEFT_DIGITS))
                output.append(::LEFT_DIGITS[part]);
            else
                return make_tuple(false, output);
        }

        part = candidate[range_el(pos, pos + ::MID_SENTINEL.len())];
        if (part == ::MID_SENTINEL)
            pos += ::MID_SENTINEL.len();
        else
            return make_tuple(false, output);

        for (int i = 0; i < 6; i++) {
            part = candidate[range_el(pos, pos + 7)];
            pos += 7;

            if (in(part, ::RIGHT_DIGITS))
                output.append(::RIGHT_DIGITS[part]);
            else
                return make_tuple(false, output);
        }

        part = candidate[range_el(pos, pos + ::END_SENTINEL.len())];
        if (part == ::END_SENTINEL)
            pos += ::END_SENTINEL.len();
        else
            return make_tuple(false, output);

        auto sum = 0;
        {int Lindex = 0;
        for (auto &&v : output) {
            auto i = Lindex;
            if (mod(i, 2) == 0)
                sum += 3 * v;
            else
                sum += v;
            Lindex++;
        }}
        return make_tuple(mod(sum, 10) == 0, output);
    };

    auto candidate = input.trim(u" "_S);
    auto out = decode(candidate);
    if (_get<0>(out))
        print(_get<1>(out));
    else {
        out = decode(reversed(candidate));
        if (_get<0>(out))
            print(_get<1>(out) & u" Upside down"_S);
        else
            if (_get<1>(out).len() == 12)
                print(u"Invalid checksum"_S);
            else
                print(u"Invalid digit(s)"_S);
    }
}

auto barcodes = create_array({u"         # #   # ##  #  ## #   ## ### ## ### ## #### # # # ## ##  #   #  ##  ## ###  # ##  ## ### #  # #       "_S, u"        # # #   ##   ## # #### #   # ## #   ## #   ## # # # ###  # ###  ##  ## ###  # #  ### ###  # # #         "_S, u"         # #    # # #  ###  #   #    # #  #   #    # # # # ## #   ## #   ## #   ##   # # #### ### ## # #         "_S, u"       # # ##  ## ##  ##   #  #   #  # ###  # ##  ## # # #   ## ##  #  ### ## ## #   # #### ## #   # #        "_S, u"         # # ### ## #   ## ## ###  ##  # ##   #   # ## # # ### #  ## ##  #    # ### #  ## ##  #      # #          "_S, u"          # #  #   # ##  ##  #   #   #  # ##  ##  #   # # # # #### #  ##  # #### #### # #  ##  # #### # #         "_S, u"         # #  #  ##  ##  # #   ## ##   # ### ## ##   # # # #  #   #   #  #  ### # #    ###  # #  #   # #        "_S, u"        # # #    # ##  ##   #  # ##  ##  ### #   #  # # # ### ## ## ### ## ### ### ## #  ##  ### ## # #         "_S, u"         # # ### ##   ## # # #### #   ## # #### # #### # # #   #  # ###  #    # ###  # #    # ###  # # #       "_S, u"        # # # #### ##   # #### # #   ## ## ### #### # # # #  ### # ###  ###  # # ###  #    # #  ### # #         "_S});

struct CodeBlock1
{
    CodeBlock1()
    {
        for (auto &&barcode : barcodes)
            decodeUPC(barcode);
    }
} code_block_1;


# https://www.rosettacode.org/wiki/Update_a_configuration_file#D
import re
from enum import IntEnum
from typing import Optional

class EntryType(IntEnum):
    EMPTY = 0
    ENABLED = 1
    DISABLED = 2
    COMMENT = 3
    IGNORE = 4

class Entry:
    etype : EntryType
    name : str
    value : str

    def __init__(self, etype, name = '', value = ''):
        self.etype = etype
        self.name  = name
        self.value = value

class Config:
    path : str

    def __init__(self, path):
        self.entries : List[Entry] = []

        self.path = path
        for line in open(path).readlines():
            line = line.rstrip("\n").lstrip(' ')
            if len(line) == 0:
                self.entries.append(Entry(EntryType.EMPTY))
            elif line[0] == '#':
                self.entries.append(Entry(EntryType.COMMENT, line))
            else:
                line = re.sub(r'[^a-zA-Z0-9\x20;]', '', line)
                m = re.match(r'(;*)\s*([a-zA-Z0-9]+)\s*([a-zA-Z0-9]*)', line)
                if m and len(m.group(2)) != 0:
                    t = EntryType.ENABLED if len(m.group(1)) == 0 else EntryType.DISABLED
                    self.addOption(m.group(2), m.group(3), t)

    def enableOption(self, name):
        i : Optional[int] = self.getOptionIndex(name)
        if i is not None:
            self.entries[i].etype = EntryType.ENABLED

    def disableOption(self, name):
        i : Optional[int] = self.getOptionIndex(name)
        if i is not None:
            self.entries[i].etype = EntryType.DISABLED

    def setOption(self, name, value):
        i : Optional[int] = self.getOptionIndex(name)
        if i is not None:
            self.entries[i].value = value

    def addOption(self, name, val, t = EntryType.ENABLED):
        self.entries.append(Entry(t, name.upper(), val))

    def removeOption(self, name):
        i : Optional[int] = self.getOptionIndex(name)
        if i is not None:
            self.entries[i].etype = EntryType.IGNORE

    def getOptionIndex(self, name) -> Optional[int]:
        for i, e in enumerate(self.entries):
            if e.etype not in (EntryType.ENABLED, EntryType.DISABLED):
                continue
            if e.name == name.upper():
                return i
        return None

    def store(self):
        f = open(self.path, 'w')
        for e in self.entries:
            if e.etype == EntryType.EMPTY:
                f.write("\n")
            elif e.etype == EntryType.ENABLED:
                f.write("%s %s\n" % (e.name, e.value))
            elif e.etype == EntryType.DISABLED:
                f.write("; %s %s\n" % (e.name, e.value))
            elif e.etype == EntryType.COMMENT:
                f.write(e.name + "\n")

cfg = Config("config.txt")
cfg.enableOption("seedsremoved")
cfg.disableOption("needspeeling")
cfg.setOption("numberofbananas", "1024")
cfg.addOption("numberofstrawberries", "62000")
cfg.store()
===
T.enum EntryType
   EMPTY
   ENABLED
   DISABLED
   COMMENT
   IGNORE

T Entry
   EntryType etype
   String name
   String value

   F (etype, name = ‘’, value = ‘’)
      .etype = etype
      .name = name
      .value = value

T Config
   String path
   [Entry] entries

   F (path)

      .path = path
      L(=line) File(path).read_lines(1B)
         line = line.rtrim("\n").ltrim(‘ ’)
         I line.empty
            .entries.append(Entry(EntryType.EMPTY))
         E I line[0] == ‘#’
            .entries.append(Entry(EntryType.COMMENT, line))
         E
            line = line.replace(re:‘[^a-zA-Z0-9\x20;]’, ‘’)
            V m = re:‘^(;*)\s*([a-zA-Z0-9]+)\s*([a-zA-Z0-9]*)’.search(line)
            I m & !m.group(2).empty
               V t = I m.group(1).empty {EntryType.ENABLED} E EntryType.DISABLED
               .addOption(m.group(2), m.group(3), t)

   F enableOption(name)
      Int? i = .getOptionIndex(name)
      I i != N
         .entries[i].etype = EntryType.ENABLED

   F disableOption(name)
      Int? i = .getOptionIndex(name)
      I i != N
         .entries[i].etype = EntryType.DISABLED

   F setOption(name, value)
      Int? i = .getOptionIndex(name)
      I i != N
         .entries[i].value = value

   F addOption(name, val, t = EntryType.ENABLED)
      .entries.append(Entry(t, name.uppercase(), val))

   F removeOption(name)
      Int? i = .getOptionIndex(name)
      I i != N
         .entries[i].etype = EntryType.IGNORE

   F getOptionIndex(name) -> Int?
      L(e) .entries
         V i = L.index
         I e.etype !C (EntryType.ENABLED, EntryType.DISABLED)
            L.continue
         I e.name == name.uppercase()
            R i
      R N

   F store()
      V f = File(.path, ‘w’)
      L(e) .entries
         I e.etype == EMPTY
            f.write("\n")
         E I e.etype == ENABLED
            f.write("#. #.\n".format(e.name, e.value))
         E I e.etype == DISABLED
            f.write("; #. #.\n".format(e.name, e.value))
         E I e.etype == COMMENT
            f.write(e.name"\n")

V cfg = Config(‘config.txt’)
cfg.enableOption(‘seedsremoved’)
cfg.disableOption(‘needspeeling’)
cfg.setOption(‘numberofbananas’, ‘1024’)
cfg.addOption(‘numberofstrawberries’, ‘62000’)
cfg.store()
===
enum class EntryType {
    EMPTY,
    ENABLED,
    DISABLED,
    COMMENT,
    IGNORE
};

class Entry
{
public:
    EntryType etype;
    String name;
    String value;

    template <typename T1, typename T2 = decltype(u""_S), typename T3 = decltype(u""_S)> Entry(const T1 &etype, const T2 &name = u""_S, const T3 &value = u""_S) :
        etype(etype),
        name(name),
        value(value)
    {
    }
};

class Config
{
public:
    String path;
    Array<Entry> entries;

    template <typename T1> Config(const T1 &path) :
        path(path)
    {
        for (auto line : File(path).read_lines(true)) {
            line = line.rtrim(u"\n"_S).ltrim(u" "_S);
            if (line.empty())
                entries.append(Entry(EntryType::EMPTY));
            else if (_get<0>(line) == u'#')
                entries.append(Entry(EntryType::COMMENT, line));
            else {
                line = line.replace(re::_(uR"([^a-zA-Z0-9\x20;])"_S), u""_S);
                auto m = re::_(uR"(^(;*)\s*([a-zA-Z0-9]+)\s*([a-zA-Z0-9]*))"_S).search(line);
                if (m && !m.group(2).empty()) {
                    auto t = m.group(1).empty() ? EntryType::ENABLED : EntryType::DISABLED;
                    addOption(m.group(2), m.group(3), t);
                }
            }
        }
    }

    template <typename T1> auto enableOption(const T1 &name)
    {
        Nullable<int> i = getOptionIndex(name);
        if (i != nullptr)
            entries[*i].etype = EntryType::ENABLED;
    }

    template <typename T1> auto disableOption(const T1 &name)
    {
        Nullable<int> i = getOptionIndex(name);
        if (i != nullptr)
            entries[*i].etype = EntryType::DISABLED;
    }

    template <typename T1, typename T2> auto setOption(const T1 &name, const T2 &value)
    {
        Nullable<int> i = getOptionIndex(name);
        if (i != nullptr)
            entries[*i].value = value;
    }

    template <typename T1, typename T2, typename T3 = decltype(EntryType::ENABLED)> auto addOption(const T1 &name, const T2 &val, const T3 &t = EntryType::ENABLED)
    {
        entries.append(Entry(t, name.uppercase(), val));
    }

    template <typename T1> auto removeOption(const T1 &name)
    {
        Nullable<int> i = getOptionIndex(name);
        if (i != nullptr)
            entries[*i].etype = EntryType::IGNORE;
    }

    template <typename T1> Nullable<int> getOptionIndex(const T1 &name)
    {
        {int Lindex = 0;
        for (auto &&e : entries) {{
            auto i = Lindex;
            if (!in(e.etype, make_tuple(EntryType::ENABLED, EntryType::DISABLED)))
                goto on_continue;
            if (e.name == name.uppercase())
                return i;
} on_continue:
            Lindex++;
        }}
        return nullptr;
    }

    auto store()
    {
        auto f = File(path, u"w"_S);
        for (auto &&e : entries)
            if (e.etype == TYPE_RM_REF(e.etype)::EMPTY)
                f.write(u"\n"_S);
            else if (e.etype == TYPE_RM_REF(e.etype)::ENABLED)
                f.write(u"#. #.\n"_S.format(e.name, e.value));
            else if (e.etype == TYPE_RM_REF(e.etype)::DISABLED)
                f.write(u"; #. #.\n"_S.format(e.name, e.value));
            else if (e.etype == TYPE_RM_REF(e.etype)::COMMENT)
                f.write(e.name & u"\n"_S);
    }
};

auto cfg = Config(u"config.txt"_S);

struct CodeBlock1
{
    CodeBlock1()
    {
        cfg.enableOption(u"seedsremoved"_S);
        cfg.disableOption(u"needspeeling"_S);
        cfg.setOption(u"numberofbananas"_S, u"1024"_S);
        cfg.addOption(u"numberofstrawberries"_S, u"62000"_S);
        cfg.store();
    }
} code_block_1;


# https://www.rosettacode.org/wiki/Unique_characters_in_each_string#Python
LIST = ["1a3c52debeffd", "2b6178c97a938stf", "3ycxdb1fgxa2yz"]

print(sorted([ch for ch in set(list(''.join(LIST))) if all(w.count(ch) == 1 for w in LIST)]))
===
V LIST = [‘1a3c52debeffd’, ‘2b6178c97a938stf’, ‘3ycxdb1fgxa2yz’]

print(sorted(Set(Array(LIST.join(‘’))).filter(ch -> all(:LIST.map(w -> w.count(@ch) == 1)))))
===
auto LIST = create_array({u"1a3c52debeffd"_S, u"2b6178c97a938stf"_S, u"3ycxdb1fgxa2yz"_S});

struct CodeBlock1
{
    CodeBlock1()
    {
        print(sorted(create_set(create_array(LIST.join(u""_S))).filter([](const auto &ch){return all_map(::LIST, [&ch](const auto &w){return w.count(ch) == 1;});})));
    }
} code_block_1;


# https://www.rosettacode.org/wiki/Unique_characters
import collections

d = collections.defaultdict(int) # Char
for s in ["133252abcdeeffd", "a6789798st", "yxcdfgxcyz"]:
    for c in s:
        d[c] += 1

for k in sorted(d.keys()):
    if d[k] == 1:
        print(k, end = '')
===
V d = DefaultDict[Char, Int]()
L(s) [‘133252abcdeeffd’, ‘a6789798st’, ‘yxcdfgxcyz’]
   L(c) s
      d[c]++

L(k) sorted(d.keys())
   I d[k] == 1
      print(k, end' ‘’)
===
auto d = DefaultDict<Char, int>();

struct CodeBlock1
{
    CodeBlock1()
    {
        for (auto &&s : create_array({u"133252abcdeeffd"_S, u"a6789798st"_S, u"yxcdfgxcyz"_S}))
            for (auto &&c : s)
                d[c]++;

        for (auto &&k : sorted(d.keys()))
            if (d[k] == 1)
                print(k, u""_S);
    }
} code_block_1;