# https://www.rosettacode.org/wiki/Fraction_reduction#Python
def indexOf(haystack, needle):
    idx = 0
    for straw in haystack:
        if straw == needle:
            return idx
        else:
            idx += 1
    return -1

def getDigits(n, le, digits : list):
    while n > 0:
        r = n % 10
        if r == 0 or indexOf(digits, r) >= 0:
            return False
        le -= 1
        digits[le] = r
        n = int(n / 10)
    return True

def removeDigit(digits, le, idx):
    pows = [1, 10, 100, 1000, 10000]
    sum = 0
    pow = pows[le - 2]
    i = 0
    while i < le:
        if i == idx:
            i += 1
            continue
        sum = sum + digits[i] * pow
        pow = int(pow / 10)
        i += 1
    return sum

lims = [ [ 12, 97 ], [ 123, 986 ], [ 1234, 9875 ], [ 12345, 98764 ] ]
count = [0] * 5
omitted = [[0] * 10 for j in range(5)]

i = 0
while i < len(lims):
    n = lims[i][0]
    while n < lims[i][1]:
        nDigits = [0] * (i + 2)
        nOk = getDigits(n, i + 2, nDigits)
        if not nOk:
            n += 1
            continue
        d = n + 1
        while d <= lims[i][1] + 1:
            dDigits = [0] * (i + 2)
            dOk = getDigits(d, i + 2, dDigits)
            if not dOk:
                d += 1
                continue
            nix = 0
            while nix < len(nDigits):
                digit = nDigits[nix]
                dix = indexOf(dDigits, digit)
                if dix >= 0:
                    rn = removeDigit(nDigits, i + 2, nix)
                    rd = removeDigit(dDigits, i + 2, dix)
                    if (1.0 * n / d) == (1.0 * rn / rd):
                        count[i] += 1
                        omitted[i][digit] += 1
                        if count[i] <= 12:
                            print("%d/%d = %d/%d by omitting %d's" % (n, d, rn, rd, digit))
                nix += 1
            d += 1
        n += 1
    print()
    i += 1

i = 2
while i <= 5:
    print("There are %d %d-digit fractions of which:" % (count[i - 2], i))
    j = 1
    while j <= 9:
        if omitted[i - 2][j] == 0:
            j += 1
            continue
        print("%6s have %d's omitted" % (omitted[i - 2][j], j))
        j += 1
    print()
    i += 1
===
F indexOf(haystack, needle)
   V idx = 0
   L(straw) haystack
      I straw == needle
         R idx
      E
         idx++
   R -1

F getDigits(=n, =le, &digits)
   L n > 0
      V r = n % 10
      I r == 0 | indexOf(digits, r) >= 0
         R 0B
      le--
      digits[le] = r
      n = Int(n / 10)
   R 1B

F removeDigit(digits, le, idx)
   V pows = [1, 10, 100, 1000, 10000]
   V sum = 0
   V pow = pows[le - 2]
   V i = 0
   L i < le
      I i == idx
         i++
         L.continue
      sum = sum + digits[i] * pow
      pow = Int(pow / 10)
      i++
   R sum
V lims = [[12, 97], [123, 986], [1234, 9875], [12345, 98764]]
V count = [0] * 5
V omitted = [[0] * 10] * 5
V i = 0
L i < lims.len
   V n = lims[i][0]
   L n < lims[i][1]
      V nDigits = [0] * (i + 2)
      V nOk = getDigits(n, i + 2, &nDigits)
      I !nOk
         n++
         L.continue
      V d = n + 1
      L d <= lims[i][1] + 1
         V dDigits = [0] * (i + 2)
         V dOk = getDigits(d, i + 2, &dDigits)
         I !dOk
            d++
            L.continue
         V nix = 0
         L nix < nDigits.len
            V digit = nDigits[nix]
            V dix = indexOf(dDigits, digit)
            I dix >= 0
               V rn = removeDigit(nDigits, i + 2, nix)
               V rd = removeDigit(dDigits, i + 2, dix)
               I (1.0 * n / d) == (1.0 * rn / rd)
                  count[i]++
                  omitted[i][digit]++
                  I count[i] <= 12
                     print(‘#./#. = #./#. by omitting #.'s’.format(n, d, rn, rd, digit))
            nix++
         d++
      n++
   print()
   i++
i = 2
L i <= 5
   print(‘There are #. #.-digit fractions of which:’.format(count[i - 2], i))
   V j = 1
   L j <= 9
      I omitted[i - 2][j] == 0
         j++
         L.continue
      print(‘#6 have #.'s omitted’.format(omitted[i - 2][j], j))
      j++
   print()
   i++
===
template <typename T1, typename T2> auto indexOf(const T1 &haystack, const T2 &needle)
{
    auto idx = 0;
    for (auto &&straw : haystack)
        if (straw == needle)
            return idx;
        else
            idx++;
    return -1;
}

template <typename T1, typename T2, typename T3> auto getDigits(T1 n, T2 le, T3 &digits)
{
    while (n > 0) {
        auto r = mod(n, 10);
        if (r == 0 || indexOf(digits, r) >= 0)
            return false;
        le--;
        digits.set(le, r);
        n = to_int(n / 10.0);
    }
    return true;
}

template <typename T1, typename T2, typename T3> auto removeDigit(const T1 &digits, const T2 &le, const T3 &idx)
{
    auto pows = create_array({1, 10, 100, 1000, 10000});
    auto sum = 0;
    auto pow = pows[le - 2];
    auto i = 0;
    while (i < le) {
        if (i == idx) {
            i++;
            continue;
        }
        sum = sum + digits[i] * pow;
        pow = to_int(pow / 10.0);
        i++;
    }
    return sum;
}
auto lims = create_array({create_array({12, 97}), create_array({123, 986}), create_array({1234, 9875}), create_array({12345, 98764})});
auto count = create_array({0}) * 5;
auto omitted = create_array({create_array({0}) * 10}) * 5;
auto i = 0;

struct CodeBlock1
{
    CodeBlock1()
    {
        while (i < lims.len()) {
            auto n = _get<0>(lims[i]);
            while (n < _get<1>(lims[i])) {
                auto nDigits = create_array({0}) * (i + 2);
                auto nOk = getDigits(n, i + 2, nDigits);
                if (!nOk) {
                    n++;
                    continue;
                }
                auto d = n + 1;
                while (d <= _get<1>(lims[i]) + 1) {
                    auto dDigits = create_array({0}) * (i + 2);
                    auto dOk = getDigits(d, i + 2, dDigits);
                    if (!dOk) {
                        d++;
                        continue;
                    }
                    auto nix = 0;
                    while (nix < nDigits.len()) {
                        auto digit = nDigits[nix];
                        auto dix = indexOf(dDigits, digit);
                        if (dix >= 0) {
                            auto rn = removeDigit(nDigits, i + 2, nix);
                            auto rd = removeDigit(dDigits, i + 2, dix);
                            if ((1.0 * n / d) == (1.0 * rn / rd)) {
                                count[i]++;
                                omitted[i][digit]++;
                                if (count[i] <= 12)
                                    print(u"#./#. = #./#. by omitting #.'s"_S.format(n, d, rn, rd, digit));
                            }
                        }
                        nix++;
                    }
                    d++;
                }
                n++;
            }
            print();
            i++;
        }
        i = 2;
        while (i <= 5) {
            print(u"There are #. #.-digit fractions of which:"_S.format(count[i - 2], i));
            auto j = 1;
            while (j <= 9) {
                if (omitted[i - 2][j] == 0) {
                    j++;
                    continue;
                }
                print(u"#6 have #.'s omitted"_S.format(omitted[i - 2][j], j));
                j++;
            }
            print();
            i++;
        }
    }
} code_block_1;