# https://www.rosettacode.org/wiki/Old_lady_swallowed_a_fly#Python
animals = [
        ("fly", "I don't know why she swallowed a fly, perhaps she'll die."),
        ("spider", "It wiggled and jiggled and tickled inside her."),
        ("bird", "How absurd, to swallow a bird."),
        ("cat", "Imagine that, she swallowed a cat."),
        ("dog", "What a hog, to swallow a dog."),
        ("goat", "She just opened her throat and swallowed a goat."),
        ("cow", "I don't know how she swallowed a cow."),
        ("horse", "She's dead, of course.")]

for i, animal_lyric in enumerate(animals):
    (animal, lyric) = animal_lyric
    print("There was an old lady who swallowed a %s.\n%s" % (animal, lyric))

    if animal == "horse": break

    for predator, prey in zip(animals[i:0:-1], animals[i-1::-1]):
        print("\tShe swallowed the %s to catch the %s" % (predator[0], prey[0]))

    if animal != "fly": print(animals[0][1])  # fly lyric
    print()  # new line
===
V animals = [(‘fly’, ‘I don't know why she swallowed a fly, perhaps she'll die.’), (‘spider’, ‘It wiggled and jiggled and tickled inside her.’), (‘bird’, ‘How absurd, to swallow a bird.’), (‘cat’, ‘Imagine that, she swallowed a cat.’), (‘dog’, ‘What a hog, to swallow a dog.’), (‘goat’, ‘She just opened her throat and swallowed a goat.’), (‘cow’, ‘I don't know how she swallowed a cow.’), (‘horse’, ‘She's dead, of course.’)]

L(animal_lyric) animals
   V i = L.index
   V (animal, lyric) = animal_lyric
   print("There was an old lady who swallowed a #..\n#.".format(animal, lyric))

   I animal == ‘horse’
      L.break

   L(predator, prey) zip(animals[(i .< 0).step(-1)], animals[(i - 1 ..).step(-1)])
      print("\tShe swallowed the #. to catch the #.".format(predator[0], prey[0]))

   I animal != ‘fly’
      print(animals[0][1])
   print()
===
auto animals = create_array({make_tuple(u"fly"_S, u"I don't know why she swallowed a fly, perhaps she'll die."_S), make_tuple(u"spider"_S, u"It wiggled and jiggled and tickled inside her."_S), make_tuple(u"bird"_S, u"How absurd, to swallow a bird."_S), make_tuple(u"cat"_S, u"Imagine that, she swallowed a cat."_S), make_tuple(u"dog"_S, u"What a hog, to swallow a dog."_S), make_tuple(u"goat"_S, u"She just opened her throat and swallowed a goat."_S), make_tuple(u"cow"_S, u"I don't know how she swallowed a cow."_S), make_tuple(u"horse"_S, u"She's dead, of course."_S)});

struct CodeBlock1
{
    CodeBlock1()
    {
        {int Lindex = 0;

        for (auto &&animal_lyric : animals) {
            auto i = Lindex;
            auto [animal, lyric] = animal_lyric;
            print(u"There was an old lady who swallowed a #..\n#."_S.format(animal, lyric));

            if (animal == u"horse")
                break;

            for (auto &&[predator, prey] : zip(animals[range_el(i, 0).step(-1)], animals[range_ei(i - 1).step(-1)]))
                print(u"\tShe swallowed the #. to catch the #."_S.format(_get<0>(predator), _get<0>(prey)));

            if (animal != u"fly")
                print(_get<1>(_get<0>(animals)));
            print();
            Lindex++;
        }}
    }
} code_block_1;


# https://www.rosettacode.org/wiki/Old_Russian_measure_of_length#Python
import sys

unit2mult = {"arshin": 0.7112, "centimeter": 0.01,     "diuym":   0.0254,
             "fut":    0.3048, "kilometer":  1000.0,   "liniya":  0.00254,
             "meter":  1.0,    "milia":      7467.6,   "piad":    0.1778,
             "sazhen": 2.1336, "tochka":     0.000254, "vershok": 0.04445,
             "versta": 1066.8}

if __name__ == '__main__':
    assert len(sys.argv) == 3, 'ERROR. Need two arguments - number then units'
    value : float
    try:
        value = float(sys.argv[1])
    except:
        sys.exit('ERROR. First argument must be a (float) number')
    unit = sys.argv[2]
    assert unit in unit2mult, ( 'ERROR. Only know the following units: '
                                + ' '.join(unit2mult.keys()) )

    print("%g %s to:" % (value, unit))
    for unt, mlt in sorted(unit2mult.items()):
        print('  %10s: %g' % (unt, value * unit2mult[unit] / mlt))
===
V unit2mult = [‘arshin’ = 0.7112, ‘centimeter’ = 0.01, ‘diuym’ = 0.0254, ‘fut’ = 0.3048, ‘kilometer’ = 1000.0, ‘liniya’ = 0.00254, ‘meter’ = 1.0, ‘milia’ = 7467.6, ‘piad’ = 0.1778, ‘sazhen’ = 2.1336, ‘tochka’ = 0.000254, ‘vershok’ = 0.04445, ‘versta’ = 1066.8]

:start:
assert(:argv.len == 3, ‘ERROR. Need two arguments - number then units’)
Float value
X.try
   value = Float(:argv[1])
X.catch
   exit(‘ERROR. First argument must be a (float) number’)
V unit = :argv[2]
assert(unit C unit2mult, (‘ERROR. Only know the following units: ’unit2mult.keys().join(‘ ’)))

print(‘#. #. to:’.format(value, unit))
L(unt, mlt) sorted(unit2mult.items())
   print(‘  #10: #.’.format(unt, value * unit2mult[unit] / mlt))
===
Array<String> argv;

auto unit2mult = create_dict(dict_of(u"arshin"_S, 0.7112)(u"centimeter"_S, 0.01)(u"diuym"_S, 0.0254)(u"fut"_S, 0.3048)(u"kilometer"_S, 1000.0)(u"liniya"_S, 0.00254)(u"meter"_S, 1.0)(u"milia"_S, 7467.6)(u"piad"_S, 0.1778)(u"sazhen"_S, 2.1336)(u"tochka"_S, 0.000254)(u"vershok"_S, 0.04445)(u"versta"_S, 1066.8));

int MAIN_WITH_ARGV()
{
    INIT_ARGV();

    assert(::argv.len() == 3, u"ERROR. Need two arguments - number then units"_S);
    double value;
    try
    {
        value = to_float(_get<1>(::argv));
    }
    catch (...)
    {
        exit(u"ERROR. First argument must be a (float) number"_S);
    }
    auto unit = _get<2>(::argv);
    assert(in(unit, unit2mult), (u"ERROR. Only know the following units: "_S & unit2mult.keys().join(u" "_S)));

    print(u"#. #. to:"_S.format(value, unit));
    for (auto &&[unt, mlt] : sorted(unit2mult.items()))
        print(u"  #10: #."_S.format(unt, value * unit2mult[unit] / mlt));
}


# https://www.rosettacode.org/wiki/One_of_n_lines_in_a_file#Python
import random

def one_of_n(lines): # lines is any iterable
    choice = 0
    for i, line in enumerate(lines):
        if random.randrange(i+1) == 0:
            choice = line
    return choice

def one_of_n_test(n=10, trials=1000000):
    bins = [0] * n
    if n != 0:
        for i in range(trials):
            bins[one_of_n(range(n))] += 1
    return bins

print(one_of_n_test())
===
F one_of_n(lines)
   V choice = 0
   L(line) lines
      V i = L.index
      I random:(i + 1) == 0
         choice = line
   R choice

F one_of_n_test(n = 10, trials = 1000000)
   V bins = [0] * n
   I n != 0
      L(i) 0 .< trials
         bins[one_of_n(0 .< n)]++
   R bins

print(one_of_n_test())
===
template <typename T1> auto one_of_n(const T1 &lines)
{
    auto choice = 0;
    {int Lindex = 0;
    for (auto &&line : lines) {
        auto i = Lindex;
        if (randomns::_(i + 1) == 0)
            choice = line;
        Lindex++;
    }}
    return choice;
}

template <typename T1 = decltype(10), typename T2 = decltype(1000000)> auto one_of_n_test(const T1 &n = 10, const T2 &trials = 1000000)
{
    auto bins = create_array({0}) * n;
    if (n != 0)
        for (auto i : range_el(0, trials))
            bins[one_of_n(range_el(0, n))]++;
    return bins;
}

struct CodeBlock1
{
    CodeBlock1()
    {
        print(one_of_n_test());
    }
} code_block_1;


# https://www.rosettacode.org/wiki/One-dimensional_cellular_automata#Python
gen = [int(ch == '#') for ch in '_###_##_#_#_#_#__#__']
for n in range(10):
    print(''.join(('#' if cell != 0 else '_') for cell in gen))
    gen = [0] + gen + [0]
    gen = [int(sum(gen[m:m+3]) == 2) for m in range(len(gen)-2)]
===
V gen = ‘_###_##_#_#_#_#__#__’.map(ch -> Int(ch == ‘#’))
L(n) 10
   print(gen.map(cell -> (I cell != 0 {‘#’} E ‘_’)).join(‘’))
   gen = [0] [+] gen [+] [0]
   gen = (0 .< gen.len - 2).map(m -> Int(sum(:gen[m .< m + 3]) == 2))
===
auto gen = u"_###_##_#_#_#_#__#__"_S.map([](const auto &ch){return to_int(ch == u'#');});

struct CodeBlock1
{
    CodeBlock1()
    {
        for (int n = 0; n < 10; n++) {
            print(gen.map([](const auto &cell){return (cell != 0 ? u'#'_C : u'_'_C);}).join(u""_S));
            gen = create_array({0}) + gen + create_array({0});
            gen = range_el(0, gen.len() - 2).map([](const auto &m){return to_int(sum(::gen[range_el(m, m + 3)]) == 2);});
        }
    }
} code_block_1;


# https://www.rosettacode.org/wiki/Order_disjoint_list_items#Python
from typing import List

def order_disjoint_list_items(data : list, items):
    #Modifies data list in-place
    itemindices : List[int] = []
    for item in set(items):
        itemcount = items.count(item)
        #assert data.count(item) >= itemcount, 'More of %r than in data' % item
        lastindex = [-1]
        for i in range(itemcount):
            lastindex.append(data.index(item, lastindex[-1] + 1))
        itemindices += lastindex[1:]
    itemindices.sort()
    for index, item in zip(itemindices, items):
        data[index] = item

def slist(s):
    return list(map(str, list(s)))

def tostring(l):
    return "'"+' '.join(l)+"'"

for data, items in [('the cat sat on the mat'.split(' '), ('mat cat').split(' ')),
                    ('the cat sat on the mat'.split(' '), ('cat mat').split(' ')),
                    (slist('ABCABCABC'), slist('CACA')),
                    (slist('ABCABDABE'), slist('EADA')),
                    (slist('AB'), slist('B')),
                    (slist('AB'), slist('BA')),
                    (slist('ABBA'), slist('BA')),
                    (slist(''), slist('')),
                    (slist('A'), slist('A')),
                    (slist('AB'), slist('')),
                    (slist('ABBA'), slist('AB')),
                    (slist('ABAB'), slist('AB')),
                    (slist('ABAB'), slist('BABA')),
                    (slist('ABCCBA'), slist('ACAC')),
                    (slist('ABCCBA'), slist('CACA')),
                   ]:
    print('Data M: %-24s Order N: %-9s' % (tostring(data), tostring(items)), end=' ')
    order_disjoint_list_items(data, items)
    print("-> M' %s" % tostring(data))
===
F order_disjoint_list_items(&data, items)
   [Int] itemindices
   L(item) Set(items)
      V itemcount = items.count(item)
      V lastindex = [-1]
      L(i) 0 .< itemcount
         lastindex.append(data.index(item, lastindex.last + 1))
      itemindices [+]= lastindex[1..]
   itemindices.sort()
   L(index, item) zip(itemindices, items)
      data[index] = item

F slist(s)
   R Array(s).map(String)

F tostring(l)
   R ‘'’l.join(‘ ’)‘'’

L(data, items) [(‘the cat sat on the mat’.split(‘ ’), (‘mat cat’).split(‘ ’)), (‘the cat sat on the mat’.split(‘ ’), (‘cat mat’).split(‘ ’)), (slist(‘ABCABCABC’), slist(‘CACA’)), (slist(‘ABCABDABE’), slist(‘EADA’)), (slist(‘AB’), slist(‘B’)), (slist(‘AB’), slist(‘BA’)), (slist(‘ABBA’), slist(‘BA’)), (slist(‘’), slist(‘’)), (slist(‘A’), slist(‘A’)), (slist(‘AB’), slist(‘’)), (slist(‘ABBA’), slist(‘AB’)), (slist(‘ABAB’), slist(‘AB’)), (slist(‘ABAB’), slist(‘BABA’)), (slist(‘ABCCBA’), slist(‘ACAC’)), (slist(‘ABCCBA’), slist(‘CACA’))]
   print(‘Data M: #<24 Order N: #<9’.format(tostring(data), tostring(items)), end' ‘ ’)
   order_disjoint_list_items(&data, items)
   print(‘-> M' #.’.format(tostring(data)))
===
template <typename T1, typename T2> auto order_disjoint_list_items(T1 &data, const T2 &items)
{
    Array<int> itemindices;
    for (auto &&item : create_set(items)) {
        auto itemcount = items.count(item);
        auto lastindex = create_array({-1});
        for (auto i : range_el(0, itemcount))
            lastindex.append(data.index(item, lastindex.last() + 1));
        itemindices.append(lastindex[range_ei(1)]);
    }
    itemindices.sort();
    for (auto &&[index, item] : zip(itemindices, items))
        data.set(index, item);
}

template <typename T1> auto slist(const T1 &s)
{
    return create_array(s).map([](const auto &x){return String(x);});
}

template <typename T1> auto tostring(const T1 &l)
{
    return u"'"_S & l.join(u" "_S) & u"'"_S;
}

struct CodeBlock1
{
    CodeBlock1()
    {
        for (auto &&[data, items] : create_array({make_tuple(u"the cat sat on the mat"_S.split(u" "_S), (u"mat cat"_S).split(u" "_S)), make_tuple(u"the cat sat on the mat"_S.split(u" "_S), (u"cat mat"_S).split(u" "_S)), make_tuple(slist(u"ABCABCABC"_S), slist(u"CACA"_S)), make_tuple(slist(u"ABCABDABE"_S), slist(u"EADA"_S)), make_tuple(slist(u"AB"_S), slist(u"B"_S)), make_tuple(slist(u"AB"_S), slist(u"BA"_S)), make_tuple(slist(u"ABBA"_S), slist(u"BA"_S)), make_tuple(slist(u""_S), slist(u""_S)), make_tuple(slist(u"A"_S), slist(u"A"_S)), make_tuple(slist(u"AB"_S), slist(u""_S)), make_tuple(slist(u"ABBA"_S), slist(u"AB"_S)), make_tuple(slist(u"ABAB"_S), slist(u"AB"_S)), make_tuple(slist(u"ABAB"_S), slist(u"BABA"_S)), make_tuple(slist(u"ABCCBA"_S), slist(u"ACAC"_S)), make_tuple(slist(u"ABCCBA"_S), slist(u"CACA"_S))})) {
            print(u"Data M: #<24 Order N: #<9"_S.format(tostring(data), tostring(items)), u" "_S);
            order_disjoint_list_items(data, items);
            print(u"-> M' #."_S.format(tostring(data)));
        }
    }
} code_block_1;


# https://www.rosettacode.org/wiki/Ordered_words#Python
words = open('unixdict.txt').read().split("\n")
ordered = [word for word in words if word==''.join(sorted(word))]
maxlen = len(max(ordered, key = lambda w: len(w)))
maxorderedwords = [word for word in ordered if len(word) == maxlen]
print(' '.join(maxorderedwords))
===
V words = File(‘unixdict.txt’).read().split("\n")
V ordered = words.filter(word -> word == sorted(word))
V maxlen = max(ordered, key' w -> w.len).len
V maxorderedwords = ordered.filter(word -> word.len == :maxlen)
print(maxorderedwords.join(‘ ’))
===
auto words = File(u"unixdict.txt"_S).read().split(u"\n"_S);
auto ordered = words.filter([](const auto &word){return word == sorted(word);});
auto maxlen = max_with_key(ordered, [](const auto &w){return w.len();}).len();
auto maxorderedwords = ordered.filter([](const auto &word){return word.len() == ::maxlen;});

struct CodeBlock1
{
    CodeBlock1()
    {
        print(maxorderedwords.join(u" "_S));
    }
} code_block_1;


# https://www.rosettacode.org/wiki/OpenWebNet_password#Nim
from _11l import *

def ownCalcPass(password, nonce):
    result : UInt32
    start = True
    for c in nonce:
        if c != '0' and start:
            result = UInt32(int(password))
            start = False
        c = c
        if c == '0':
            pass
        elif c == '1':
            result = rotr32(result, 7)
        elif c == '2':
            result = rotr32(result, 4)
        elif c == '3':
            result = rotr32(result, 3)
        elif c == '4':
            result = rotl32(result, 1)
        elif c == '5':
            result = rotl32(result, 5)
        elif c == '6':
            result = rotl32(result, 12)
        elif c == '7':
            result = (result & 0x0000FF00) | result << 24 | \
                     (result & 0x00FF0000) >> 16 | (result & 0xFF000000) >> 8
        elif c == '8':
            result = result << 16 | result >> 24 | (result & 0x00FF0000) >> 8
        elif c == '9':
            result = ~result
        else:
            raise ValueError("non-digit in nonce.")
    return result

def test_passwd_calc(passwd, nonce, expected):
    res = ownCalcPass(passwd, nonce)
    m = passwd+' '+nonce+' '+str(res)+' '+str(expected)
    if res == expected:
        print('PASS '+m)
    else :
        print('FAIL '+m)

test_passwd_calc('12345', '603356072', 25280520)
test_passwd_calc('12345', '410501656', 119537670)
test_passwd_calc('12345', '630292165', 4269684735)
===
F ownCalcPass(password, nonce)
   UInt32 result
   V start = 1B
   L(=c) nonce
      I c != ‘0’ & start
         result = UInt32(Int(password))
         start = 0B
      S c
         ‘0’
         {
         }
         ‘1’
            result = rotr(result, 7)
         ‘2’
            result = rotr(result, 4)
         ‘3’
            result = rotr(result, 3)
         ‘4’
            result = rotl(result, 1)
         ‘5’
            result = rotl(result, 5)
         ‘6’
            result = rotl(result, 12)
         ‘7’
            result = (result [&] 0000'FF00) [|] result << 24 [|] (result [&] 00FF'0000) >> 16 [|] (result [&] FF00'0000) >> 8
         ‘8’
            result = result << 16 [|] result >> 24 [|] (result [&] 00FF'0000) >> 8
         ‘9’
            result = (-)result
         E
            X ValueError(‘non-digit in nonce.’)
   R result

F test_passwd_calc(passwd, nonce, expected)
   V res = ownCalcPass(passwd, nonce)
   V m = passwd‘ ’nonce‘ ’String(res)‘ ’String(expected)
   I res == expected
      print(‘PASS ’m)
   E
      print(‘FAIL ’m)

test_passwd_calc(‘12345’, ‘603356072’, 25280520)
test_passwd_calc(‘12345’, ‘410501656’, 119537670)
test_passwd_calc(‘12345’, ‘630292165’, 4269684735)
===
template <typename T1, typename T2> auto ownCalcPass(const T1 &password, const T2 &nonce)
{
    uint32_t result;
    auto start = true;
    for (auto c : nonce) {
        if (c != u'0' && start) {
            result = to_uint32(to_int(password));
            start = false;
        }
        switch (c)
        {
        case u'0':
            break;
        case u'1':
            result = rotr(result, 7);
            break;
        case u'2':
            result = rotr(result, 4);
            break;
        case u'3':
            result = rotr(result, 3);
            break;
        case u'4':
            result = rotl(result, 1);
            break;
        case u'5':
            result = rotl(result, 5);
            break;
        case u'6':
            result = rotl(result, 12);
            break;
        case u'7':
            result = (result & 0x0000'FF00) | result << 24 | (result & 0x00FF'0000) >> 16 | (result & 0xFF00'0000) >> 8;
            break;
        case u'8':
            result = result << 16 | result >> 24 | (result & 0x00FF'0000) >> 8;
            break;
        case u'9':
            result = ~result;
            break;
        default:
            throw ValueError(u"non-digit in nonce."_S);
            break;
        }
    }
    return result;
}

template <typename T1, typename T2, typename T3> auto test_passwd_calc(const T1 &passwd, const T2 &nonce, const T3 &expected)
{
    auto res = ownCalcPass(passwd, nonce);
    auto m = passwd & u" "_S & nonce & u" "_S & String(res) & u" "_S & String(expected);
    if (res == expected)
        print(u"PASS "_S & m);
    else
        print(u"FAIL "_S & m);
}

struct CodeBlock1
{
    CodeBlock1()
    {
        test_passwd_calc(u"12345"_S, u"603356072"_S, 25280520);
        test_passwd_calc(u"12345"_S, u"410501656"_S, 119537670);
        test_passwd_calc(u"12345"_S, u"630292165"_S, 4269684735);
    }
} code_block_1;


# https://www.rosettacode.org/wiki/Orbital_elements#Python
import math

class Vector:
    x : float
    y : float
    z : float

    def __init__(self, x, y, z):
        self.x = x
        self.y = y
        self.z = z

    def __add__(self, other):
        return Vector(self.x + other.x, self.y + other.y, self.z + other.z)

    def __mul__(self, other):
        return Vector(self.x * other, self.y * other, self.z * other)

    def __truediv__(self, other):
        return Vector(self.x / other, self.y / other, self.z / other)

    def __str__(self):
        return '({x}, {y}, {z})'.format(x=self.x, y=self.y, z=self.z)

    def abs(self):
        return math.sqrt(self.x*self.x + self.y*self.y + self.z*self.z)

def mulAdd(v1, x1, v2, x2):
    return v1 * x1 + v2 * x2

def rotate(i, j, alpha):
    return [mulAdd(i,math.cos(alpha),j,math.sin(alpha)), mulAdd(i,-math.sin(alpha),j,math.cos(alpha))]

def orbitalStateVectors(semimajorAxis, eccentricity, inclination, longitudeOfAscendingNode, argumentOfPeriapsis, trueAnomaly):
    i = Vector(1, 0, 0)
    j = Vector(0, 1, 0)
    k = Vector(0, 0, 1)

    p = rotate(i, j, longitudeOfAscendingNode)
    i = p[0]
    j = p[1]
    p = rotate(j, k, inclination)
    j = p[0]
    p  =rotate(i, j, argumentOfPeriapsis)
    i = p[0]
    j = p[1]

    l = 2.0 if (eccentricity == 1.0) else 1.0 - eccentricity * eccentricity
    l *= semimajorAxis
    c = math.cos(trueAnomaly)
    s = math.sin(trueAnomaly)
    r = 1 / (1.0 + eccentricity * c)
    rprime = s * r * r / l
    position = mulAdd(i, c, j, s) * r
    speed = mulAdd(i, rprime * c - r * s, j, rprime * s + r * c)
    speed = speed / speed.abs()
    speed = speed * math.sqrt(2.0 / r - 1.0 / semimajorAxis)

    return [position, speed]

ps = orbitalStateVectors(1.0, 0.1, 0.0, 355.0 / (113.0 * 6.0), 0.0, 0.0)
print("Position :", ps[0])
print("Speed    :", ps[1])
===
T Vector
   Float x
   Float y
   Float z

   F (x, y, z)
      .x = x
      .y = y
      .z = z

   F +(other)
      R Vector(.x + other.x, .y + other.y, .z + other.z)

   F *(other)
      R Vector(.x * other, .y * other, .z * other)

   F /(other)
      R Vector(.x / other, .y / other, .z / other)

   F String()
      R ‘(#., #., #.)’.format(.x, .y, .z)

   F abs()
      R sqrt(.x * .x + .y * .y + .z * .z)

F mulAdd(v1, x1, v2, x2)
   R v1 * x1 + v2 * x2

F rotate(i, j, alpha)
   R [mulAdd(i, cos(alpha), j, sin(alpha)), mulAdd(i, -sin(alpha), j, cos(alpha))]

F orbitalStateVectors(semimajorAxis, eccentricity, inclination, longitudeOfAscendingNode, argumentOfPeriapsis, trueAnomaly)
   V i = Vector(1, 0, 0)
   V j = Vector(0, 1, 0)
   V k = Vector(0, 0, 1)

   V p = rotate(i, j, longitudeOfAscendingNode)
   i = p[0]
   j = p[1]
   p = rotate(j, k, inclination)
   j = p[0]
   p = rotate(i, j, argumentOfPeriapsis)
   i = p[0]
   j = p[1]

   V l = I (eccentricity == 1.0) {2.0} E 1.0 - eccentricity * eccentricity
   l *= semimajorAxis
   V c = cos(trueAnomaly)
   V s = sin(trueAnomaly)
   V r = 1 / (1.0 + eccentricity * c)
   V rprime = s * r * r / l
   V position = mulAdd(i, c, j, s) * r
   V speed = mulAdd(i, rprime * c - r * s, j, rprime * s + r * c)
   speed = speed / speed.abs()
   speed = speed * sqrt(2.0 / r - 1.0 / semimajorAxis)

   R [position, speed]

V ps = orbitalStateVectors(1.0, 0.1, 0.0, 355.0 / (113.0 * 6.0), 0.0, 0.0)
print(‘Position : ’ps[0])
print(‘Speed    : ’ps[1])
===
class Vector
{
public:
    double x;
    double y;
    double z;

    template <typename T1, typename T2, typename T3> Vector(const T1 &x, const T2 &y, const T3 &z) :
        x(x),
        y(y),
        z(z)
    {
    }

    template <typename T1> auto operator+(const T1 &other) const
    {
        return Vector(x + other.x, y + other.y, z + other.z);
    }
    template <typename Ty> auto &operator+=(const Ty &t)
    {
        *this = *this + t;
        return *this;
    }

    template <typename T1> auto operator*(const T1 &other) const
    {
        return Vector(x * other, y * other, z * other);
    }
    template <typename Ty> auto &operator*=(const Ty &t)
    {
        *this = *this * t;
        return *this;
    }

    template <typename T1> auto operator/(const T1 &other) const
    {
        return Vector(x / other, y / other, z / other);
    }
    template <typename Ty> auto &operator/=(const Ty &t)
    {
        *this = *this / t;
        return *this;
    }

    operator String() const
    {
        return u"(#., #., #.)"_S.format(x, y, z);
    }

    auto abs()
    {
        return sqrt(x * x + y * y + z * z);
    }
};

template <typename T1, typename T2, typename T3, typename T4> auto mulAdd(const T1 &v1, const T2 &x1, const T3 &v2, const T4 &x2)
{
    return v1 * x1 + v2 * x2;
}

template <typename T1, typename T2, typename T3> auto rotate(const T1 &i, const T2 &j, const T3 &alpha)
{
    return create_array({mulAdd(i, cos(alpha), j, sin(alpha)), mulAdd(i, -sin(alpha), j, cos(alpha))});
}

template <typename T1, typename T2, typename T3, typename T4, typename T5, typename T6> auto orbitalStateVectors(const T1 &semimajorAxis, const T2 &eccentricity, const T3 &inclination, const T4 &longitudeOfAscendingNode, const T5 &argumentOfPeriapsis, const T6 &trueAnomaly)
{
    auto i = Vector(1, 0, 0);
    auto j = Vector(0, 1, 0);
    auto k = Vector(0, 0, 1);

    auto p = rotate(i, j, longitudeOfAscendingNode);
    i = _get<0>(p);
    j = _get<1>(p);
    p = rotate(j, k, inclination);
    j = _get<0>(p);
    p = rotate(i, j, argumentOfPeriapsis);
    i = _get<0>(p);
    j = _get<1>(p);

    auto l = (eccentricity == 1.0) ? 2.0 : 1.0 - eccentricity * eccentricity;
    l *= semimajorAxis;
    auto c = cos(trueAnomaly);
    auto s = sin(trueAnomaly);
    auto r = 1.0 / (1.0 + eccentricity * c);
    auto rprime = s * r * r / l;
    auto position = mulAdd(i, c, j, s) * r;
    auto speed = mulAdd(i, rprime * c - r * s, j, rprime * s + r * c);
    speed = speed / speed.abs();
    speed = speed * sqrt(2.0 / r - 1.0 / semimajorAxis);

    return create_array({position, speed});
}

auto ps = orbitalStateVectors(1.0, 0.1, 0.0, 355.0 / (113.0 * 6.0), 0.0, 0.0);

struct CodeBlock1
{
    CodeBlock1()
    {
        print(u"Position : "_S & _get<0>(ps));
        print(u"Speed    : "_S & _get<1>(ps));
    }
} code_block_1;


# https://www.rosettacode.org/wiki/Order_by_pair_comparisons#Python
from functools import cmp_to_key

def user_cmp(a : str, b : str):
    return int(input("IS {:>6} <, ==, or > {:>6}  answer -1, 0 or 1:".format(a, b)))

items = 'violet red green indigo blue yellow orange'.split(' ')
ans = sorted(items, key=cmp_to_key(user_cmp))
print('\n' + ' '.join(ans))
===
F user_cmp(String a, String b)
   R Int(input(‘IS #6 <, ==, or > #6  answer -1, 0 or 1:’.format(a, b)))

V items = ‘violet red green indigo blue yellow orange’.split(‘ ’)
V ans = sorted(items, key' cmp_to_key(user_cmp))
print("\n"ans.join(‘ ’))
===
auto user_cmp(const String &a, const String &b)
{
    return to_int(input(u"IS #6 <, ==, or > #6  answer -1, 0 or 1:"_S.format(a, b)));
}

auto items = u"violet red green indigo blue yellow orange"_S.split(u" "_S);
auto ans = sorted(items, cmp_to_key(user_cmp));

struct CodeBlock1
{
    CodeBlock1()
    {
        print(u"\n"_S & ans.join(u" "_S));
    }
} code_block_1;


# https://www.rosettacode.org/wiki/Ordered_partitions#Nim
from _11l import *
import sys

def partitions(lengths):
    r : List[List[List[int]]] = []
    slices : List[Tuple[int, int]] = []
    delta = -1
    idx = 0
    for length in lengths:
        assert length >= 0, "lengths must not be negative."
        delta += length
        slices.append((idx, delta))
        idx += length

    n = sum(lengths)
    perm = list(range(1, n+1))

    while True:
        part : List[List[int]] = []
        for start, end in slices:
            s = perm[start:end+1]
            if not is_sorted(s):
                break
            part.append(s)
        else:
            r.append(part)

        if not next_permutation(perm):
            break

    return r

def toString(part):
    result = '('
    for s in part:
        if len(result) > 1:
            result += ', '
        result += '{' + ', '.join(map(str, s)) + '}'
    return result + ')'

def displayPermutations(lengths):
    print('Ordered permutations for (' + ', '.join(map(str, lengths)) + '):')
    for part in partitions(lengths):
        print(toString(part))

if __name__ == '__main__':
    if len(sys.argv) > 1:
        displayPermutations([int(arg) for arg in sys.argv[1:]])
    else:
        displayPermutations([2, 0, 2])
===
F partitions(lengths)
   [[[Int]]] r
   [(Int, Int)] slices
   V delta = -1
   V idx = 0
   L(length) lengths
      assert(length >= 0, ‘lengths must not be negative.’)
      delta += length
      slices.append((idx, delta))
      idx += length

   V n = sum(lengths)
   V perm = Array(1 .. n)

   L
      [[Int]] part
      L(start, end) slices
         V s = perm[start .< end + 1]
         I !s.is_sorted()
            L.break
         part.append(s)
      L.was_no_break
         r.append(part)

      I !perm.next_permutation()
         L.break

   R r

F toString(part)
   V result = ‘(’
   L(s) part
      I result.len > 1
         result ‘’= ‘, ’
      result ‘’= ‘{’s.map(String).join(‘, ’)‘}’
   R result‘)’

F displayPermutations(lengths)
   print(‘Ordered permutations for (’lengths.map(String).join(‘, ’)‘):’)
   L(part) partitions(lengths)
      print(toString(part))

:start:
I :argv.len > 1
   displayPermutations(:argv[1..].map(arg -> Int(arg)))
E
   displayPermutations([2, 0, 2])
===
Array<String> argv;

template <typename T1> auto partitions(const T1 &lengths)
{
    Array<Array<Array<int>>> r;
    Array<ivec2> slices;
    auto delta = -1;
    auto idx = 0;
    for (auto &&length : lengths) {
        assert(length >= 0, u"lengths must not be negative."_S);
        delta += length;
        slices.append(make_tuple(idx, delta));
        idx += length;
    }

    auto n = sum(lengths);
    auto perm = create_array(range_ee(1, n));

    while (true) {
        Array<Array<int>> part;
        for (auto &&[start, end] : slices) {
            auto s = perm[range_el(start, end + 1)];
            if (!s.is_sorted())
                goto break_;
            part.append(s);
        }
        r.append(part);
        break_:;

        if (!perm.next_permutation())
            break;
    }

    return r;
}

template <typename T1> auto toString(const T1 &part)
{
    auto result = u"("_S;
    for (auto &&s : part) {
        if (result.len() > 1)
            result &= u", "_S;
        result &= u"{"_S & s.map([](const auto &x){return String(x);}).join(u", "_S) & u"}"_S;
    }
    return result & u")"_S;
}

template <typename T1> auto displayPermutations(const T1 &lengths)
{
    print(u"Ordered permutations for ("_S & lengths.map([](const auto &x){return String(x);}).join(u", "_S) & u"):"_S);
    for (auto &&part : partitions(lengths))
        print(toString(part));
}

int MAIN_WITH_ARGV()
{
    INIT_ARGV();

    if (::argv.len() > 1)
        displayPermutations(::argv[range_ei(1)].map([](const auto &arg){return to_int(arg);}));
    else
        displayPermutations(create_array({2, 0, 2}));
}


# https://www.rosettacode.org/wiki/Odd_and_square_numbers#Python
import math
limit = 1000

for i in range(1, math.ceil(math.sqrt(limit)), 2):
    num = i * i
    if num < limit and num > 99:
        print(num, end = ' ')
===
V limit = 1000

L(i) (1 .< ceili(sqrt(limit))).step(2)
   V num = i * i
   I num < limit & num > 99
      print(num, end' ‘ ’)
===
auto limit = 1000;

struct CodeBlock1
{
    CodeBlock1()
    {
        for (auto i : range_el(1, ceili(sqrt(limit))).step(2)) {
            auto num = i * i;
            if (num < limit && num > 99)
                print(num, u" "_S);
        }
    }
} code_block_1;


# https://www.rosettacode.org/wiki/Odd_words#Python
wordSet = Set(open('unixdict.txt').read().split("\n"))

oddWordSet = set() # str

for word in wordSet:
    if len(word)>=9 and word[::2] in wordSet:
        oddWordSet.add(word[::2])

for i in sorted(list(oddWordSet)):
    print(i)
===
V wordSet = Set(File(‘unixdict.txt’).read().split("\n"))

V oddWordSet = Set[String]()

L(word) wordSet
   I word.len >= 9 & word[(0..).step(2)] C wordSet
      oddWordSet.add(word[(0..).step(2)])

L(i) sorted(Array(oddWordSet))
   print(i)
===
auto wordSet = create_set(File(u"unixdict.txt"_S).read().split(u"\n"_S));

auto oddWordSet = Set<String>();

struct CodeBlock1
{
    CodeBlock1()
    {
        for (auto &&word : wordSet)
            if (word.len() >= 9 && in(word[range_ei(0).step(2)], wordSet))
                oddWordSet.add(word[range_ei(0).step(2)]);

        for (auto &&i : sorted(create_array(oddWordSet)))
            print(i);
    }
} code_block_1;


# https://www.rosettacode.org/wiki/Own_digits_power_sum#Python
from typing import List
Int64 = int

MAX_BASE = 10
POWER_DIGIT = [[1 for _ in range(MAX_BASE)] for _ in range(MAX_BASE)]
USED_DIGITS = [0 for _ in range(MAX_BASE)]
NUMBERS : List[int] = []

def calc_num(depth, used : list):
    """ calculate the number at a given recurse depth """
    result = Int64(0)
    if depth < 3:
        return
    for i in range(1, MAX_BASE):
        if used[i] > 0:
            result += Int64(used[i]) * POWER_DIGIT[depth][i]
    if result != 0:
        (num, rnum) = (result, Int64(1))
        while rnum != 0:
            rnum = num // MAX_BASE
            used[int(num - rnum * MAX_BASE)] -= 1
            num = rnum
            depth -= 1
        if depth == 0:
            i = 1
            while i < MAX_BASE and used[i] == 0:
                i += 1
            if i >= MAX_BASE:
                NUMBERS.append(int(result))

def next_digit(dgt, depth) -> None:
    """ get next digit at the given depth """
    if depth < MAX_BASE - 1:
        for i in range(dgt, MAX_BASE):
            USED_DIGITS[dgt] += 1
            next_digit(i, depth + 1)
            USED_DIGITS[dgt] -= 1

    if dgt == 0:
        dgt = 1
    for i in range(dgt, MAX_BASE):
        USED_DIGITS[i] += 1
        calc_num(depth, USED_DIGITS[:])
        USED_DIGITS[i] -= 1

for j in range(1, MAX_BASE):
    for k in range(MAX_BASE):
        POWER_DIGIT[j][k] = POWER_DIGIT[j - 1][k] * k

next_digit(0, 0)
print(NUMBERS)
NUMBERS = list(set(NUMBERS))
NUMBERS.sort()
print('Own digits power sums for N = 3 to 9 inclusive:')
for n in NUMBERS:
    print(n)
===
V MAX_BASE = 10
V POWER_DIGIT = (0 .< MAX_BASE).map(_ -> (0 .< :MAX_BASE).map(_ -> 1))
V USED_DIGITS = (0 .< MAX_BASE).map(_ -> 0)
[Int] NUMBERS

F calc_num(=depth, &used)
   ‘ calculate the number at a given recurse depth ’
   V result = Int64(0)
   I depth < 3
      R
   L(i) 1 .< :MAX_BASE
      I used[i] > 0
         result += Int64(used[i]) * :POWER_DIGIT[depth][i]
   I result != 0
      V (num, rnum) = (result, Int64(1))
      L rnum != 0
         rnum = num I/ :MAX_BASE
         used[Int(num - rnum * :MAX_BASE)]--
         num = rnum
         depth--
      I depth == 0
         V i = 1
         L i < :MAX_BASE & used[i] == 0
            i++
         I i >= :MAX_BASE
            :NUMBERS.append(Int(result))

F next_digit(=dgt, depth) -> N
   ‘ get next digit at the given depth ’
   I depth < :MAX_BASE - 1
      L(i) dgt .< :MAX_BASE
         :USED_DIGITS[dgt]++
         next_digit(i, depth + 1)
         :USED_DIGITS[dgt]--

   I dgt == 0
      dgt = 1
   L(i) dgt .< :MAX_BASE
      :USED_DIGITS[i]++
      calc_num(depth, &copy(:USED_DIGITS))
      :USED_DIGITS[i]--

L(j) 1 .< MAX_BASE
   L(k) 0 .< MAX_BASE
      POWER_DIGIT[j][k] = POWER_DIGIT[j - 1][k] * k

next_digit(0, 0)
print(NUMBERS)
NUMBERS = Array(Set(NUMBERS))
NUMBERS.sort()
print(‘Own digits power sums for N = 3 to 9 inclusive:’)
L(n) NUMBERS
   print(n)
===
auto MAX_BASE = 10;
auto POWER_DIGIT = range_el(0, MAX_BASE).map([](const auto &_){return range_el(0, ::MAX_BASE).map([](const auto &_){return 1;});});
auto USED_DIGITS = range_el(0, MAX_BASE).map([](const auto &_){return 0;});
Array<int> NUMBERS;

template <typename T1, typename T2> auto calc_num(T1 depth, T2 &used)
{
    u" calculate the number at a given recurse depth "_S;
    auto result = to_int64(0);
    if (depth < 3)
        return;
    for (auto i : range_el(1, ::MAX_BASE))
        if (used[i] > 0)
            result += to_int64(used[i]) * ::POWER_DIGIT[depth][i];
    if (result != 0) {
        auto [num, rnum] = make_tuple(result, to_int64(1));
        while (rnum != 0) {
            rnum = idiv(num, ::MAX_BASE);
            used[to_int(num - rnum * ::MAX_BASE)]--;
            num = rnum;
            depth--;
        }
        if (depth == 0) {
            auto i = 1;
            while (i < ::MAX_BASE && used[i] == 0)
                i++;
            if (i >= ::MAX_BASE)
                ::NUMBERS.append(to_int(result));
        }
    }
}

template <typename T1, typename T2> void next_digit(T1 dgt, const T2 &depth)
{
    u" get next digit at the given depth "_S;
    if (depth < ::MAX_BASE - 1)
        for (auto i : range_el(dgt, ::MAX_BASE)) {
            ::USED_DIGITS[dgt]++;
            next_digit(i, depth + 1);
            ::USED_DIGITS[dgt]--;
        }

    if (dgt == 0)
        dgt = 1;
    for (auto i : range_el(dgt, ::MAX_BASE)) {
        ::USED_DIGITS[i]++;
        calc_num(depth, make_ref(copy(::USED_DIGITS)));
        ::USED_DIGITS[i]--;
    }
}

struct CodeBlock1
{
    CodeBlock1()
    {
        for (auto j : range_el(1, MAX_BASE))
            for (auto k : range_el(0, MAX_BASE))
                POWER_DIGIT[j].set(k, POWER_DIGIT[j - 1][k] * k);

        next_digit(0, 0);
        print(NUMBERS);
        NUMBERS = create_array(create_set(NUMBERS));
        NUMBERS.sort();
        print(u"Own digits power sums for N = 3 to 9 inclusive:"_S);
        for (auto &&n : NUMBERS)
            print(n);
    }
} code_block_1;


# https://www.rosettacode.org/wiki/Odd_squarefree_semiprimes#C.2B.2B
def odd_square_free_semiprime(n):
    if n % 2 == 0:
        return False
    count = 0
    i = 3
    while i * i <= n:
        while n % i == 0:
            count += 1
            if count > 1:
                return False
            n //= i
        i += 2
    return count == 1

print('Odd square-free semiprimes < 1000:')
count = 0
for i in range(1, 1000, 2):
    if odd_square_free_semiprime(i):
        print('%4d' % i, end = '')
        count += 1
        if count % 20 == 0:
            print()

print("\nCount:", count)
===
F odd_square_free_semiprime(=n)
   I n % 2 == 0
      R 0B
   V count = 0
   V i = 3
   L i * i <= n
      L n % i == 0
         count++
         I count > 1
            R 0B
         n I/= i
      i += 2
   R count == 1

print(‘Odd square-free semiprimes < 1000:’)
V count = 0
L(i) (1.<1000).step(2)
   I odd_square_free_semiprime(i)
      print(‘#4’.format(i), end' ‘’)
      count++
      I count % 20 == 0
         print()

print("\nCount: "count)
===
template <typename T1> auto odd_square_free_semiprime(T1 n)
{
    if (mod(n, 2) == 0)
        return false;
    auto count = 0;
    auto i = 3;
    while (i * i <= n) {
        while (mod(n, i) == 0) {
            count++;
            if (count > 1)
                return false;
            n = idiv(n, i);
        }
        i += 2;
    }
    return count == 1;
}

struct CodeBlock1
{
    CodeBlock1()
    {
        print(u"Odd square-free semiprimes < 1000:"_S);
    }
} code_block_1;

auto count = 0;

struct CodeBlock2
{
    CodeBlock2()
    {
        for (auto i : range_el(1, 1000).step(2))
            if (odd_square_free_semiprime(i)) {
                print(u"#4"_S.format(i), u""_S);
                count++;
                if (mod(count, 20) == 0)
                    print();
            }

        print(u"\nCount: "_S & count);
    }
} code_block_2;