# https://www.rosettacode.org/wiki/21_game#Python:_Original.2C_with_output
import random

def select_count(game_count):
    '''selects a random number if the game_count is less than 18. otherwise chooses the winning number'''
    t : int
    if game_count<18:
        t = random.randint(1,3)
    else:
        t = 21-game_count
    print("The computer chooses {}".format(t))
    return t

def request_count():
    '''request user input between 1,2 and 3. It will continue till either quit(q) or one of those numbers is requested.'''
    t=""
    while True:
        try:
            t = input('Your choice 1 to 3 :')
            if int(t) in [1,2,3]:
                return int(t)
            else:
                print("Out of range, try again")
        except:
            if t=="q":
                return 0
            else:
                print("Invalid Entry, try again")

def start():
    game_count=0
    print("Enter q to quit at any time.\nThe computer will choose first.\nRunning total is now {}".format(game_count))
    roundno=1
    while True:
        print("\nROUND {}: \n".format(roundno))
        t = select_count(game_count)
        game_count = game_count+t
        print("Running total is now {}\n".format(game_count))
        if game_count>=21:
            print("So, commiserations, the computer has won!")
            return 0
        t = request_count()
        if t == 0:
            print('OK,quitting the game')
            return -1
        game_count = game_count+t
        print("Running total is now {}\n".format(game_count))
        if game_count>=21:
            print("So, congratulations, you've won!")
            return 1
        roundno+=1

c=0
m=0
while True:
    o = start()
    if o==-1:
        break
    else:
        c+=1 if o==0 else 0
        m+=1 if o==1 else 0
    print("Computer wins {0} game, human wins {1} games".format(c,m))
    t = input("Another game?(press y to continue):")
    if t != "y":
        break
===
F select_count(game_count)
   ‘selects a random number if the game_count is less than 18. otherwise chooses the winning number’
   Int t
   I game_count < 18
      t = random:(1 .. 3)
   E
      t = 21 - game_count
   print(‘The computer chooses #.’.format(t))
   R t

F request_count()
   ‘request user input between 1,2 and 3. It will continue till either quit(q) or one of those numbers is requested.’
   V t = ‘’
   L
      X.try
         t = input(‘Your choice 1 to 3 :’)
         I Int(t) C [1, 2, 3]
            R Int(t)
         E
            print(‘Out of range, try again’)
      X.catch
         I t == ‘q’
            R 0
         E
            print(‘Invalid Entry, try again’)

F start()
   V game_count = 0
   print("Enter q to quit at any time.\nThe computer will choose first.\nRunning total is now #.".format(game_count))
   V roundno = 1
   L
      print("\nROUND #.: \n".format(roundno))
      V t = select_count(game_count)
      game_count = game_count + t
      print("Running total is now #.\n".format(game_count))
      I game_count >= 21
         print(‘So, commiserations, the computer has won!’)
         R 0
      t = request_count()
      I t == 0
         print(‘OK,quitting the game’)
         R -1
      game_count = game_count + t
      print("Running total is now #.\n".format(game_count))
      I game_count >= 21
         print(‘So, congratulations, you've won!’)
         R 1
      roundno++

V c = 0
V m = 0
L
   V o = start()
   I o == -1
      L.break
   E
      c += I o == 0 {1} E 0
      m += I o == 1 {1} E 0
   print(‘Computer wins #. game, human wins #. games’.format(c, m))
   V t = input(‘Another game?(press y to continue):’)
   I t != ‘y’
      L.break
===
template <typename T1> auto select_count(const T1 &game_count)
{
    u"selects a random number if the game_count is less than 18. otherwise chooses the winning number"_S;
    int t;
    if (game_count < 18)
        t = randomns::_(range_ee(1, 3));
    else
        t = 21 - game_count;
    print(u"The computer chooses #."_S.format(t));
    return t;
}

auto request_count()
{
    u"request user input between 1,2 and 3. It will continue till either quit(q) or one of those numbers is requested."_S;
    auto t = u""_S;
    while (true) {
        try
        {
            t = input(u"Your choice 1 to 3 :"_S);
            if (in(to_int(t), create_array({1, 2, 3})))
                return to_int(t);
            else
                print(u"Out of range, try again"_S);
        }
        catch (...)
        {
            if (t == u'q')
                return 0;
            else
                print(u"Invalid Entry, try again"_S);
        }
    }
}

auto start()
{
    auto game_count = 0;
    print(u"Enter q to quit at any time.\nThe computer will choose first.\nRunning total is now #."_S.format(game_count));
    auto roundno = 1;
    while (true) {
        print(u"\nROUND #.: \n"_S.format(roundno));
        auto t = select_count(game_count);
        game_count = game_count + t;
        print(u"Running total is now #.\n"_S.format(game_count));
        if (game_count >= 21) {
            print(u"So, commiserations, the computer has won!"_S);
            return 0;
        }
        t = request_count();
        if (t == 0) {
            print(u"OK,quitting the game"_S);
            return -1;
        }
        game_count = game_count + t;
        print(u"Running total is now #.\n"_S.format(game_count));
        if (game_count >= 21) {
            print(u"So, congratulations, you've won!"_S);
            return 1;
        }
        roundno++;
    }
}

auto c = 0;
auto m = 0;

struct CodeBlock1
{
    CodeBlock1()
    {
        while (true) {
            auto o = start();
            if (o == -1)
                break;
            else {
                c += o == 0 ? 1 : 0;
                m += o == 1 ? 1 : 0;
            }
            print(u"Computer wins #. game, human wins #. games"_S.format(c, m));
            auto t = input(u"Another game?(press y to continue):"_S);
            if (t != u'y')
                break;
        }
    }
} code_block_1;


# https://www.rosettacode.org/wiki/24_game#C.2B.2B
import random
from typing import List

class Error(Exception):
    message : str
    def __init__(self, message):
        self.message = message

class RPNParse:
    def  __init__(self):
        self.stk : List[float] = []
        self.digits : List[int] = []

    def op(self, f):
        if len(self.stk) < 2:
            raise Error('Improperly written expression')
        b = self.stk.pop()
        a = self.stk.pop()
        self.stk.append(f(a, b))

    def parse(self, s):
        for c in s:
            if '0' <= c <= '9':
                self.stk.append(float(c))
                self.digits.append(int(c))
            elif c == '+':
                self.op(lambda a, b: a + b)
            elif c == '-':
                self.op(lambda a, b: a - b)
            elif c == '*':
                self.op(lambda a, b: a * b)
            elif c == '/':
                self.op(lambda a, b: a / b)
            elif c != ' ':
                raise Error('Wrong char: ' + c)

    def get_result(self):
        if len(self.stk) != 1:
            raise Error('Improperly written expression')
        return self.stk[-1]

digits : List[int] = []
print('Make 24 with the digits:', end = '')
for i in range(4):
    n = random.randint(1, 9)
    print(' ' + str(n), end = '')
    digits.append(n)
print()

parser = RPNParse()

try:
    parser.parse(input())
    r = parser.get_result()

    if sorted(digits) != sorted(parser.digits):
        print('Error: Not using the given digits')
    else:
        print('Result:', r)

        if 23.999 < r < 24.001:
            print('Good job!')
        else:
            print('Try again.')

except Error as error:
    print('Error:', error.message)
===
T Error
   String message
   F (message)
      .message = message

T RPNParse
   [Float] stk
   [Int] digits
   F ()
   {
   }

   F op(f)
      I .stk.len < 2
         X.throw Error(‘Improperly written expression’)
      V b = .stk.pop()
      V a = .stk.pop()
      .stk.append(f(a, b))

   F parse(s)
      L(c) s
         I c C ‘0’..‘9’
            .stk.append(Float(c))
            .digits.append(Int(c))
         E I c == ‘+’
            .op((a, b) -> a + b)
         E I c == ‘-’
            .op((a, b) -> a - b)
         E I c == ‘*’
            .op((a, b) -> a * b)
         E I c == ‘/’
            .op((a, b) -> a / b)
         E I c != ‘ ’
            X.throw Error(‘Wrong char: ’c)

   F get_result()
      I .stk.len != 1
         X.throw Error(‘Improperly written expression’)
      R .stk.last

[Int] digits
print(‘Make 24 with the digits:’, end' ‘’)
L(i) 4
   V n = random:(1 .. 9)
   print(‘ ’String(n), end' ‘’)
   digits.append(n)
print()

V parser = RPNParse()

X.try
   parser.parse(input())
   V r = parser.get_result()

   I sorted(digits) != sorted(parser.digits)
      print(‘Error: Not using the given digits’)
   E
      print(‘Result: ’r)

      I r C 23.999<.<24.001
         print(‘Good job!’)
      E
         print(‘Try again.’)

X.catch Error error
   print(‘Error: ’(error.message))
===
class Error
{
public:
    String message;
    template <typename T1> Error(const T1 &message) :
        message(message)
    {
    }
};

class RPNParse
{
public:
    Array<double> stk;
    Array<int> digits;
    RPNParse()
    {
    }

    template <typename T1> auto op(const T1 &f)
    {
        if (stk.len() < 2)
            throw Error(u"Improperly written expression"_S);
        auto b = stk.pop();
        auto a = stk.pop();
        stk.append(f(a, b));
    }

    template <typename T1> auto parse(const T1 &s)
    {
        for (auto &&c : s)
            if (in(c, range_ee(u'0'_C, u'9'_C))) {
                stk.append(to_float(c));
                digits.append(to_int(c));
            }
            else if (c == u'+')
                op([](const auto &a, const auto &b){return a + b;});
            else if (c == u'-')
                op([](const auto &a, const auto &b){return a - b;});
            else if (c == u'*')
                op([](const auto &a, const auto &b){return a * b;});
            else if (c == u'/')
                op([](const auto &a, const auto &b){return a / b;});
            else if (c != u' ')
                throw Error(u"Wrong char: "_S & c);
    }

    auto get_result()
    {
        if (stk.len() != 1)
            throw Error(u"Improperly written expression"_S);
        return stk.last();
    }
};

Array<int> digits;

struct CodeBlock1
{
    CodeBlock1()
    {
        print(u"Make 24 with the digits:"_S, u""_S);
        for (int i = 0; i < 4; i++) {
            auto n = randomns::_(range_ee(1, 9));
            print(u" "_S & String(n), u""_S);
            digits.append(n);
        }
        print();
    }
} code_block_1;

auto parser = RPNParse();

struct CodeBlock2
{
    CodeBlock2()
    {
        try
        {
            parser.parse(input());
            auto r = parser.get_result();

            if (sorted(digits) != sorted(parser.digits))
                print(u"Error: Not using the given digits"_S);
            else {
                print(u"Result: "_S & r);

                if (in(r, range_ll(23.999, 24.001)))
                    print(u"Good job!"_S);
                else
                    print(u"Try again."_S);
            }
        }

        catch (const Error& error)
        {
            print(u"Error: "_S & (error.message));
        }
    }
} code_block_2;


# https://www.rosettacode.org/wiki/24_game/Solve#Nim
from _11l import *
from itertools import product

op : Dict[Char, Callable[[float, float], float]] = {}
op[Char('+')] = lambda x, y: x + y
op[Char('-')] = lambda x, y: x - y
op[Char('*')] = lambda x, y: x * y
op[Char('/')] = lambda x, y: x / y if y != 0 else 9999999

def almost_equal(a, b):
    return abs(a - b) <= 1e-5

def solve(nums):
    syms = '+-*/'
    sorted_nums = list(map(float, sorted(nums)))
    for x, y, z in product(syms, syms, syms):
        n = sorted_nums[:]
        while True:
            (a, b, c, d) = (int(n[0]), int(n[1]), int(n[2]), int(n[3]))
            if almost_equal(op[x](op[y](a, b), op[z](c, d)), 24.0):
                #return f"({a:0} {y} {b:0}) {x} ({c:0} {z} {d:0})"
                return '(' + str(a) + ' ' + y + ' ' + str(b) + ') ' + x + ' (' + str(c) + ' ' + z + ' ' + str(d) + ')'
            if almost_equal(op[x](a, op[y](b, op[z](c, d))), 24.0):
                #return f"{a:0} {x} ({b:0} {y} ({c:0} {z} {d:0}))"
                return str(a) + ' ' + x + ' (' + str(b) + ' ' + y + ' (' + str(c) + ' ' + z + ' ' + str(d) + '))'
            if almost_equal(op[x](op[y](op[z](c, d), b), a), 24.0):
                #return f"(({c:0} {z} {d:0}) {y} {b:0}) {x} {a:0}"
                return '((' + str(c) + ' ' + z + ' ' + str(d) + ') ' + y + ' ' + str(b) + ') ' + x + ' ' + str(a)
            if almost_equal(op[x](op[y](b, op[z](c, d)), a), 24.0):
                #return f"({b:0} {y} ({c:0} {z} {d:0})) {x} {a:0}"
                return '(' + str(b) + ' ' + y + ' (' + str(c) + ' ' + z + ' ' + str(d) + ')) ' + x + str(a)
            if not next_permutation(n):
                break
    return 'not found'

for nums in [
            [9, 4, 4, 5],
            [1, 7, 2, 7],
            [5, 7, 5, 4],
            [1, 4, 6, 6],
            [2, 3, 7, 3],
            [8, 7, 9, 7],
            [1, 6, 2, 6],
            [7, 9, 4, 1],
            [6, 4, 2, 2],
            [5, 7, 9, 7],
            [3, 3, 8, 8],
          ]:
    print('solve(' + str(nums) + ') -> ' + solve(nums))
===
[Char = ((Float, Float) -> Float)] op
op[Char(‘+’)] = (x, y) -> x + y
op[Char(‘-’)] = (x, y) -> x - y
op[Char(‘*’)] = (x, y) -> x * y
op[Char(‘/’)] = (x, y) -> I y != 0 {x / y} E 9999999

F almost_equal(a, b)
   R abs(a - b) <= 1e-5

F solve(nums)
   V syms = ‘+-*/’
   V sorted_nums = sorted(nums).map(Float)
   L(x, y, z) cart_product(syms, syms, syms)
      V n = copy(sorted_nums)
      L
         V (a, b, c, d) = (Int(n[0]), Int(n[1]), Int(n[2]), Int(n[3]))
         I almost_equal(:op[x](:op[y](a, b), :op[z](c, d)), 24.0)
            R ‘(’String(a)‘ ’y‘ ’String(b)‘) ’x‘ (’String(c)‘ ’z‘ ’String(d)‘)’
         I almost_equal(:op[x](a, :op[y](b, :op[z](c, d))), 24.0)
            R String(a)‘ ’x‘ (’String(b)‘ ’y‘ (’String(c)‘ ’z‘ ’String(d)‘))’
         I almost_equal(:op[x](:op[y](:op[z](c, d), b), a), 24.0)
            R ‘((’String(c)‘ ’z‘ ’String(d)‘) ’y‘ ’String(b)‘) ’x‘ ’String(a)
         I almost_equal(:op[x](:op[y](b, :op[z](c, d)), a), 24.0)
            R ‘(’String(b)‘ ’y‘ (’String(c)‘ ’z‘ ’String(d)‘)) ’x‘’String(a)
         I !n.next_permutation()
            L.break
   R ‘not found’

L(nums) [[9, 4, 4, 5], [1, 7, 2, 7], [5, 7, 5, 4], [1, 4, 6, 6], [2, 3, 7, 3], [8, 7, 9, 7], [1, 6, 2, 6], [7, 9, 4, 1], [6, 4, 2, 2], [5, 7, 9, 7], [3, 3, 8, 8]]
   print(‘solve(’String(nums)‘) -> ’solve(nums))
===
Dict<Char, std::function<double(const double, const double)>> op;

struct CodeBlock1
{
    CodeBlock1()
    {
        op.set(u'+'_C, [](const auto &x, const auto &y){return x + y;});
        op.set(u'-'_C, [](const auto &x, const auto &y){return x - y;});
        op.set(u'*'_C, [](const auto &x, const auto &y){return x * y;});
        op.set(u'/'_C, [](const auto &x, const auto &y){return y != 0 ? x / y : 9999999;});
    }
} code_block_1;

template <typename T1, typename T2> auto almost_equal(const T1 &a, const T2 &b)
{
    return abs(a - b) <= 1e-5;
}

template <typename T1> auto solve(const T1 &nums)
{
    auto syms = u"+-*/"_S;
    auto sorted_nums = sorted(nums).map([](const auto &x){return to_float(x);});
    for (auto &&[x, y, z] : cart_product(syms, syms, syms)) {
        auto n = copy(sorted_nums);
        while (true) {
            auto [a, b, c, d] = make_tuple(to_int(_get<0>(n)), to_int(_get<1>(n)), to_int(_get<2>(n)), to_int(_get<3>(n)));
            if (almost_equal(::op[x](::op[y](a, b), ::op[z](c, d)), 24.0))
                return u"("_S & String(a) & u" "_S & y & u" "_S & String(b) & u") "_S & x & u" ("_S & String(c) & u" "_S & z & u" "_S & String(d) & u")"_S;
            if (almost_equal(::op[x](a, ::op[y](b, ::op[z](c, d))), 24.0))
                return String(a) & u" "_S & x & u" ("_S & String(b) & u" "_S & y & u" ("_S & String(c) & u" "_S & z & u" "_S & String(d) & u"))"_S;
            if (almost_equal(::op[x](::op[y](::op[z](c, d), b), a), 24.0))
                return u"(("_S & String(c) & u" "_S & z & u" "_S & String(d) & u") "_S & y & u" "_S & String(b) & u") "_S & x & u" "_S & String(a);
            if (almost_equal(::op[x](::op[y](b, ::op[z](c, d)), a), 24.0))
                return u"("_S & String(b) & u" "_S & y & u" ("_S & String(c) & u" "_S & z & u" "_S & String(d) & u")) "_S & x & String(a);
            if (!n.next_permutation())
                break;
        }
    }
    return u"not found"_S;
}

struct CodeBlock2
{
    CodeBlock2()
    {
        for (auto &&nums : create_array({create_array({9, 4, 4, 5}), create_array({1, 7, 2, 7}), create_array({5, 7, 5, 4}), create_array({1, 4, 6, 6}), create_array({2, 3, 7, 3}), create_array({8, 7, 9, 7}), create_array({1, 6, 2, 6}), create_array({7, 9, 4, 1}), create_array({6, 4, 2, 2}), create_array({5, 7, 9, 7}), create_array({3, 3, 8, 8})}))
            print(u"solve("_S & String(nums) & u") -> "_S & solve(nums));
    }
} code_block_2;