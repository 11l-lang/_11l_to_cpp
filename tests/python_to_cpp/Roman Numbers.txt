def roman(n):
    rn = {'I': 1, 'V': 5, 'X': 10, 'L': 50, 'C': 100, 'D': 500, 'M': 1000}
    r = 0
    i = 0
    while i < len(n):
        if i < len(n)-1 and rn[n[i]] < rn[n[i+1]]:
            r += rn[n[i+1]] - rn[n[i]]
            i += 2
        else:
            r += rn[n[i]]
            i += 1
    return r

if __name__ == '__main__':
    # These "asserts" using only for self-checking and not necessary for auto-testing
    assert roman('IV') == 4, '4'
    assert roman('VI') == 6, '6'
    assert roman('XL') == 40, '40'
    assert roman('LXXVI') == 76, '76'
    assert roman('CXLIX') == 149, '149'
    assert roman('CDXCIX') == 499, '499'
    assert roman('MMMDCCCLXXXVIII') == 3888, '3888'
    print("Earn cool rewards by using the 'Check' button!")
===
F roman(n)
   ...
   return r

:start:
assert(roman(‘IV’) == 4, ‘4’)
===
template <typename T1> auto roman(const T1 &n)
{
...
}

int main()
{
    assert(roman("IV") == 4, "4");
}


def roman(n):
    r = ""
    while n >= 1000:
        n -= 1000
        r += "M"

    if n >= 900:
        n -= 900
        r += "CM"

    if n >= 500:
        n -= 500
        r += "D"
        
    if n >= 400:
        n -= 400
        r += "CD"
        
    while n >= 100:
        n -= 100
        r += "C"

    if n >= 90:
        n -= 90
        r += "XC"

    if n >= 50:
        n -= 50
        r += "L"
        
    if n >= 40:
        n -= 40
        r += "XL"
        
    while n >= 10:
        n -= 10
        r += "X"

    if n >= 9:
        n -= 9
        r += "IX"

    if n >= 5:
        n -= 5
        r += "V"
        
    if n >= 4:
        n -= 4
        r += "IV"
        
    while n >= 1:
        n -= 1
        r += "I"

    return r

if __name__ == '__main__':
    # These "asserts" using only for self-checking and not necessary for auto-testing
    assert roman(6) == 'VI', '6'
    assert roman(76) == 'LXXVI', '76'
    assert roman(499) == 'CDXCIX', '499'
    assert roman(3888) == 'MMMDCCCLXXXVIII', '3888'
    print("Earn cool rewards by using the 'Check' button!")
===


---
//https://github.com/therin/CheckiO/blob/master/roman%20numbers.py
def checkio(data):

    coding = zip(
    [1000,900,500,400,100,90,50,40,10,9,5,4,1],
    ["M","CM","D","CD","C","XC","L","XL","X","IX","V","IV","I"])
    
    result = []
    for d, r in coding:
        while data >= d:
            result.append(r)
            data -= d
    return ''.join(result)

#These "asserts" using only for self-checking and not necessary for auto-testing
if __name__ == '__main__':
    assert checkio(6) == 'VI', '6'
    assert checkio(76) == 'LXXVI', '76'
    assert checkio(499) == 'CDXCIX', '499'
    assert checkio(3888) == 'MMMDCCCLXXXVIII', '3888'
    print('OK')


---
//https://py.checkio.org/blog/roman-numerals/ <- google:‘checkio roman numbers’
ELEMENTS = (("M", 1000), ("CM", 900), ("D", 500), ("CD", 400),
            ("C", 100), ("XC", 90), ("L", 50), ("XL", 40),
            ("X", 10), ("IX", 9), ("V", 5), ("IV", 4), ("I", 1))

def checkio(number):
    result = ""
    for roman, n in ELEMENTS:
        if n <= number:
            result += roman * (number // n)
            number %= n
    return result


---
checkio=lambda data: ['','M','MM','MMM'][data//1000]+['','C','CC','CCC','CD','D','DC','DCC','DCCC','CM'][data//100%10]+['','X','XX','XXX','XL','L','LX','LXX','LXXX','XC'][data//10%10]+['','I','II','III','IV','V','VI','VII','VIII','IX'][data%10]


---
def checkio(data):
    s = lambda b,z: '' if not z else str(s(b%z[0][0], z[1:])) + (b//z[0][0])*z[0][1]    
    return s(data, [(1000, 'M'), (900, 'MC'), (500, 'D'), (400, 'DC'), (100, 'C'), (90, 'CX'), (50, 'L'), (40, 'LX'), (10, 'X'), (9, 'XI'), (5, 'V'), (4, 'VI'), (1, 'I')])[::-1]