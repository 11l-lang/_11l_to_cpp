empty_dict : Dict[str, int] = {}
dict = {'key': 1, 'key2': 2}
arr = [1, 2]
===
Dict[String, Int] empty_dict
V dict = [‘key’ = 1, ‘key2’ = 2]
V arr = [1, 2]
===
Dict<String, int> empty_dict;
auto dict = create_dict(dict_of(u"key"_S, 1)(u"key2"_S, 2));
auto arr = create_array({1, 2});


def roman(n):
    rn = {'I': 1, 'V': 5, 'X': 10, 'L': 50, 'C': 100, 'D': 500, 'M': 1000}
    r = 0
    i = 0
    while i < len(n):
        if i < len(n)-1 and rn[n[i]] < rn[n[i+1]]:
            r += rn[n[i+1]] - rn[n[i]]
            i += 2
        else:
            r += rn[n[i]]
            i += 1
    return r

if __name__ == '__main__':
    # These "asserts" using only for self-checking and not necessary for auto-testing
    assert roman('IV') == 4, '4'
    assert roman('VI') == 6, '6'
    assert roman('XL') == 40, '40'
    assert roman('LXXVI') == 76, '76'
    assert roman('CXLIX') == 149, '149'
    assert roman('CDXCIX') == 499, '499'
    assert roman('MMMDCCCLXXXVIII') == 3888, '3888'
    print("Earn cool rewards by using the 'Check' button!")
===
F roman(n)
   V rn = [‘I’ = 1, ‘V’ = 5, ‘X’ = 10, ‘L’ = 50, ‘C’ = 100, ‘D’ = 500, ‘M’ = 1000]
   V r = 0
   V i = 0
   L i < n.len
      I i < n.len - 1 & rn[n[i]] < rn[n[i + 1]]
         r += rn[n[i + 1]] - rn[n[i]]
         i += 2
      E
         r += rn[n[i]]
         i++
   R r

:start:
assert(roman(‘IV’) == 4, ‘4’)
assert(roman(‘VI’) == 6, ‘6’)
assert(roman(‘XL’) == 40, ‘40’)
assert(roman(‘LXXVI’) == 76, ‘76’)
assert(roman(‘CXLIX’) == 149, ‘149’)
assert(roman(‘CDXCIX’) == 499, ‘499’)
assert(roman(‘MMMDCCCLXXXVIII’) == 3888, ‘3888’)
print(‘Earn cool rewards by using the 'Check' button!’)
===
template <typename T1> auto roman(const T1 &n)
{
    auto rn = create_dict(dict_of(u'I'_C, 1)(u'V'_C, 5)(u'X'_C, 10)(u'L'_C, 50)(u'C'_C, 100)(u'D'_C, 500)(u'M'_C, 1000));
    auto r = 0;
    auto i = 0;
    while (i < n.len())
        if (i < n.len() - 1 && rn[n[i]] < rn[n[i + 1]]) {
            r += rn[n[i + 1]] - rn[n[i]];
            i += 2;
        }
        else {
            r += rn[n[i]];
            i++;
        }
    return r;
}

int main()
{
    assert(roman(u"IV"_S) == 4, u"4"_S);
    assert(roman(u"VI"_S) == 6, u"6"_S);
    assert(roman(u"XL"_S) == 40, u"40"_S);
    assert(roman(u"LXXVI"_S) == 76, u"76"_S);
    assert(roman(u"CXLIX"_S) == 149, u"149"_S);
    assert(roman(u"CDXCIX"_S) == 499, u"499"_S);
    assert(roman(u"MMMDCCCLXXXVIII"_S) == 3888, u"3888"_S);
    print(u"Earn cool rewards by using the 'Check' button!"_S);
}


def roman(n):
    r = ""
    while n >= 1000:
        n -= 1000
        r += "M"

    if n >= 900:
        n -= 900
        r += "CM"

    if n >= 500:
        n -= 500
        r += "D"

    if n >= 400:
        n -= 400
        r += "CD"

    while n >= 100:
        n -= 100
        r += "C"

    if n >= 90:
        n -= 90
        r += "XC"

    if n >= 50:
        n -= 50
        r += "L"

    if n >= 40:
        n -= 40
        r += "XL"

    while n >= 10:
        n -= 10
        r += "X"

    if n >= 9:
        n -= 9
        r += "IX"

    if n >= 5:
        n -= 5
        r += "V"

    if n >= 4:
        n -= 4
        r += "IV"

    while n >= 1:
        n -= 1
        r += "I"

    return r

if __name__ == '__main__':
    # These "asserts" using only for self-checking and not necessary for auto-testing
    assert roman(6) == 'VI', '6'
    assert roman(76) == 'LXXVI', '76'
    assert roman(499) == 'CDXCIX', '499'
    assert roman(3888) == 'MMMDCCCLXXXVIII', '3888'
    print("Earn cool rewards by using the 'Check' button!")
===
F roman(=n)
   V r = ‘’
   L n >= 1000
      n -= 1000
      r ‘’= ‘M’

   I n >= 900
      n -= 900
      r ‘’= ‘CM’

   I n >= 500
      n -= 500
      r ‘’= ‘D’

   I n >= 400
      n -= 400
      r ‘’= ‘CD’

   L n >= 100
      n -= 100
      r ‘’= ‘C’

   I n >= 90
      n -= 90
      r ‘’= ‘XC’

   I n >= 50
      n -= 50
      r ‘’= ‘L’

   I n >= 40
      n -= 40
      r ‘’= ‘XL’

   L n >= 10
      n -= 10
      r ‘’= ‘X’

   I n >= 9
      n -= 9
      r ‘’= ‘IX’

   I n >= 5
      n -= 5
      r ‘’= ‘V’

   I n >= 4
      n -= 4
      r ‘’= ‘IV’

   L n >= 1
      n--
      r ‘’= ‘I’
   R r

:start:
assert(roman(6) == ‘VI’, ‘6’)
assert(roman(76) == ‘LXXVI’, ‘76’)
assert(roman(499) == ‘CDXCIX’, ‘499’)
assert(roman(3888) == ‘MMMDCCCLXXXVIII’, ‘3888’)
print(‘Earn cool rewards by using the 'Check' button!’)
===
template <typename T1> auto roman(T1 n)
{
    auto r = u""_S;
    while (n >= 1000) {
        n -= 1000;
        r += u"M"_S;
    }

    if (n >= 900) {
        n -= 900;
        r += u"CM"_S;
    }

    if (n >= 500) {
        n -= 500;
        r += u"D"_S;
    }

    if (n >= 400) {
        n -= 400;
        r += u"CD"_S;
    }

    while (n >= 100) {
        n -= 100;
        r += u"C"_S;
    }

    if (n >= 90) {
        n -= 90;
        r += u"XC"_S;
    }

    if (n >= 50) {
        n -= 50;
        r += u"L"_S;
    }

    if (n >= 40) {
        n -= 40;
        r += u"XL"_S;
    }

    while (n >= 10) {
        n -= 10;
        r += u"X"_S;
    }

    if (n >= 9) {
        n -= 9;
        r += u"IX"_S;
    }

    if (n >= 5) {
        n -= 5;
        r += u"V"_S;
    }

    if (n >= 4) {
        n -= 4;
        r += u"IV"_S;
    }

    while (n >= 1) {
        n--;
        r += u"I"_S;
    }
    return r;
}

int main()
{
    assert(roman(6) == u"VI", u"6"_S);
    assert(roman(76) == u"LXXVI", u"76"_S);
    assert(roman(499) == u"CDXCIX", u"499"_S);
    assert(roman(3888) == u"MMMDCCCLXXXVIII", u"3888"_S);
    print(u"Earn cool rewards by using the 'Check' button!"_S);
}


#[https://github.com/therin/CheckiO/blob/master/roman%20numbers.py]:
def checkio(data):

    coding = zip(
    [1000,900,500,400,100,90,50,40,10,9,5,4,1],
    ["M","CM","D","CD","C","XC","L","XL","X","IX","V","IV","I"])

    result : List[str] = []
    for d, r in coding:
        while data >= d:
            result.append(r)
            data -= d
    return ''.join(result)

if __name__ == '__main__':
    # These "asserts" using only for self-checking and not necessary for auto-testing
    assert checkio(6) == 'VI', '6'
    assert checkio(76) == 'LXXVI', '76'
    assert checkio(499) == 'CDXCIX', '499'
    assert checkio(3888) == 'MMMDCCCLXXXVIII', '3888'
    print('OK')
===
F checkio(=data)
   V coding = zip([1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1], [‘M’, ‘CM’, ‘D’, ‘CD’, ‘C’, ‘XC’, ‘L’, ‘XL’, ‘X’, ‘IX’, ‘V’, ‘IV’, ‘I’])
   [String] result
   L(d, r) coding
      L data >= d
         result.append(r)
         data -= d
   R result.join(‘’)

:start:
assert(checkio(6) == ‘VI’, ‘6’)
assert(checkio(76) == ‘LXXVI’, ‘76’)
assert(checkio(499) == ‘CDXCIX’, ‘499’)
assert(checkio(3888) == ‘MMMDCCCLXXXVIII’, ‘3888’)
print(‘OK’)
===
template <typename T1> auto checkio(T1 data)
{
    auto coding = zip(create_array({1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1}), create_array({u"M"_S, u"CM"_S, u"D"_S, u"CD"_S, u"C"_S, u"XC"_S, u"L"_S, u"XL"_S, u"X"_S, u"IX"_S, u"V"_S, u"IV"_S, u"I"_S}));
    Array<String> result;
    for (auto &&[d, r] : coding)
        while (data >= d) {
            result.append(r);
            data -= d;
        }
    return result.join(u""_S);
}

int main()
{
    assert(checkio(6) == u"VI", u"6"_S);
    assert(checkio(76) == u"LXXVI", u"76"_S);
    assert(checkio(499) == u"CDXCIX", u"499"_S);
    assert(checkio(3888) == u"MMMDCCCLXXXVIII", u"3888"_S);
    print(u"OK"_S);
}


#[https://py.checkio.org/blog/roman-numerals/ <- google:‘checkio roman numbers’]:
ELEMENTS = [("M", 1000), ("CM", 900), ("D", 500), ("CD", 400),
            ("C", 100), ("XC", 90), ("L", 50), ("XL", 40),
            ("X", 10), ("IX", 9), ("V", 5), ("IV", 4), ("I", 1)]

def checkio(number):
    result = ""
    for roman, n in ELEMENTS:
        if n <= number:
            result += roman * (number // n)
            number %= n
    return result
===
V ELEMENTS = [(‘M’, 1000), (‘CM’, 900), (‘D’, 500), (‘CD’, 400), (‘C’, 100), (‘XC’, 90), (‘L’, 50), (‘XL’, 40), (‘X’, 10), (‘IX’, 9), (‘V’, 5), (‘IV’, 4), (‘I’, 1)]

F checkio(=number)
   V result = ‘’
   L(roman, n) :ELEMENTS
      I n <= number
         result ‘’= roman * (number I/ n)
         number %= n
   R result
===
auto ELEMENTS = create_array({make_tuple(u"M"_S, 1000), make_tuple(u"CM"_S, 900), make_tuple(u"D"_S, 500), make_tuple(u"CD"_S, 400), make_tuple(u"C"_S, 100), make_tuple(u"XC"_S, 90), make_tuple(u"L"_S, 50), make_tuple(u"XL"_S, 40), make_tuple(u"X"_S, 10), make_tuple(u"IX"_S, 9), make_tuple(u"V"_S, 5), make_tuple(u"IV"_S, 4), make_tuple(u"I"_S, 1)});

template <typename T1> auto checkio(T1 number)
{
    auto result = u""_S;
    for (auto &&[roman, n] : ::ELEMENTS)
        if (n <= number) {
            result += roman * (idiv(number, n));
            number %= n;
        }
    return result;
}


checkio=lambda data: ['','M','MM','MMM'][data//1000]+['','C','CC','CCC','CD','D','DC','DCC','DCCC','CM'][data//100%10]+['','X','XX','XXX','XL','L','LX','LXX','LXXX','XC'][data//10%10]+['','I','II','III','IV','V','VI','VII','VIII','IX'][data%10]
===
V checkio = data -> [‘’, ‘M’, ‘MM’, ‘MMM’][data I/ 1000] + [‘’, ‘C’, ‘CC’, ‘CCC’, ‘CD’, ‘D’, ‘DC’, ‘DCC’, ‘DCCC’, ‘CM’][data I/ 100 % 10] + [‘’, ‘X’, ‘XX’, ‘XXX’, ‘XL’, ‘L’, ‘LX’, ‘LXX’, ‘LXXX’, ‘XC’][data I/ 10 % 10] + [‘’, ‘I’, ‘II’, ‘III’, ‘IV’, ‘V’, ‘VI’, ‘VII’, ‘VIII’, ‘IX’][data % 10]
===
auto checkio = [](const auto &data){return create_array({u""_S, u"M"_S, u"MM"_S, u"MMM"_S})[idiv(data, 1000)] + create_array({u""_S, u"C"_S, u"CC"_S, u"CCC"_S, u"CD"_S, u"D"_S, u"DC"_S, u"DCC"_S, u"DCCC"_S, u"CM"_S})[mod(idiv(data, 100), 10)] + create_array({u""_S, u"X"_S, u"XX"_S, u"XXX"_S, u"XL"_S, u"L"_S, u"LX"_S, u"LXX"_S, u"LXXX"_S, u"XC"_S})[mod(idiv(data, 10), 10)] + create_array({u""_S, u"I"_S, u"II"_S, u"III"_S, u"IV"_S, u"V"_S, u"VI"_S, u"VII"_S, u"VIII"_S, u"IX"_S})[mod(data, 10)];};


---
def checkio(data):
    s = lambda b,z: '' if not z else str(s(b%z[0][0], z[1:])) + (b//z[0][0])*z[0][1]
    return s(data, [(1000, 'M'), (900, 'MC'), (500, 'D'), (400, 'DC'), (100, 'C'), (90, 'CX'), (50, 'L'), (40, 'LX'), (10, 'X'), (9, 'XI'), (5, 'V'), (4, 'VI'), (1, 'I')])[::-1]