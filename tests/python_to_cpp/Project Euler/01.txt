# 10
Int64 = int

def primes_upto(limit):
    is_prime = [False] * 2 + [True] * (limit - 1)
    for n in range(int(limit**0.5 + 1.5)): # stop at ``sqrt(limit)``
        if is_prime[n]:
            for i in range(n*n, limit+1, n):
                is_prime[i] = False
    return [Int64(i) for i, prime in enumerate(is_prime) if prime]

print(sum(primes_upto(2_000_000)))
===
F primes_upto(limit)
   V is_prime = [0B] * 2 [+] [1B] * (limit - 1)
   L(n) 0 .< Int(limit ^ 0.5 + 1.5)
      I is_prime[n]
         L(i) (n * n .. limit).step(n)
            is_prime[i] = 0B
   R enumerate(is_prime).filter((i, prime) -> prime).map((i, prime) -> Int64(i))

print(sum(primes_upto(2'000'000)))
===
template <typename T1> auto primes_upto(const T1 &limit)
{
    auto is_prime = create_array({false}) * 2 + create_array({true}) * (limit - 1);
    for (auto n : range_el(0, to_int(pow(limit, 0.5) + 1.5)))
        if (is_prime[n])
            for (auto i : range_ee(n * n, limit).step(n))
                is_prime.set(i, false);
    return enumerate(is_prime).filter([](const auto &i, const auto &prime){return prime;}).map([](const auto &i, const auto &prime){return to_int64(i);});
}

struct CodeBlock1
{
    CodeBlock1()
    {
        print(sum(primes_upto(2'000'000)));
    }
} code_block_1;


# 11
GRID = [
    [ 8, 2,22,97,38,15, 0,40, 0,75, 4, 5, 7,78,52,12,50,77,91, 8],
    [49,49,99,40,17,81,18,57,60,87,17,40,98,43,69,48, 4,56,62, 0],
    [81,49,31,73,55,79,14,29,93,71,40,67,53,88,30, 3,49,13,36,65],
    [52,70,95,23, 4,60,11,42,69,24,68,56, 1,32,56,71,37, 2,36,91],
    [22,31,16,71,51,67,63,89,41,92,36,54,22,40,40,28,66,33,13,80],
    [24,47,32,60,99, 3,45, 2,44,75,33,53,78,36,84,20,35,17,12,50],
    [32,98,81,28,64,23,67,10,26,38,40,67,59,54,70,66,18,38,64,70],
    [67,26,20,68, 2,62,12,20,95,63,94,39,63, 8,40,91,66,49,94,21],
    [24,55,58, 5,66,73,99,26,97,17,78,78,96,83,14,88,34,89,63,72],
    [21,36,23, 9,75, 0,76,44,20,45,35,14, 0,61,33,97,34,31,33,95],
    [78,17,53,28,22,75,31,67,15,94, 3,80, 4,62,16,14, 9,53,56,92],
    [16,39, 5,42,96,35,31,47,55,58,88,24, 0,17,54,24,36,29,85,57],
    [86,56, 0,48,35,71,89, 7, 5,44,44,37,44,60,21,58,51,54,17,58],
    [19,80,81,68, 5,94,47,69,28,73,92,13,86,52,17,77, 4,89,55,40],
    [ 4,52, 8,83,97,35,99,16, 7,97,57,32,16,26,26,79,33,27,98,66],
    [88,36,68,87,57,62,20,72, 3,46,33,67,46,55,12,32,63,93,53,69],
    [ 4,42,16,73,38,25,39,11,24,94,72,18, 8,46,29,32,40,62,76,36],
    [20,69,36,41,72,30,23,88,34,62,99,69,82,67,59,85,74, 4,36,16],
    [20,73,35,29,78,31,90, 1,74,31,49,71,48,86,81,16,23,57, 5,54],
    [ 1,70,54,71,83,51,54,69,16,92,33,48,61,43,52, 1,89,19,67,48],
]
CONSECUTIVE = 4

def grid_product(ox, oy, dx, dy, n):
    result = 1
    for i in range(n):
        result *= GRID[oy + i * dy][ox + i * dx]
    return result

ans = -1
width = len(GRID[0])
height = len(GRID)
for y in range(height):
    for x in range(width):
        if x + CONSECUTIVE <= width:
            ans = max(grid_product(x, y,  1, 0, CONSECUTIVE), ans)
        if y + CONSECUTIVE <= height:
            ans = max(grid_product(x, y,  0, 1, CONSECUTIVE), ans)
        if x + CONSECUTIVE <= width and y + CONSECUTIVE <= height:
            ans = max(grid_product(x, y,  1, 1, CONSECUTIVE), ans)
        if x - CONSECUTIVE >= -1    and y + CONSECUTIVE <= height:
            ans = max(grid_product(x, y, -1, 1, CONSECUTIVE), ans)
print(ans)
===
V GRID = [[8, 2, 22, 97, 38, 15, 0, 40, 0, 75, 4, 5, 7, 78, 52, 12, 50, 77, 91, 8], [49, 49, 99, 40, 17, 81, 18, 57, 60, 87, 17, 40, 98, 43, 69, 48, 4, 56, 62, 0], [81, 49, 31, 73, 55, 79, 14, 29, 93, 71, 40, 67, 53, 88, 30, 3, 49, 13, 36, 65], [52, 70, 95, 23, 4, 60, 11, 42, 69, 24, 68, 56, 1, 32, 56, 71, 37, 2, 36, 91], [22, 31, 16, 71, 51, 67, 63, 89, 41, 92, 36, 54, 22, 40, 40, 28, 66, 33, 13, 80], [24, 47, 32, 60, 99, 3, 45, 2, 44, 75, 33, 53, 78, 36, 84, 20, 35, 17, 12, 50], [32, 98, 81, 28, 64, 23, 67, 10, 26, 38, 40, 67, 59, 54, 70, 66, 18, 38, 64, 70], [67, 26, 20, 68, 2, 62, 12, 20, 95, 63, 94, 39, 63, 8, 40, 91, 66, 49, 94, 21], [24, 55, 58, 5, 66, 73, 99, 26, 97, 17, 78, 78, 96, 83, 14, 88, 34, 89, 63, 72], [21, 36, 23, 9, 75, 0, 76, 44, 20, 45, 35, 14, 0, 61, 33, 97, 34, 31, 33, 95], [78, 17, 53, 28, 22, 75, 31, 67, 15, 94, 3, 80, 4, 62, 16, 14, 9, 53, 56, 92], [16, 39, 5, 42, 96, 35, 31, 47, 55, 58, 88, 24, 0, 17, 54, 24, 36, 29, 85, 57], [86, 56, 0, 48, 35, 71, 89, 7, 5, 44, 44, 37, 44, 60, 21, 58, 51, 54, 17, 58], [19, 80, 81, 68, 5, 94, 47, 69, 28, 73, 92, 13, 86, 52, 17, 77, 4, 89, 55, 40], [4, 52, 8, 83, 97, 35, 99, 16, 7, 97, 57, 32, 16, 26, 26, 79, 33, 27, 98, 66], [88, 36, 68, 87, 57, 62, 20, 72, 3, 46, 33, 67, 46, 55, 12, 32, 63, 93, 53, 69], [4, 42, 16, 73, 38, 25, 39, 11, 24, 94, 72, 18, 8, 46, 29, 32, 40, 62, 76, 36], [20, 69, 36, 41, 72, 30, 23, 88, 34, 62, 99, 69, 82, 67, 59, 85, 74, 4, 36, 16], [20, 73, 35, 29, 78, 31, 90, 1, 74, 31, 49, 71, 48, 86, 81, 16, 23, 57, 5, 54], [1, 70, 54, 71, 83, 51, 54, 69, 16, 92, 33, 48, 61, 43, 52, 1, 89, 19, 67, 48]]
V CONSECUTIVE = 4

F grid_product(ox, oy, dx, dy, n)
   V result = 1
   L(i) 0 .< n
      result *= :GRID[oy + i * dy][ox + i * dx]
   R result

V ans = -1
V width = GRID[0].len
V height = GRID.len
L(y) 0 .< height
   L(x) 0 .< width
      I x + CONSECUTIVE <= width
         ans = max(grid_product(x, y, 1, 0, CONSECUTIVE), ans)
      I y + CONSECUTIVE <= height
         ans = max(grid_product(x, y, 0, 1, CONSECUTIVE), ans)
      I x + CONSECUTIVE <= width & y + CONSECUTIVE <= height
         ans = max(grid_product(x, y, 1, 1, CONSECUTIVE), ans)
      I x - CONSECUTIVE >= -1 & y + CONSECUTIVE <= height
         ans = max(grid_product(x, y, -1, 1, CONSECUTIVE), ans)
print(ans)
===
auto GRID = create_array({create_array({8, 2, 22, 97, 38, 15, 0, 40, 0, 75, 4, 5, 7, 78, 52, 12, 50, 77, 91, 8}), create_array({49, 49, 99, 40, 17, 81, 18, 57, 60, 87, 17, 40, 98, 43, 69, 48, 4, 56, 62, 0}), create_array({81, 49, 31, 73, 55, 79, 14, 29, 93, 71, 40, 67, 53, 88, 30, 3, 49, 13, 36, 65}), create_array({52, 70, 95, 23, 4, 60, 11, 42, 69, 24, 68, 56, 1, 32, 56, 71, 37, 2, 36, 91}), create_array({22, 31, 16, 71, 51, 67, 63, 89, 41, 92, 36, 54, 22, 40, 40, 28, 66, 33, 13, 80}), create_array({24, 47, 32, 60, 99, 3, 45, 2, 44, 75, 33, 53, 78, 36, 84, 20, 35, 17, 12, 50}), create_array({32, 98, 81, 28, 64, 23, 67, 10, 26, 38, 40, 67, 59, 54, 70, 66, 18, 38, 64, 70}), create_array({67, 26, 20, 68, 2, 62, 12, 20, 95, 63, 94, 39, 63, 8, 40, 91, 66, 49, 94, 21}), create_array({24, 55, 58, 5, 66, 73, 99, 26, 97, 17, 78, 78, 96, 83, 14, 88, 34, 89, 63, 72}), create_array({21, 36, 23, 9, 75, 0, 76, 44, 20, 45, 35, 14, 0, 61, 33, 97, 34, 31, 33, 95}), create_array({78, 17, 53, 28, 22, 75, 31, 67, 15, 94, 3, 80, 4, 62, 16, 14, 9, 53, 56, 92}), create_array({16, 39, 5, 42, 96, 35, 31, 47, 55, 58, 88, 24, 0, 17, 54, 24, 36, 29, 85, 57}), create_array({86, 56, 0, 48, 35, 71, 89, 7, 5, 44, 44, 37, 44, 60, 21, 58, 51, 54, 17, 58}), create_array({19, 80, 81, 68, 5, 94, 47, 69, 28, 73, 92, 13, 86, 52, 17, 77, 4, 89, 55, 40}), create_array({4, 52, 8, 83, 97, 35, 99, 16, 7, 97, 57, 32, 16, 26, 26, 79, 33, 27, 98, 66}), create_array({88, 36, 68, 87, 57, 62, 20, 72, 3, 46, 33, 67, 46, 55, 12, 32, 63, 93, 53, 69}), create_array({4, 42, 16, 73, 38, 25, 39, 11, 24, 94, 72, 18, 8, 46, 29, 32, 40, 62, 76, 36}), create_array({20, 69, 36, 41, 72, 30, 23, 88, 34, 62, 99, 69, 82, 67, 59, 85, 74, 4, 36, 16}), create_array({20, 73, 35, 29, 78, 31, 90, 1, 74, 31, 49, 71, 48, 86, 81, 16, 23, 57, 5, 54}), create_array({1, 70, 54, 71, 83, 51, 54, 69, 16, 92, 33, 48, 61, 43, 52, 1, 89, 19, 67, 48})});
auto CONSECUTIVE = 4;

template <typename T1, typename T2, typename T3, typename T4, typename T5> auto grid_product(const T1 &ox, const T2 &oy, const T3 &dx, const T4 &dy, const T5 &n)
{
    auto result = 1;
    for (auto i : range_el(0, n))
        result *= ::GRID[oy + i * dy][ox + i * dx];
    return result;
}

auto ans = -1;
auto width = _get<0>(GRID).len();
auto height = GRID.len();

struct CodeBlock1
{
    CodeBlock1()
    {
        for (auto y : range_el(0, height))
            for (auto x : range_el(0, width)) {
                if (x + CONSECUTIVE <= width)
                    ans = max(grid_product(x, y, 1, 0, CONSECUTIVE), ans);
                if (y + CONSECUTIVE <= height)
                    ans = max(grid_product(x, y, 0, 1, CONSECUTIVE), ans);
                if (x + CONSECUTIVE <= width && y + CONSECUTIVE <= height)
                    ans = max(grid_product(x, y, 1, 1, CONSECUTIVE), ans);
                if (x - CONSECUTIVE >= -1 && y + CONSECUTIVE <= height)
                    ans = max(grid_product(x, y, -1, 1, CONSECUTIVE), ans);
            }
        print(ans);
    }
} code_block_1;


# 12
import itertools, math

# Returns the number of integers in the range [1, n] that divide n.
def num_divisors(n):
    end = int(math.sqrt(n))
    result = sum(2
        for i in range(1, end + 1)
        if n % i == 0)
    if end**2 == n:
        result -= 1
    return result

triangle = 0
for i in itertools.count(1):
    triangle += i  # This is the ith triangle number, i.e. num = 1 + 2 + ... + i = i * (i + 1) / 2
    if num_divisors(triangle) > 500:
        print(triangle)
        break
===
F num_divisors(n)
   V end = Int(sqrt(n))
   V result = sum((1 .. end).filter(i -> @n % i == 0).map(i -> 2))
   I end ^ 2 == n
      result--
   R result

V triangle = 0
L(i) 1..
   triangle += i
   I num_divisors(triangle) > 500
      print(triangle)
      L.break
===
template <typename T1> auto num_divisors(const T1 &n)
{
    auto end = to_int(sqrt(n));
    auto result = sum_map(range_ee(1, end).filter([&n](const auto &i){return mod(n, i) == 0;}), [](const auto &i){return 2;});
    if (square(end) == n)
        result--;
    return result;
}

auto triangle = 0;

struct CodeBlock1
{
    CodeBlock1()
    {
        for (auto i : range_ei(1)) {
            triangle += i;
            if (num_divisors(triangle) > 500) {
                print(triangle);
                break;
            }
        }
    }
} code_block_1;


# 13
BigInt = int

NUMBERS = [
    BigInt('37107287533902102798797998220837590246510135740250'),
    BigInt('46376937677490009712648124896970078050417018260538'),
    BigInt('74324986199524741059474233309513058123726617309629'),
    BigInt('91942213363574161572522430563301811072406154908250'),
    BigInt('23067588207539346171171980310421047513778063246676'),
    BigInt('89261670696623633820136378418383684178734361726757'),
    BigInt('28112879812849979408065481931592621691275889832738'),
    BigInt('44274228917432520321923589422876796487670272189318'),
    BigInt('47451445736001306439091167216856844588711603153276'),
    BigInt('70386486105843025439939619828917593665686757934951'),
    BigInt('62176457141856560629502157223196586755079324193331'),
    BigInt('64906352462741904929101432445813822663347944758178'),
    BigInt('92575867718337217661963751590579239728245598838407'),
    BigInt('58203565325359399008402633568948830189458628227828'),
    BigInt('80181199384826282014278194139940567587151170094390'),
    BigInt('35398664372827112653829987240784473053190104293586'),
    BigInt('86515506006295864861532075273371959191420517255829'),
    BigInt('71693888707715466499115593487603532921714970056938'),
    BigInt('54370070576826684624621495650076471787294438377604'),
    BigInt('53282654108756828443191190634694037855217779295145'),
    BigInt('36123272525000296071075082563815656710885258350721'),
    BigInt('45876576172410976447339110607218265236877223636045'),
    BigInt('17423706905851860660448207621209813287860733969412'),
    BigInt('81142660418086830619328460811191061556940512689692'),
    BigInt('51934325451728388641918047049293215058642563049483'),
    BigInt('62467221648435076201727918039944693004732956340691'),
    BigInt('15732444386908125794514089057706229429197107928209'),
    BigInt('55037687525678773091862540744969844508330393682126'),
    BigInt('18336384825330154686196124348767681297534375946515'),
    BigInt('80386287592878490201521685554828717201219257766954'),
    BigInt('78182833757993103614740356856449095527097864797581'),
    BigInt('16726320100436897842553539920931837441497806860984'),
    BigInt('48403098129077791799088218795327364475675590848030'),
    BigInt('87086987551392711854517078544161852424320693150332'),
    BigInt('59959406895756536782107074926966537676326235447210'),
    BigInt('69793950679652694742597709739166693763042633987085'),
    BigInt('41052684708299085211399427365734116182760315001271'),
    BigInt('65378607361501080857009149939512557028198746004375'),
    BigInt('35829035317434717326932123578154982629742552737307'),
    BigInt('94953759765105305946966067683156574377167401875275'),
    BigInt('88902802571733229619176668713819931811048770190271'),
    BigInt('25267680276078003013678680992525463401061632866526'),
    BigInt('36270218540497705585629946580636237993140746255962'),
    BigInt('24074486908231174977792365466257246923322810917141'),
    BigInt('91430288197103288597806669760892938638285025333403'),
    BigInt('34413065578016127815921815005561868836468420090470'),
    BigInt('23053081172816430487623791969842487255036638784583'),
    BigInt('11487696932154902810424020138335124462181441773470'),
    BigInt('63783299490636259666498587618221225225512486764533'),
    BigInt('67720186971698544312419572409913959008952310058822'),
    BigInt('95548255300263520781532296796249481641953868218774'),
    BigInt('76085327132285723110424803456124867697064507995236'),
    BigInt('37774242535411291684276865538926205024910326572967'),
    BigInt('23701913275725675285653248258265463092207058596522'),
    BigInt('29798860272258331913126375147341994889534765745501'),
    BigInt('18495701454879288984856827726077713721403798879715'),
    BigInt('38298203783031473527721580348144513491373226651381'),
    BigInt('34829543829199918180278916522431027392251122869539'),
    BigInt('40957953066405232632538044100059654939159879593635'),
    BigInt('29746152185502371307642255121183693803580388584903'),
    BigInt('41698116222072977186158236678424689157993532961922'),
    BigInt('62467957194401269043877107275048102390895523597457'),
    BigInt('23189706772547915061505504953922979530901129967519'),
    BigInt('86188088225875314529584099251203829009407770775672'),
    BigInt('11306739708304724483816533873502340845647058077308'),
    BigInt('82959174767140363198008187129011875491310547126581'),
    BigInt('97623331044818386269515456334926366572897563400500'),
    BigInt('42846280183517070527831839425882145521227251250327'),
    BigInt('55121603546981200581762165212827652751691296897789'),
    BigInt('32238195734329339946437501907836945765883352399886'),
    BigInt('75506164965184775180738168837861091527357929701337'),
    BigInt('62177842752192623401942399639168044983993173312731'),
    BigInt('32924185707147349566916674687634660915035914677504'),
    BigInt('99518671430235219628894890102423325116913619626622'),
    BigInt('73267460800591547471830798392868535206946944540724'),
    BigInt('76841822524674417161514036427982273348055556214818'),
    BigInt('97142617910342598647204516893989422179826088076852'),
    BigInt('87783646182799346313767754307809363333018982642090'),
    BigInt('10848802521674670883215120185883543223812876952786'),
    BigInt('71329612474782464538636993009049310363619763878039'),
    BigInt('62184073572399794223406235393808339651327408011116'),
    BigInt('66627891981488087797941876876144230030984490851411'),
    BigInt('60661826293682836764744779239180335110989069790714'),
    BigInt('85786944089552990653640447425576083659976645795096'),
    BigInt('66024396409905389607120198219976047599490197230297'),
    BigInt('64913982680032973156037120041377903785566085089252'),
    BigInt('16730939319872750275468906903707539413042652315011'),
    BigInt('94809377245048795150954100921645863754710598436791'),
    BigInt('78639167021187492431995700641917969777599028300699'),
    BigInt('15368713711936614952811305876380278410754449733078'),
    BigInt('40789923115535562561142322423255033685442488917353'),
    BigInt('44889911501440648020369068063960672322193204149535'),
    BigInt('41503128880339536053299340368006977710650566631954'),
    BigInt('81234880673210146739058568557934581403627822703280'),
    BigInt('82616570773948327592232845941706525094512325230608'),
    BigInt('22918802058777319719839450180888072429661980811197'),
    BigInt('77158542502016545090413245809786882778948721859617'),
    BigInt('72107838435069186155435662884062257473692284509516'),
    BigInt('20849603980134001723930671666823555245252804609722'),
    BigInt('53503534226472524250874054075591789781264330331690'),
]

print(str(sum(NUMBERS))[:10])
===
V NUMBERS = [BigInt(‘37107287533902102798797998220837590246510135740250’), BigInt(‘46376937677490009712648124896970078050417018260538’), BigInt(‘74324986199524741059474233309513058123726617309629’), BigInt(‘91942213363574161572522430563301811072406154908250’), BigInt(‘23067588207539346171171980310421047513778063246676’), BigInt(‘89261670696623633820136378418383684178734361726757’), BigInt(‘28112879812849979408065481931592621691275889832738’), BigInt(‘44274228917432520321923589422876796487670272189318’), BigInt(‘47451445736001306439091167216856844588711603153276’), BigInt(‘70386486105843025439939619828917593665686757934951’), BigInt(‘62176457141856560629502157223196586755079324193331’), BigInt(‘64906352462741904929101432445813822663347944758178’), BigInt(‘92575867718337217661963751590579239728245598838407’), BigInt(‘58203565325359399008402633568948830189458628227828’), BigInt(‘80181199384826282014278194139940567587151170094390’), BigInt(‘35398664372827112653829987240784473053190104293586’), BigInt(‘86515506006295864861532075273371959191420517255829’), BigInt(‘71693888707715466499115593487603532921714970056938’), BigInt(‘54370070576826684624621495650076471787294438377604’), BigInt(‘53282654108756828443191190634694037855217779295145’), BigInt(‘36123272525000296071075082563815656710885258350721’), BigInt(‘45876576172410976447339110607218265236877223636045’), BigInt(‘17423706905851860660448207621209813287860733969412’), BigInt(‘81142660418086830619328460811191061556940512689692’), BigInt(‘51934325451728388641918047049293215058642563049483’), BigInt(‘62467221648435076201727918039944693004732956340691’), BigInt(‘15732444386908125794514089057706229429197107928209’), BigInt(‘55037687525678773091862540744969844508330393682126’), BigInt(‘18336384825330154686196124348767681297534375946515’), BigInt(‘80386287592878490201521685554828717201219257766954’), BigInt(‘78182833757993103614740356856449095527097864797581’), BigInt(‘16726320100436897842553539920931837441497806860984’), BigInt(‘48403098129077791799088218795327364475675590848030’), BigInt(‘87086987551392711854517078544161852424320693150332’), BigInt(‘59959406895756536782107074926966537676326235447210’), BigInt(‘69793950679652694742597709739166693763042633987085’), BigInt(‘41052684708299085211399427365734116182760315001271’), BigInt(‘65378607361501080857009149939512557028198746004375’), BigInt(‘35829035317434717326932123578154982629742552737307’), BigInt(‘94953759765105305946966067683156574377167401875275’), BigInt(‘88902802571733229619176668713819931811048770190271’), BigInt(‘25267680276078003013678680992525463401061632866526’), BigInt(‘36270218540497705585629946580636237993140746255962’), BigInt(‘24074486908231174977792365466257246923322810917141’), BigInt(‘91430288197103288597806669760892938638285025333403’), BigInt(‘34413065578016127815921815005561868836468420090470’), BigInt(‘23053081172816430487623791969842487255036638784583’), BigInt(‘11487696932154902810424020138335124462181441773470’), BigInt(‘63783299490636259666498587618221225225512486764533’), BigInt(‘67720186971698544312419572409913959008952310058822’), BigInt(‘95548255300263520781532296796249481641953868218774’), BigInt(‘76085327132285723110424803456124867697064507995236’), BigInt(‘37774242535411291684276865538926205024910326572967’), BigInt(‘23701913275725675285653248258265463092207058596522’), BigInt(‘29798860272258331913126375147341994889534765745501’), BigInt(‘18495701454879288984856827726077713721403798879715’), BigInt(‘38298203783031473527721580348144513491373226651381’), BigInt(‘34829543829199918180278916522431027392251122869539’), BigInt(‘40957953066405232632538044100059654939159879593635’), BigInt(‘29746152185502371307642255121183693803580388584903’), BigInt(‘41698116222072977186158236678424689157993532961922’), BigInt(‘62467957194401269043877107275048102390895523597457’), BigInt(‘23189706772547915061505504953922979530901129967519’), BigInt(‘86188088225875314529584099251203829009407770775672’), BigInt(‘11306739708304724483816533873502340845647058077308’), BigInt(‘82959174767140363198008187129011875491310547126581’), BigInt(‘97623331044818386269515456334926366572897563400500’), BigInt(‘42846280183517070527831839425882145521227251250327’), BigInt(‘55121603546981200581762165212827652751691296897789’), BigInt(‘32238195734329339946437501907836945765883352399886’), BigInt(‘75506164965184775180738168837861091527357929701337’), BigInt(‘62177842752192623401942399639168044983993173312731’), BigInt(‘32924185707147349566916674687634660915035914677504’), BigInt(‘99518671430235219628894890102423325116913619626622’), BigInt(‘73267460800591547471830798392868535206946944540724’), BigInt(‘76841822524674417161514036427982273348055556214818’), BigInt(‘97142617910342598647204516893989422179826088076852’), BigInt(‘87783646182799346313767754307809363333018982642090’), BigInt(‘10848802521674670883215120185883543223812876952786’), BigInt(‘71329612474782464538636993009049310363619763878039’), BigInt(‘62184073572399794223406235393808339651327408011116’), BigInt(‘66627891981488087797941876876144230030984490851411’), BigInt(‘60661826293682836764744779239180335110989069790714’), BigInt(‘85786944089552990653640447425576083659976645795096’), BigInt(‘66024396409905389607120198219976047599490197230297’), BigInt(‘64913982680032973156037120041377903785566085089252’), BigInt(‘16730939319872750275468906903707539413042652315011’), BigInt(‘94809377245048795150954100921645863754710598436791’), BigInt(‘78639167021187492431995700641917969777599028300699’), BigInt(‘15368713711936614952811305876380278410754449733078’), BigInt(‘40789923115535562561142322423255033685442488917353’), BigInt(‘44889911501440648020369068063960672322193204149535’), BigInt(‘41503128880339536053299340368006977710650566631954’), BigInt(‘81234880673210146739058568557934581403627822703280’), BigInt(‘82616570773948327592232845941706525094512325230608’), BigInt(‘22918802058777319719839450180888072429661980811197’), BigInt(‘77158542502016545090413245809786882778948721859617’), BigInt(‘72107838435069186155435662884062257473692284509516’), BigInt(‘20849603980134001723930671666823555245252804609722’), BigInt(‘53503534226472524250874054075591789781264330331690’)]

print(String(sum(NUMBERS))[0.<10])
===
auto NUMBERS = create_array<BigInt>({BigInt(u"37107287533902102798797998220837590246510135740250"_S), BigInt(u"46376937677490009712648124896970078050417018260538"_S), BigInt(u"74324986199524741059474233309513058123726617309629"_S), BigInt(u"91942213363574161572522430563301811072406154908250"_S), BigInt(u"23067588207539346171171980310421047513778063246676"_S), BigInt(u"89261670696623633820136378418383684178734361726757"_S), BigInt(u"28112879812849979408065481931592621691275889832738"_S), BigInt(u"44274228917432520321923589422876796487670272189318"_S), BigInt(u"47451445736001306439091167216856844588711603153276"_S), BigInt(u"70386486105843025439939619828917593665686757934951"_S), BigInt(u"62176457141856560629502157223196586755079324193331"_S), BigInt(u"64906352462741904929101432445813822663347944758178"_S), BigInt(u"92575867718337217661963751590579239728245598838407"_S), BigInt(u"58203565325359399008402633568948830189458628227828"_S), BigInt(u"80181199384826282014278194139940567587151170094390"_S), BigInt(u"35398664372827112653829987240784473053190104293586"_S), BigInt(u"86515506006295864861532075273371959191420517255829"_S), BigInt(u"71693888707715466499115593487603532921714970056938"_S), BigInt(u"54370070576826684624621495650076471787294438377604"_S), BigInt(u"53282654108756828443191190634694037855217779295145"_S), BigInt(u"36123272525000296071075082563815656710885258350721"_S), BigInt(u"45876576172410976447339110607218265236877223636045"_S), BigInt(u"17423706905851860660448207621209813287860733969412"_S), BigInt(u"81142660418086830619328460811191061556940512689692"_S), BigInt(u"51934325451728388641918047049293215058642563049483"_S), BigInt(u"62467221648435076201727918039944693004732956340691"_S), BigInt(u"15732444386908125794514089057706229429197107928209"_S), BigInt(u"55037687525678773091862540744969844508330393682126"_S), BigInt(u"18336384825330154686196124348767681297534375946515"_S), BigInt(u"80386287592878490201521685554828717201219257766954"_S), BigInt(u"78182833757993103614740356856449095527097864797581"_S), BigInt(u"16726320100436897842553539920931837441497806860984"_S), BigInt(u"48403098129077791799088218795327364475675590848030"_S), BigInt(u"87086987551392711854517078544161852424320693150332"_S), BigInt(u"59959406895756536782107074926966537676326235447210"_S), BigInt(u"69793950679652694742597709739166693763042633987085"_S), BigInt(u"41052684708299085211399427365734116182760315001271"_S), BigInt(u"65378607361501080857009149939512557028198746004375"_S), BigInt(u"35829035317434717326932123578154982629742552737307"_S), BigInt(u"94953759765105305946966067683156574377167401875275"_S), BigInt(u"88902802571733229619176668713819931811048770190271"_S), BigInt(u"25267680276078003013678680992525463401061632866526"_S), BigInt(u"36270218540497705585629946580636237993140746255962"_S), BigInt(u"24074486908231174977792365466257246923322810917141"_S), BigInt(u"91430288197103288597806669760892938638285025333403"_S), BigInt(u"34413065578016127815921815005561868836468420090470"_S), BigInt(u"23053081172816430487623791969842487255036638784583"_S), BigInt(u"11487696932154902810424020138335124462181441773470"_S), BigInt(u"63783299490636259666498587618221225225512486764533"_S), BigInt(u"67720186971698544312419572409913959008952310058822"_S), BigInt(u"95548255300263520781532296796249481641953868218774"_S), BigInt(u"76085327132285723110424803456124867697064507995236"_S), BigInt(u"37774242535411291684276865538926205024910326572967"_S), BigInt(u"23701913275725675285653248258265463092207058596522"_S), BigInt(u"29798860272258331913126375147341994889534765745501"_S), BigInt(u"18495701454879288984856827726077713721403798879715"_S), BigInt(u"38298203783031473527721580348144513491373226651381"_S), BigInt(u"34829543829199918180278916522431027392251122869539"_S), BigInt(u"40957953066405232632538044100059654939159879593635"_S), BigInt(u"29746152185502371307642255121183693803580388584903"_S), BigInt(u"41698116222072977186158236678424689157993532961922"_S), BigInt(u"62467957194401269043877107275048102390895523597457"_S), BigInt(u"23189706772547915061505504953922979530901129967519"_S), BigInt(u"86188088225875314529584099251203829009407770775672"_S), BigInt(u"11306739708304724483816533873502340845647058077308"_S), BigInt(u"82959174767140363198008187129011875491310547126581"_S), BigInt(u"97623331044818386269515456334926366572897563400500"_S), BigInt(u"42846280183517070527831839425882145521227251250327"_S), BigInt(u"55121603546981200581762165212827652751691296897789"_S), BigInt(u"32238195734329339946437501907836945765883352399886"_S), BigInt(u"75506164965184775180738168837861091527357929701337"_S), BigInt(u"62177842752192623401942399639168044983993173312731"_S), BigInt(u"32924185707147349566916674687634660915035914677504"_S), BigInt(u"99518671430235219628894890102423325116913619626622"_S), BigInt(u"73267460800591547471830798392868535206946944540724"_S), BigInt(u"76841822524674417161514036427982273348055556214818"_S), BigInt(u"97142617910342598647204516893989422179826088076852"_S), BigInt(u"87783646182799346313767754307809363333018982642090"_S), BigInt(u"10848802521674670883215120185883543223812876952786"_S), BigInt(u"71329612474782464538636993009049310363619763878039"_S), BigInt(u"62184073572399794223406235393808339651327408011116"_S), BigInt(u"66627891981488087797941876876144230030984490851411"_S), BigInt(u"60661826293682836764744779239180335110989069790714"_S), BigInt(u"85786944089552990653640447425576083659976645795096"_S), BigInt(u"66024396409905389607120198219976047599490197230297"_S), BigInt(u"64913982680032973156037120041377903785566085089252"_S), BigInt(u"16730939319872750275468906903707539413042652315011"_S), BigInt(u"94809377245048795150954100921645863754710598436791"_S), BigInt(u"78639167021187492431995700641917969777599028300699"_S), BigInt(u"15368713711936614952811305876380278410754449733078"_S), BigInt(u"40789923115535562561142322423255033685442488917353"_S), BigInt(u"44889911501440648020369068063960672322193204149535"_S), BigInt(u"41503128880339536053299340368006977710650566631954"_S), BigInt(u"81234880673210146739058568557934581403627822703280"_S), BigInt(u"82616570773948327592232845941706525094512325230608"_S), BigInt(u"22918802058777319719839450180888072429661980811197"_S), BigInt(u"77158542502016545090413245809786882778948721859617"_S), BigInt(u"72107838435069186155435662884062257473692284509516"_S), BigInt(u"20849603980134001723930671666823555245252804609722"_S), BigInt(u"53503534226472524250874054075591789781264330331690"_S)});

struct CodeBlock1
{
    CodeBlock1()
    {
        print(String(sum(NUMBERS))[range_el(0, 10)]);
    }
} code_block_1;


# 14 [translation of Java solution]
BigInt = int

LIMIT = 1_000_000
CACHE_SIZE = LIMIT

collatzChainLengthCache = [0] * CACHE_SIZE

def collatzChainLength(n : BigInt) -> int:
    def collatzChainLengthDirect(n : BigInt):
        if n == 1:
            return 1
        elif n % 2 == 0:
            return collatzChainLength(n // 2) + 1
        else:
            return collatzChainLength(n * 3 + 1) + 1

    if n >= CACHE_SIZE:
        return collatzChainLengthDirect(n)

    index = int(n)
    if collatzChainLengthCache[index] == 0:
        collatzChainLengthCache[index] = collatzChainLengthDirect(n)
    return collatzChainLengthCache[index]

maxArg = -1
maxChain = 0
for i in range(1, LIMIT):
    chainLen = collatzChainLength(i)
    if chainLen > maxChain:
        maxArg = i
        maxChain = chainLen
print(maxArg)
===
V LIMIT = 1'000'000
V CACHE_SIZE = LIMIT

V collatzChainLengthCache = [0] * CACHE_SIZE

F collatzChainLength(BigInt n) -> Int
   F collatzChainLengthDirect(BigInt n)
      I n == 1
         R 1
      E I n % 2 == 0
         R collatzChainLength(n I/ 2) + 1
      E
         R collatzChainLength(n * 3 + 1) + 1

   I n >= :CACHE_SIZE
      R collatzChainLengthDirect(n)

   V index = Int(n)
   I :collatzChainLengthCache[index] == 0
      :collatzChainLengthCache[index] = collatzChainLengthDirect(n)
   R :collatzChainLengthCache[index]

V maxArg = -1
V maxChain = 0
L(i) 1 .< LIMIT
   V chainLen = collatzChainLength(i)
   I chainLen > maxChain
      maxArg = i
      maxChain = chainLen
print(maxArg)
===
auto LIMIT = 1'000'000;
auto CACHE_SIZE = LIMIT;

auto collatzChainLengthCache = create_array({0}) * CACHE_SIZE;

int collatzChainLength(const BigInt &n)
{
    auto collatzChainLengthDirect = [](const BigInt &n)
    {
        if (n == 1)
            return 1;
        else if (mod(n, 2) == 0)
            return collatzChainLength(idiv(n, 2)) + 1;
        else
            return collatzChainLength(n * 3 + 1) + 1;
    };

    if (n >= ::CACHE_SIZE)
        return collatzChainLengthDirect(n);

    auto index = to_int(n);
    if (::collatzChainLengthCache[index] == 0)
        ::collatzChainLengthCache.set(index, collatzChainLengthDirect(n));
    return ::collatzChainLengthCache[index];
}

auto maxArg = -1;
auto maxChain = 0;

struct CodeBlock1
{
    CodeBlock1()
    {
        for (auto i : range_el(1, LIMIT)) {
            auto chainLen = collatzChainLength(i);
            if (chainLen > maxChain) {
                maxArg = i;
                maxChain = chainLen;
            }
        }
        print(maxArg);
    }
} code_block_1;


# 15
import math
BigInt = int

def binomial(n : BigInt, k : BigInt):
    assert BigInt(0) <= k <= n
    return math.factorial(n) // (math.factorial(k) * math.factorial(n - k))

print(binomial(40, 20))
===
F binomial(BigInt n, BigInt k)
   assert(k C BigInt(0) .. n)
   R factorial(n) I/ (factorial(k) * factorial(n - k))

print(binomial(40, 20))
===
auto binomial(const BigInt &n, const BigInt &k)
{
    assert(in(k, range_ee(BigInt(0), n)));
    return idiv(factorial(n), (factorial(k) * factorial(n - k)));
}

struct CodeBlock1
{
    CodeBlock1()
    {
        print(binomial(40, 20));
    }
} code_block_1;


# 16
BigInt = int

n = BigInt(2)**1000
print(sum(int(c) for c in str(n)))
===
V n = BigInt(2) ^ 1000
print(sum(String(n).map(c -> Int(c))))
===
auto n = pow(BigInt(2), 1000);

struct CodeBlock1
{
    CodeBlock1()
    {
        print(sum_map(String(n), [](const auto &c){return to_int(c);}));
    }
} code_block_1;


# 17
ONES = ["zero", "one", "two", "three", "four", "five", "six", "seven", "eight", "nine",
        "ten", "eleven", "twelve", "thirteen", "fourteen", "fifteen", "sixteen", "seventeen", "eighteen", "nineteen"]
TENS = ["", "", "twenty", "thirty", "forty", "fifty", "sixty", "seventy", "eighty", "ninety"]

def to_english(n):
    if 0 <= n < 20:
        return ONES[n]
    elif 20 <= n < 100:
        return TENS[n // 10] + (ONES[n % 10] if (n % 10 != 0) else "")
    elif 100 <= n < 1000:
        return ONES[n // 100] + "hundred" + (("and" + to_english(n % 100)) if (n % 100 != 0) else "")
    elif 1000 <= n < 1000000:
        return to_english(n // 1000) + "thousand" + (to_english(n % 1000) if (n % 1000 != 0) else "")
    else:
        raise ValueError(n)

print(sum(len(to_english(i)) for i in range(1, 1001)))
===
V ONES = [‘zero’, ‘one’, ‘two’, ‘three’, ‘four’, ‘five’, ‘six’, ‘seven’, ‘eight’, ‘nine’, ‘ten’, ‘eleven’, ‘twelve’, ‘thirteen’, ‘fourteen’, ‘fifteen’, ‘sixteen’, ‘seventeen’, ‘eighteen’, ‘nineteen’]
V TENS = [‘’, ‘’, ‘twenty’, ‘thirty’, ‘forty’, ‘fifty’, ‘sixty’, ‘seventy’, ‘eighty’, ‘ninety’]

F to_english(n)
   I n C 0.<20
      R :ONES[n]
   E I n C 20.<100
      R :TENS[n I/ 10]‘’(I (n % 10 != 0) {:ONES[n % 10]} E ‘’)
   E I n C 100.<1000
      R :ONES[n I/ 100]‘hundred’(I (n % 100 != 0) {(‘and’to_english(n % 100))} E ‘’)
   E I n C 1000.<1000000
      R to_english(n I/ 1000)‘thousand’(I (n % 1000 != 0) {to_english(n % 1000)} E ‘’)
   E
      X.throw ValueError(n)

print(sum((1..1000).map(i -> to_english(i).len)))
===
auto ONES = create_array({u"zero"_S, u"one"_S, u"two"_S, u"three"_S, u"four"_S, u"five"_S, u"six"_S, u"seven"_S, u"eight"_S, u"nine"_S, u"ten"_S, u"eleven"_S, u"twelve"_S, u"thirteen"_S, u"fourteen"_S, u"fifteen"_S, u"sixteen"_S, u"seventeen"_S, u"eighteen"_S, u"nineteen"_S});
auto TENS = create_array({u""_S, u""_S, u"twenty"_S, u"thirty"_S, u"forty"_S, u"fifty"_S, u"sixty"_S, u"seventy"_S, u"eighty"_S, u"ninety"_S});

template <typename T1> auto to_english(const T1 &n)
{
    if (in(n, range_el(0, 20)))
        return ::ONES[n];
    else if (in(n, range_el(20, 100)))
        return ::TENS[idiv(n, 10)] & ((mod(n, 10) != 0) ? ::ONES[mod(n, 10)] : u""_S);
    else if (in(n, range_el(100, 1000)))
        return ::ONES[idiv(n, 100)] & u"hundred"_S & ((mod(n, 100) != 0) ? (u"and"_S & to_english(mod(n, 100))) : u""_S);
    else if (in(n, range_el(1000, 1000000)))
        return to_english(idiv(n, 1000)) & u"thousand"_S & ((mod(n, 1000) != 0) ? to_english(mod(n, 1000)) : u""_S);
    else
        throw ValueError(n);
}

struct CodeBlock1
{
    CodeBlock1()
    {
        print(sum_map(range_ee(1, 1000), [](const auto &i){return to_english(i).len();}));
    }
} code_block_1;


# 18
triangle = [  # Mutable
    [75],
    [95,64],
    [17,47,82],
    [18,35,87,10],
    [20, 4,82,47,65],
    [19, 1,23,75, 3,34],
    [88, 2,77,73, 7,63,67],
    [99,65, 4,28, 6,16,70,92],
    [41,41,26,56,83,40,80,70,33],
    [41,48,72,33,47,32,37,16,94,29],
    [53,71,44,65,25,43,91,52,97,51,14],
    [70,11,33,28,77,73,17,78,39,68,17,57],
    [91,71,52,38,17,14,91,43,58,50,27,29,48],
    [63,66, 4,68,89,53,67,30,73,16,69,87,40,31],
    [ 4,62,98,27,23, 9,70,98,73,93,38,53,60, 4,23],
]

for i in range(len(triangle) - 2, -1, -1):
    for j in range(len(triangle[i])):
        triangle[i][j] += max(triangle[i + 1][j], triangle[i + 1][j + 1])
print(triangle[0][0])
===
V triangle = [[75], [95, 64], [17, 47, 82], [18, 35, 87, 10], [20, 4, 82, 47, 65], [19, 1, 23, 75, 3, 34], [88, 2, 77, 73, 7, 63, 67], [99, 65, 4, 28, 6, 16, 70, 92], [41, 41, 26, 56, 83, 40, 80, 70, 33], [41, 48, 72, 33, 47, 32, 37, 16, 94, 29], [53, 71, 44, 65, 25, 43, 91, 52, 97, 51, 14], [70, 11, 33, 28, 77, 73, 17, 78, 39, 68, 17, 57], [91, 71, 52, 38, 17, 14, 91, 43, 58, 50, 27, 29, 48], [63, 66, 4, 68, 89, 53, 67, 30, 73, 16, 69, 87, 40, 31], [4, 62, 98, 27, 23, 9, 70, 98, 73, 93, 38, 53, 60, 4, 23]]

L(i) (triangle.len - 2 .< -1).step(-1)
   L(j) 0 .< triangle[i].len
      triangle[i][j] += max(triangle[i + 1][j], triangle[i + 1][j + 1])
print(triangle[0][0])
===
auto triangle = create_array({create_array({75}), create_array({95, 64}), create_array({17, 47, 82}), create_array({18, 35, 87, 10}), create_array({20, 4, 82, 47, 65}), create_array({19, 1, 23, 75, 3, 34}), create_array({88, 2, 77, 73, 7, 63, 67}), create_array({99, 65, 4, 28, 6, 16, 70, 92}), create_array({41, 41, 26, 56, 83, 40, 80, 70, 33}), create_array({41, 48, 72, 33, 47, 32, 37, 16, 94, 29}), create_array({53, 71, 44, 65, 25, 43, 91, 52, 97, 51, 14}), create_array({70, 11, 33, 28, 77, 73, 17, 78, 39, 68, 17, 57}), create_array({91, 71, 52, 38, 17, 14, 91, 43, 58, 50, 27, 29, 48}), create_array({63, 66, 4, 68, 89, 53, 67, 30, 73, 16, 69, 87, 40, 31}), create_array({4, 62, 98, 27, 23, 9, 70, 98, 73, 93, 38, 53, 60, 4, 23})});

struct CodeBlock1
{
    CodeBlock1()
    {
        for (auto i : range_el(triangle.len() - 2, -1).step(-1))
            for (auto j : range_el(0, triangle[i].len()))
                triangle[i][j] += max(triangle[i + 1][j], triangle[i + 1][j + 1]);
        print(_get<0>(_get<0>(triangle)));
    }
} code_block_1;


# 19 [translation of Java solution]
def dayOfWeek(year, month, day):
    m = (month - 3 + 4800) % 4800
    y = (year + m // 12) % 400
    m %= 12
    return (y + y//4 - y//100 + (13 * m + 2) // 5 + day + 2) % 7

count = 0
for y in range(1901, 2001):
    for m in range(1, 13):
        if dayOfWeek(y, m, 1) == 0:
            count += 1
print(count)
===
F dayOfWeek(year, month, day)
   V m = (month - 3 + 4800) % 4800
   V y = (year + m I/ 12) % 400
   m %= 12
   R (y + y I/ 4 - y I/ 100 + (13 * m + 2) I/ 5 + day + 2) % 7

V count = 0
L(y) 1901..2000
   L(m) 1..12
      I dayOfWeek(y, m, 1) == 0
         count++
print(count)
===
template <typename T1, typename T2, typename T3> auto dayOfWeek(const T1 &year, const T2 &month, const T3 &day)
{
    auto m = mod((month - 3 + 4800), 4800);
    auto y = mod((year + idiv(m, 12)), 400);
    m %= 12;
    return mod((y + idiv(y, 4) - idiv(y, 100) + idiv((13 * m + 2), 5) + day + 2), 7);
}

auto count = 0;

struct CodeBlock1
{
    CodeBlock1()
    {
        for (auto y : range_ee(1901, 2000))
            for (auto m : range_ee(1, 12))
                if (dayOfWeek(y, m, 1) == 0)
                    count++;
        print(count);
    }
} code_block_1;