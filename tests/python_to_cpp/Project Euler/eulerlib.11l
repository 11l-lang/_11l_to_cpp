F popcount(Int x) -> Int
   R bin(x).count(‘1’)

F sqrtb(BigInt x) -> BigInt
   assert(x >= 0)
   BigInt i = 1
   L i * i <= x
      i *= 2
   BigInt y = 0
   L i > 0
      I (y + i) ^ 2 <= x
         y += i
      i I/= 2
   R y

F is_square(x)
   I x < 0
      R 0B
   V y = Int(sqrt(x))
   R y * y == x

F is_prime(Int x)
   I x <= 1
      R 0B
   E I x <= 3
      R 1B
   E I x % 2 == 0
      R 0B
   E
      L(i) (3 .. Int(sqrt(x))).step(2)
         I x % i == 0
            R 0B
      R 1B

F list_primality(n)
   V result = [1B] * (n + 1)
   result[0] = result[1] = 0B
   L(i) 0 .. Int(sqrt(n))
      I result[i]
         L(j) (i * i .< result.len).step(i)
            result[j] = 0B
   R result

F list_primes(n)
   R enumerate(list_primality(n)).filter((i, isprime) -> isprime).map((i, isprime) -> i)

F list_totients(n)
   V result = Array(0 .. n)
   L(i) 2 .< result.len
      I result[i] == i
         L(j) (i .< result.len).step(i)
            result[j] -= result[j] I/ i
   R result

F binomial(BigInt n, BigInt k)
   assert(k C BigInt(0) .. n)
   R factorial(n) I/ (factorial(k) * factorial(n - k))

F reciprocal_mod(Int =x, Int m) -> Int
   assert(x C 0 .< m)

   Int y = x
   x = m
   Int a = 0
   Int b = 1
   L y != 0
      (a, b) = (b, a - x I/ y * b)
      (x, y) = (y, x % y)
   I x == 1
      R I a >= 0 {a} E a + m
   E
      X ValueError(‘Reciprocal does not exist’)
