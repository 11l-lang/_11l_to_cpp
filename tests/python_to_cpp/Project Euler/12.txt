# 120
print(sum(i * (i - (2 if i % 2 == 0 else 1)) for i in range(3, 1001)))
===
print(sum((3..1000).map(i -> i * (i - (I i % 2 == 0 {2} E 1)))))
===
struct CodeBlock1
{
    CodeBlock1()
    {
        print(sum_map(range_ee(3, 1000), [](const auto &i){return i * (i - (mod(i, 2) == 0 ? 2 : 1));}));
    }
} code_block_1;


# 121
import math
Int64 = int

TURNS = 15
# Dynamic programming
ways = [[Int64(1)]]
for i in range(1, TURNS + 1):
    row = [Int64(0)] * 0
    for j in range(i + 1):
        temp = Int64(0)
        if j < i:
            temp = ways[i - 1][j] * i
        if j > 0:
            temp += ways[i - 1][j - 1]
        row.append(temp)
    ways.append(row)

numer = sum(ways[TURNS][i] for i in range(TURNS // 2 + 1, TURNS + 1))
denom = math.factorial(Int64(TURNS + 1))
print(denom // numer)
===
V TURNS = 15
V ways = [[Int64(1)]]
L(i) 1 .. TURNS
   V row = [Int64(0)] * 0
   L(j) 0 .. i
      V temp = Int64(0)
      I j < i
         temp = ways[i - 1][j] * i
      I j > 0
         temp += ways[i - 1][j - 1]
      row.append(temp)
   ways.append(row)

V numer = sum((TURNS I/ 2 + 1 .. TURNS).map(i -> :ways[:TURNS][i]))
V denom = factorial(Int64(TURNS + 1))
print(denom I/ numer)
===
auto TURNS = 15;
auto ways = create_array({create_array({to_int64(1)})});

struct CodeBlock1
{
    CodeBlock1()
    {
        for (auto i : range_ee(1, TURNS)) {
            auto row = create_array({to_int64(0)}) * 0;
            for (auto j : range_ee(0, i)) {
                auto temp = to_int64(0);
                if (j < i)
                    temp = ways[i - 1][j] * i;
                if (j > 0)
                    temp += ways[i - 1][j - 1];
                row.append(temp);
            }
            ways.append(row);
        }
    }
} code_block_1;

auto numer = sum_map(range_ee(idiv(TURNS, 2) + 1, TURNS), [](const auto &i){return ::ways[::TURNS][i];});
auto denom = factorial(to_int64(TURNS + 1));

struct CodeBlock2
{
    CodeBlock2()
    {
        print(idiv(denom, numer));
    }
} code_block_2;


# 122
import itertools

# Set up initial array of known/unknown minimum operation counts
LIMIT = 200
minoperations = [0, 0] + [-1] * (LIMIT - 1)
numunknown = [LIMIT - 1]  # Use list instead of scalar to work around Python 2's broken scoping

# Recursively builds up chains and compares them to chain lengths already found.
def explore_chains(chain : list, maxops):
    # Depth-based termination or early exit
    if len(chain) > maxops or numunknown[0] == 0:
        return

    # Try all unordered pairs of values in the current chain
    max = chain[-1]  # Peek at top
    for i in reversed(range(len(chain))):
        for j in reversed(range(i + 1)):
            x = chain[i] + chain[j]
            if x <= max:
                break  # Early exit due to ascending order
            if x <= LIMIT:
                # Append x to the current chain and recurse
                chain.append(x)
                if minoperations[x] == -1:
                    # For each unique value of x, we set minoperations[x] only once
                    # because we do progressive deepening in the depth-first search
                    minoperations[x] = len(chain) - 1
                    numunknown[0] -= 1
                explore_chains(chain, maxops)
                chain.pop()

# Perform bounded depth-first search with incrementing depth
for ops in itertools.count(1):
    if numunknown[0] == 0:
        # Add up the results
        print(sum(minoperations))
        break
    explore_chains([1], ops)
===
V LIMIT = 200
V minoperations = [0, 0] [+] [-1] * (LIMIT - 1)
V numunknown = [LIMIT - 1]

F explore_chains(&chain, maxops)
   I chain.len > maxops | :numunknown[0] == 0
      R

   V max = chain.last
   L(i) reversed(0 .< chain.len)
      L(j) reversed(0 .. i)
         V x = chain[i] + chain[j]
         I x <= max
            L.break
         I x <= :LIMIT
            chain.append(x)
            I :minoperations[x] == -1
               :minoperations[x] = chain.len - 1
               :numunknown[0]--
            explore_chains(&chain, maxops)
            chain.pop()

L(ops) 1..
   I numunknown[0] == 0
      print(sum(minoperations))
      L.break
   explore_chains(&[1], ops)
===
auto LIMIT = 200;
auto minoperations = create_array({0, 0}) + create_array({-1}) * (LIMIT - 1);
auto numunknown = create_array({LIMIT - 1});

template <typename T1, typename T2> auto explore_chains(T1 &chain, const T2 &maxops)
{
    if (chain.len() > maxops || _get<0>(::numunknown) == 0)
        return;

    auto max = chain.last();
    for (auto &&i : reversed(range_el(0, chain.len())))
        for (auto &&j : reversed(range_ee(0, i))) {
            auto x = chain[i] + chain[j];
            if (x <= max)
                break;
            if (x <= ::LIMIT) {
                chain.append(x);
                if (::minoperations[x] == -1) {
                    ::minoperations.set(x, chain.len() - 1);
                    _get<0>(::numunknown)--;
                }
                explore_chains(chain, maxops);
                chain.pop();
            }
        }
}

struct CodeBlock1
{
    CodeBlock1()
    {
        for (auto ops : range_ei(1)) {
            if (_get<0>(numunknown) == 0) {
                print(sum(minoperations));
                break;
            }
            explore_chains(make_ref(create_array({1})), ops);
        }
    }
} code_block_1;


# 123
import eulerlib
Int64 = int

primes = eulerlib.list_primes(1000000)
for n in range(5, len(primes), 2):
    rem = Int64(n) * primes[n - 1] * 2
    if rem > 10000000000:
        print(n)
        break
===
V primes = eulerlib:list_primes(1000000)
L(n) (5 .< primes.len).step(2)
   V rem = Int64(n) * primes[n - 1] * 2
   I rem > 10000000000
      print(n)
      L.break
===
namespace eulerlib {
#include "eulerlib.hpp"
}

auto primes = eulerlib::list_primes(1000000);

struct CodeBlock1
{
    CodeBlock1()
    {
        for (auto n : range_el(5, primes.len()).step(2)) {
            auto rem = to_int64(n) * primes[n - 1] * 2;
            if (rem > 10000000000) {
                print(n);
                break;
            }
        }
    }
} code_block_1;


# 124
LIMIT = 100000

# Modification of the sieve of Eratosthenes
rads = [0] + [1] * LIMIT
for i in range(2, len(rads)):
    if rads[i] == 1:
        for j in range(i, len(rads), i):
            rads[j] *= i

data = sorted((rad, i) for i, rad in enumerate(rads))
print(data[10000][1])
===
V LIMIT = 100000

V rads = [0] [+] [1] * LIMIT
L(i) 2 .< rads.len
   I rads[i] == 1
      L(j) (i .< rads.len).step(i)
         rads[j] *= i

V data = sorted(enumerate(rads).map((i, rad) -> (rad, i)))
print(data[10000][1])
===
auto LIMIT = 100000;

auto rads = create_array({0}) + create_array({1}) * LIMIT;

struct CodeBlock1
{
    CodeBlock1()
    {
        for (auto i : range_el(2, rads.len()))
            if (rads[i] == 1)
                for (auto j : range_el(i, rads.len()).step(i))
                    rads[j] *= i;
    }
} code_block_1;

auto data = sorted(enumerate(rads).map([](const auto &i, const auto &rad){return make_tuple(rad, i);}));

struct CodeBlock2
{
    CodeBlock2()
    {
        print(_get<1>(_get<10000>(data)));
    }
} code_block_2;


# 125
import itertools

nums = set() # UInt32
for i in range(1, 10001):
    sigma = i * i
    for j in itertools.count(i + 1):
        sigma += j * j
        if sigma >= 100000000:
            break
        s = str(sigma)
        if s == s[ : : -1]:  # Is palindrome
            nums.add(sigma)
print(sum(nums))
===
V nums = Set[UInt32]()
L(i) 1..10000
   V sigma = i * i
   L(j) i + 1..
      sigma += j * j
      I sigma >= 100000000
         L.break
      V s = String(sigma)
      I s == reversed(s)
         nums.add(sigma)
print(sum(nums))
===
auto nums = Set<uint32_t>();

struct CodeBlock1
{
    CodeBlock1()
    {
        for (auto i : range_ee(1, 10000)) {
            auto sigma = i * i;
            for (auto j : range_ei(i + 1)) {
                sigma += j * j;
                if (sigma >= 100000000)
                    break;
                auto s = String(sigma);
                if (s == reversed(s))
                    nums.add(sigma);
            }
        }
        print(sum(nums));
    }
} code_block_1;


---
# 126 [not implemented]


# 127
import math
Int64 = int

LIMIT = 120000

# Modification of the sieve of Eratosthenes
rads = [Int64(0)] + [Int64(1)] * (LIMIT - 1)
for i in range(2, len(rads)):
    if rads[i] == 1:
        for j in range(i, len(rads), i):
            rads[j] *= i

sortedrads = sorted((rad, n) for n, rad in enumerate(rads))
sortedrads = sortedrads[1 : ]  # Get rid of the (0, 0) entry

ans = 0
for c in range(2, LIMIT):
    for rad, a in sortedrads:
        rad *= rads[c]
        if rad >= c:
            break
        b = c - a
        if a < b and rad * rads[b] < c and math.gcd(a, b) == 1:
            ans += c
print(ans)
===
V LIMIT = 120000

V rads = [Int64(0)] [+] [Int64(1)] * (LIMIT - 1)
L(i) 2 .< rads.len
   I rads[i] == 1
      L(j) (i .< rads.len).step(i)
         rads[j] *= i

V sortedrads = sorted(enumerate(rads).map((n, rad) -> (rad, n)))
sortedrads = sortedrads[1..]

V ans = 0
L(c) 2 .< LIMIT
   L(=rad, a) sortedrads
      rad *= rads[c]
      I rad >= c
         L.break
      V b = c - a
      I a < b & rad * rads[b] < c & gcd(a, b) == 1
         ans += c
print(ans)
===
auto LIMIT = 120000;

auto rads = create_array({to_int64(0)}) + create_array({to_int64(1)}) * (LIMIT - 1);

struct CodeBlock1
{
    CodeBlock1()
    {
        for (auto i : range_el(2, rads.len()))
            if (rads[i] == 1)
                for (auto j : range_el(i, rads.len()).step(i))
                    rads[j] *= i;
    }
} code_block_1;

auto sortedrads = sorted(enumerate(rads).map([](const auto &n, const auto &rad){return make_tuple(rad, n);}));

struct CodeBlock2
{
    CodeBlock2()
    {
        sortedrads = sortedrads[range_ei(1)];
    }
} code_block_2;

auto ans = 0;

struct CodeBlock3
{
    CodeBlock3()
    {
        for (auto c : range_el(2, LIMIT))
            for (auto [rad, a] : sortedrads) {
                rad *= rads[c];
                if (rad >= c)
                    break;
                auto b = c - a;
                if (a < b && rad * rads[b] < c && gcd(a, b) == 1)
                    ans += c;
            }
        print(ans);
    }
} code_block_3;


# 128
import eulerlib, itertools
Int64 = int

TARGET = 2000  # Must be at least 3
count = 2  # Because n = 1 and 2 satisfy PD(n) = 3
for ring in itertools.count(2):
    if all(map(eulerlib.is_prime, (ring * 6 - 1, ring * 6 + 1, ring * 12 + 5))):
        count += 1
        if count == TARGET:
            print(Int64(ring) * (ring - 1) * 3 + 2)
            break
    if all(map(eulerlib.is_prime, (ring * 6 - 1, ring * 6 + 5, ring * 12 - 7))):
        count += 1
        if count == TARGET:
            print(Int64(ring) * (ring + 1) * 3 + 1)
            break
===
V TARGET = 2000
V count = 2
L(ring) 2..
   I all((ring * 6 - 1, ring * 6 + 1, ring * 12 + 5).map(eulerlib:is_prime))
      count++
      I count == TARGET
         print(Int64(ring) * (ring - 1) * 3 + 2)
         L.break
   I all((ring * 6 - 1, ring * 6 + 5, ring * 12 - 7).map(eulerlib:is_prime))
      count++
      I count == TARGET
         print(Int64(ring) * (ring + 1) * 3 + 1)
         L.break
===
namespace eulerlib {
#include "eulerlib.hpp"
}

auto TARGET = 2000;
auto count = 2;

struct CodeBlock1
{
    CodeBlock1()
    {
        for (auto ring : range_ei(2)) {
            if (all_map(make_tuple(ring * 6 - 1, ring * 6 + 1, ring * 12 + 5), eulerlib::is_prime)) {
                count++;
                if (count == TARGET) {
                    print(to_int64(ring) * (ring - 1) * 3 + 2);
                    break;
                }
            }
            if (all_map(make_tuple(ring * 6 - 1, ring * 6 + 5, ring * 12 - 7), eulerlib::is_prime)) {
                count++;
                if (count == TARGET) {
                    print(to_int64(ring) * (ring + 1) * 3 + 1);
                    break;
                }
            }
        }
    }
} code_block_1;


# 129
import itertools

# Returns the smallest k such that R(k) is divisible by n.
def least_divisible_repunit(n):
    if n % 2 == 0 or n % 5 == 0:
        return 0
    k = 1
    s = 1  # Loop invariant: Equal to R(k) mod n
    p = 1  # Loop invariant: Equal to 10^k mod n
    while s % n != 0:
        k += 1
        p = p * 10 % n
        s = (s + p) % n
    return k

LIMIT = 10**6
for n in itertools.count(LIMIT):
    if least_divisible_repunit(n) > LIMIT:
        print(n)
        break
===
F least_divisible_repunit(n)
   I n % 2 == 0 | n % 5 == 0
      R 0
   V k = 1
   V s = 1
   V p = 1
   L s % n != 0
      k++
      p = p * 10 % n
      s = (s + p) % n
   R k

V LIMIT = 10 ^ 6
L(n) LIMIT..
   I least_divisible_repunit(n) > LIMIT
      print(n)
      L.break
===
template <typename T1> auto least_divisible_repunit(const T1 &n)
{
    if (mod(n, 2) == 0 || mod(n, 5) == 0)
        return 0;
    auto k = 1;
    auto s = 1;
    auto p = 1;
    while (mod(s, n) != 0) {
        k++;
        p = mod(p * 10, n);
        s = mod((s + p), n);
    }
    return k;
}

auto LIMIT = pow(10, 6);

struct CodeBlock1
{
    CodeBlock1()
    {
        for (auto n : range_ei(LIMIT))
            if (least_divisible_repunit(n) > LIMIT) {
                print(n);
                break;
            }
    }
} code_block_1;