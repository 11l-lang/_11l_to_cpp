---
# 140 [not implemented]


---
# 141 [not implemented]


# 142
from typing import List
import math, itertools

issquare : List[bool]

def find_sum(limit):
    for a in itertools.count(1):
        if a * a >= limit:
            break
        for b in reversed(range(1, a)):
            if (a + b) % 2 != 0:  # Need them to be both odd or both even so that we get integers for x and y
                continue
            x = (a * a + b * b) // 2
            y = (a * a - b * b) // 2
            if x + y + 1 >= limit:  # Because z >= 1
                continue

            zlimit = min(y, limit - x - y)
            for c in itertools.count(int(math.sqrt(y)) + 1):
                z = c * c - y
                if z >= zlimit:
                    break
                if issquare[x + z] and issquare[x - z] and issquare[y - z]:
                    return x + y + z
    return -1

sumlimit = 10
# Raise the limit until a sum is found
while True:
    issquare = [False] * sumlimit
    for i in range(int(math.sqrt(len(issquare) - 1)) + 1):
        issquare[i * i] = True

    sum = find_sum(sumlimit)
    if sum != -1:
        sum = sumlimit
        break
    sumlimit *= 10

# Lower the limit until now sum is found
while True:
    sum = find_sum(sumlimit)
    if sum == -1:  # No smaller sum found
        print(sumlimit)
        break
    sumlimit = sum
===
[Bool] issquare

F find_sum(limit)
   L(a) 1..
      I a * a >= limit
         L.break
      L(b) reversed(1 .< a)
         I (a + b) % 2 != 0
            L.continue
         V x = (a * a + b * b) I/ 2
         V y = (a * a - b * b) I/ 2
         I x + y + 1 >= limit
            L.continue

         V zlimit = min(y, limit - x - y)
         L(c) Int(sqrt(y)) + 1..
            V z = c * c - y
            I z >= zlimit
               L.break
            I :issquare[x + z] & :issquare[x - z] & :issquare[y - z]
               R x + y + z
   R -1

V sumlimit = 10
L
   issquare = [0B] * sumlimit
   L(i) 0 .. Int(sqrt(issquare.len - 1))
      issquare[i * i] = 1B

   V sum = find_sum(sumlimit)
   I sum != -1
      sum = sumlimit
      L.break
   sumlimit *= 10

L
   V sum = find_sum(sumlimit)
   I sum == -1
      print(sumlimit)
      L.break
   sumlimit = sum
===
Array<char> issquare;

template <typename T1> auto find_sum(const T1 &limit)
{
    for (auto a : range_ei(1)) {
        if (a * a >= limit)
            break;
        for (auto &&b : reversed(range_el(1, a))) {
            if (mod((a + b), 2) != 0)
                continue;
            auto x = idiv((a * a + b * b), 2);
            auto y = idiv((a * a - b * b), 2);
            if (x + y + 1 >= limit)
                continue;

            auto zlimit = min(y, limit - x - y);
            for (auto c : range_ei(to_int(sqrt(y)) + 1)) {
                auto z = c * c - y;
                if (z >= zlimit)
                    break;
                if (::issquare[x + z] && ::issquare[x - z] && ::issquare[y - z])
                    return x + y + z;
            }
        }
    }
    return -1;
}

auto sumlimit = 10;

struct CodeBlock1
{
    CodeBlock1()
    {
        while (true) {
            issquare = create_array({false}) * sumlimit;
            for (auto i : range_ee(0, to_int(sqrt(issquare.len() - 1))))
                issquare.set(i * i, true);

            auto sum = find_sum(sumlimit);
            if (sum != -1) {
                sum = sumlimit;
                break;
            }
            sumlimit *= 10;
        }

        while (true) {
            auto sum = find_sum(sumlimit);
            if (sum == -1) {
                print(sumlimit);
                break;
            }
            sumlimit = sum;
        }
    }
} code_block_1;


---
# 143 [not implemented]


---
# 144 [not implemented]


# 145
def count_reversibles(numdigits):
    if numdigits % 2 == 0:
        return 20 * 30**(numdigits // 2 - 1)
    elif numdigits % 4 == 3:
        return 100 * 500**((numdigits - 3) // 4)
    elif numdigits % 4 == 1:
        return 0
    else:
        raise AssertionError('')

print(sum(count_reversibles(d) for d in range(2, 10)))
===
F count_reversibles(numdigits)
   I numdigits % 2 == 0
      R 20 * 30 ^ (numdigits I/ 2 - 1)
   E I numdigits % 4 == 3
      R 100 * 500 ^ ((numdigits - 3) I/ 4)
   E I numdigits % 4 == 1
      R 0
   E
      X AssertionError(‘’)

print(sum((2..9).map(d -> count_reversibles(d))))
===
template <typename T1> auto count_reversibles(const T1 &numdigits)
{
    if (mod(numdigits, 2) == 0)
        return 20 * pow(30, (idiv(numdigits, 2) - 1));
    else if (mod(numdigits, 4) == 3)
        return 100 * pow(500, (idiv((numdigits - 3), 4)));
    else if (mod(numdigits, 4) == 1)
        return 0;
    else
        throw AssertionError(u""_S);
}

struct CodeBlock1
{
    CodeBlock1()
    {
        print(sum_map(range_ee(2, 9), [](const auto &d){return count_reversibles(d);}));
    }
} code_block_1;


---
# 146 [too long computation time]
import eulerlib, math
Int64 = int

LIMIT = 150000000

INCREMENTS = [1, 3, 7, 9, 13, 27]  # Must be in non-decreasing order
NON_INCREMENTS = set(range(INCREMENTS[-1])) - set(INCREMENTS)

maxnumber = Int64(LIMIT)**2 + INCREMENTS[-1]
primes = eulerlib.list_primes(int(math.sqrt(maxnumber)))

def is_prime(n):
    end = int(math.sqrt(n))
    for p in primes:
        if p > end:
            break
        if n % p == 0:
            return False
    return True

def has_consecutive_primes(n):
    # Generate the set of numbers to test for primality
    n2 = n**2
    temp = [(n2 + k) for k in INCREMENTS]

    # Test that each number is prime.
    # Note: The nesting of the loops can be reversed, but this way is much faster.
    if any((x != p and x % p == 0)
            for p in primes
            for x in temp):
        return False

    # Test that each number that is not an increment is composite.
    # This checks that the prime numbers we found are in fact consecutive.
    return all((not is_prime(n2 + k)) for k in NON_INCREMENTS)

print(sum(n for n in range(0, LIMIT, 10) if has_consecutive_primes(n)))


---
# 147 [not implemented]


---
# 148 [not implemented]


# 149
BigInt = int

SIZE = 2000

# Generate the pseudorandom sequence according to the lagged Fibonacci generator
randseq = [0] * 0
for i in range(SIZE**2):
    k = i + 1
    if k <= 55:
        randseq.append(int((BigInt(100003) - BigInt(200003)*k + BigInt(300007)*k*k*k) % 1000000) - 500000)
    else:
        randseq.append((randseq[-24] + randseq[-55] + 1000000) % 1000000 - 500000)

# Reshape the sequence into into a 2D array
grid = [randseq[i * SIZE : (i + 1) * SIZE] for i in range(SIZE)]

# For the sequence of numbers in the grid at positions (x, y), (x+dx, y+dy), (x+2*dx, y+2*dy), ... until the
# last in-bounds indices, this function returns the maximum sum among all possible substrings of this sequence.
def get_max_substring_sum(x, y, dx, dy):
    result = 0
    current = 0
    while 0 <= x < SIZE and 0 <= y < SIZE:
        current = max(current + grid[y][x], 0)  # Reset the running sum if it goes negative
        result = max(current, result)  # Keep track of the best seen running sum
        x += dx
        y += dy
    return result

# Scan along all line directions and positions
ans = max(
    max([get_max_substring_sum(0, i, +1,  0),  # Horizontal from left edge
         get_max_substring_sum(i, 0,  0, +1),  # Vertical from top edge
         get_max_substring_sum(0, i, +1, +1),  # Diagonal from left edge
         get_max_substring_sum(i, 0, +1, +1),  # Diagonal from top edge
         get_max_substring_sum(i, 0, -1, +1),  # Anti-diagonal from top edge
         get_max_substring_sum(SIZE - 1, i, -1, +1)])  # Anti-diagonal from right edge
    for i in range(SIZE))
print(ans)
===
V SIZE = 2000

V randseq = [Int]()
L(i) 0 .< SIZE ^ 2
   V k = i + 1
   I k <= 55
      randseq.append(Int((BigInt(100003) - BigInt(200003) * k + BigInt(300007) * k * k * k) % 1000000) - 500000)
   E
      randseq.append((randseq[(len)-24] + randseq[(len)-55] + 1000000) % 1000000 - 500000)

V grid = (0 .< SIZE).map(i -> :randseq[i * :SIZE .< (i + 1) * :SIZE])

F get_max_substring_sum(=x, =y, dx, dy)
   V result = 0
   V current = 0
   L x C 0 .< :SIZE & y C 0 .< :SIZE
      current = max(current + :grid[y][x], 0)
      result = max(current, result)
      x += dx
      y += dy
   R result

V ans = max((0 .< SIZE).map(i -> max([get_max_substring_sum(0, i, +1, 0), get_max_substring_sum(i, 0, 0, +1), get_max_substring_sum(0, i, +1, +1), get_max_substring_sum(i, 0, +1, +1), get_max_substring_sum(i, 0, -1, +1), get_max_substring_sum(:SIZE - 1, i, -1, +1)])))
print(ans)
===
auto _SIZE_ = 2000;

auto randseq = Array<int>();

struct CodeBlock1
{
    CodeBlock1()
    {
        for (auto i : range_el(0, square(_SIZE_))) {
            auto k = i + 1;
            if (k <= 55)
                randseq.append(to_int(mod((BigInt(100003) - BigInt(200003) * k + BigInt(300007) * k * k * k), 1000000)) - 500000);
            else
                randseq.append(mod((randseq.at_plus_len( - 24) + randseq.at_plus_len( - 55) + 1000000), 1000000) - 500000);
        }
    }
} code_block_1;

auto grid = range_el(0, _SIZE_).map([](const auto &i){return ::randseq[range_el(i * ::_SIZE_, (i + 1) * ::_SIZE_)];});

template <typename T1, typename T2, typename T3, typename T4> auto get_max_substring_sum(T1 x, T2 y, const T3 &dx, const T4 &dy)
{
    auto result = 0;
    auto current = 0;
    while (in(x, range_el(0, ::_SIZE_)) && in(y, range_el(0, ::_SIZE_))) {
        current = max(current + ::grid[y][x], 0);
        result = max(current, result);
        x += dx;
        y += dy;
    }
    return result;
}

auto ans = max_map(range_el(0, _SIZE_), [](const auto &i){return max(create_array({get_max_substring_sum(0, i, +1, 0), get_max_substring_sum(i, 0, 0, +1), get_max_substring_sum(0, i, +1, +1), get_max_substring_sum(i, 0, +1, +1), get_max_substring_sum(i, 0, -1, +1), get_max_substring_sum(::_SIZE_ - 1, i, -1, +1)}));});

struct CodeBlock2
{
    CodeBlock2()
    {
        print(ans);
    }
} code_block_2;