# 243
import eulerlib, fractions

def compute():
    TARGET = fractions.Fraction(15499, 94744)
    totient = 1
    denominator = 1
    p = 2
    while True:
        totient *= p - 1
        denominator *= p
        # Note: At this point in the code, denominator is the product of one copy of each
        # prime number up to and including p, totient is equal to totient(denominator),
        # and totient/denominator = R'(2 * 3 * ... * p) (the pseudo-resilience).

        # Advance to the next prime
        while True:
            p += 1
            if eulerlib.is_prime(p):
                break

        # If the lower bound is below the target, there might be a suitable solution d such that
        # d's factorization only contains prime factors strictly below the current (advanced) value of p
        if fractions.Fraction(totient, denominator) < TARGET:
            # Try to find the lowest factor i such that R(i*d) < TARGET, if any.
            # Note that over this range of i, we have R'(d) = R'(i*d) < R(i*d).
            for i in range(1, p):
                numer = i * totient
                denom = i * denominator
                if fractions.Fraction(numer, denom - 1) < TARGET:
                    return denom

print(compute())
===
F compute()
   V TARGET = Fraction(15499, 94744)
   V totient = 1
   V denominator = 1
   V p = 2
   L
      totient *= p - 1
      denominator *= p

      L
         p++
         I eulerlib:is_prime(p)
            L.break

      I Fraction(totient, denominator) < TARGET
         L(i) 1 .< p
            V numer = i * totient
            V denom = i * denominator
            I Fraction(numer, denom - 1) < TARGET
               R denom

print(compute())
===
namespace eulerlib {
#include "eulerlib.hpp"
}

auto compute()
{
    auto TARGET = Fraction(15499, 94744);
    auto totient = 1;
    auto denominator = 1;
    auto p = 2;
    while (true) {
        totient *= p - 1;
        denominator *= p;

        while (true) {
            p++;
            if (eulerlib::is_prime(p))
                break;
        }

        if (Fraction(totient, denominator) < TARGET)
            for (auto i : range_el(1, p)) {
                auto numer = i * totient;
                auto denom = i * denominator;
                if (Fraction(numer, denom - 1) < TARGET)
                    return denom;
            }
    }
}

struct CodeBlock1
{
    CodeBlock1()
    {
        print(compute());
    }
} code_block_1;


# 249
import eulerlib
Int64 = int

LIMIT = 5000
MODULUS = Int64(10)**16

# Use dynamic programming. count[i] is the number of subsets of primes with the sum of i, modulo MODULUS.
count = [Int64(0)] * (LIMIT**2 // 2)
count[0] = 1
s = 0  # Sum of all primes seen so far, and thus the highest index among nonzero entries in 'count'
for p in eulerlib.list_primes(LIMIT):
    for i in reversed(range(s + 1)):
        count[i + p] = (count[i + p] + count[i]) % MODULUS
    s += p

isprime = eulerlib.list_primality(s + 1)
ans : Int64 = 0
for i in range(s + 1):
    if isprime[i]:
        ans = (ans + count[i]) % MODULUS
print(ans)
===
V LIMIT = 5000
V MODULUS = Int64(10) ^ 16

V count = [Int64(0)] * (LIMIT ^ 2 I/ 2)
count[0] = 1
V s = 0
L(p) eulerlib:list_primes(LIMIT)
   L(i) reversed(0 .. s)
      count[i + p] = (count[i + p] + count[i]) % MODULUS
   s += p

V isprime = eulerlib:list_primality(s + 1)
Int64 ans = 0
L(i) 0 .. s
   I isprime[i]
      ans = (ans + count[i]) % MODULUS
print(ans)
===
namespace eulerlib {
#include "eulerlib.hpp"
}

auto LIMIT = 5000;
auto MODULUS = pow(to_int64(10), 16);

auto count = create_array({to_int64(0)}) * (idiv(square(LIMIT), 2));

struct CodeBlock1
{
    CodeBlock1()
    {
        _set<0>(count, 1);
    }
} code_block_1;

auto s = 0;

struct CodeBlock2
{
    CodeBlock2()
    {
        for (auto &&p : eulerlib::list_primes(LIMIT)) {
            for (auto &&i : reversed(range_ee(0, s)))
                count.set(i + p, mod((count[i + p] + count[i]), MODULUS));
            s += p;
        }
    }
} code_block_2;

auto isprime = eulerlib::list_primality(s + 1);
Int64 ans = 0;

struct CodeBlock3
{
    CodeBlock3()
    {
        for (auto i : range_ee(0, s))
            if (isprime[i])
                ans = mod((ans + count[i]), MODULUS);
        print(ans);
    }
} code_block_3;