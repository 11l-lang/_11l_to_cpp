‘ EXS24 to SFZ sample library metadata converter.

    Might work. Might awaken some forgotten trickster goddess and lure her to your computer. Enjoy.

    Copyright (c) 2013, vonred

    Permission to use, copy, modify, and/or distribute this software for any purpose with or without fee is
    hereby granted, provided that the above copyright notice and this permission notice appear in all copies.

    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE
    INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE
    FOR ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION,
    ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE. ’
//import sys
//import os
//import struct
[Byte] instrument_data

F chunk_size(instrument_data, offset)
   R 84 + UInt32.unpack_from(instrument_data, offset + 4)

T EXSChunk
   Int offset
   __size = 0

   F size()
      ‘ size is specified in bytes, at byte 4-8, and does not include common chunk elements;
			that is, does not include the first 84 bytes ’

      I .__size == 0
         .__size = chunk_size(:instrument_data, .offset)
      R .__size

   F id()
      ‘ return the chunk's id number; n.b. that this does not seem to actually be used --
			the sequence of chunks of each type in the file is used instead ’
      R UInt32.unpack_from(:instrument_data, .offset + 8)

   F name()
      ‘ the name of a chunk starts at byte 20, and has a max. length of 64 bytes;
			this is treated as a zero-terminated utf-8 string ’
      R :instrument_data[.offset + 20 .< .offset + 84].decode(‘utf-8’).split("\x00")[0]

   F display()
      ‘" display the raw chunk data in hexdump format ’
      X NotImplementedError()
‘
		for line in range(0, self.size(), 16):
			print("0x{0:04X}: ".format(line), end='')
			for i in range(0, 16, 4):
				for j in range(0, 4):
					index = line + i + j
					if index >= self.size():
						print("  ", end='')
					else:
						print("{0:02X}".format(instrument_data[self.offset + index]), end='')
				print(" ", end='')
			print(" ", end='')
			end = line + 16
			if end > self.size():
				end = self.size()
			for c in instrument_data[self.offset + line:self.offset + end]:
				if c > 13 and c < 128:
					print(chr(c), end='')
				else:
					print(" ", end='')
			print("")’
V EXSHeader_sig = 0000'0101

T EXSHeader(EXSChunk)
   F (offset)
      .offset = offset

      I !(offset == 0)
         X RuntimeError(‘Found header at location  other than beginning of file! offset is #.’.format(offset))

T EXSZone(EXSChunk)
   F (offset)
      .offset = offset

   F.const rootnote()
      R Byte.unpack_from(:instrument_data, .offset + 85)

   F finetune()
      R Int8.unpack_from(:instrument_data, .offset + 86)

   F pan()
      R Int8.unpack_from(:instrument_data, .offset + 87)

   F volumeadjust()
      R Int8.unpack_from(:instrument_data, .offset + 88)

   F.const startnote()
      R Byte.unpack_from(:instrument_data, .offset + 90)
   F.const endnote()
      R Byte.unpack_from(:instrument_data, .offset + 91)

   F minvel()
      R Byte.unpack_from(:instrument_data, .offset + 93)
   F maxvel()
      R Byte.unpack_from(:instrument_data, .offset + 94)

   F samplestart()
      R Int32.unpack_from(:instrument_data, .offset + 96)
   F sampleend()
      R Int32.unpack_from(:instrument_data, .offset + 100)

   F loopstart()
      R Int32.unpack_from(:instrument_data, .offset + 104)
   F loopend()
      R Int32.unpack_from(:instrument_data, .offset + 108)

   F _loop_()
      R Byte.unpack_from(:instrument_data, .offset + 117)

   F.const pitchtrack()
      R !(Byte.unpack_from(:instrument_data, .offset + 84) [&] 1)
   F oneshot()
      R Byte.unpack_from(:instrument_data, .offset + 84) [&] 2

   F.const group()
      V group = Int32.unpack_from(:instrument_data, .offset + 172)
      I group >= 0
         R group
      R 0

   F sampleindex()
      R UInt32.unpack_from(:instrument_data, .offset + 176)

T EXSGroup(EXSChunk)
   F (offset)
      .offset = offset

   F polyphony()
      R Byte.unpack_from(:instrument_data, .offset + 86)

   F trigger()
      R Byte.unpack_from(:instrument_data, .offset + 157)

   F output()
      R Byte.unpack_from(:instrument_data, .offset + 158)
   F sequence()
      R Int32.unpack_from(:instrument_data, .offset + 164)

T EXSSample(EXSChunk)
   F (offset)
      .offset = offset

   F length()
      R Int32.unpack_from(:instrument_data, .offset + 88)

   F rate()
      R Int32.unpack_from(:instrument_data, .offset + 92)

   F bitdepth()
      R Byte.unpack_from(:instrument_data, .offset + 96)

T EXSParam(EXSChunk)
   F (offset)
      .offset = offset

T EXSSamplePool
   [String] locations
   String base

   F ()
   {
   }

   F locate(=filename, search_depth = 1)
      ‘ try to locate the directory containing a sample; if found,
			it will be added to the list of known locations which are searched first ’
      V last = ‘’
      F search_location(String search) -> String
         I search C @.locations
            R ‘’
         V path = fs:path:canonical(fs:path:absolute(fs:path:join(@.base, search)))
         I path == @last
            R ‘’

         L(name) fs:list_dir(path)
            V location = fs:path:join(path, name)
            I fs:is_file(location)
               I name.lowercase() == @filename
                  @.locations.append(search)
                  R search
            E I fs:is_dir(location)
               location = @search_location(fs:path:join(search, name))
               I location != ‘’
                  R location
         R ‘’
      filename = filename.lowercase()

      L(location) .locations
         L(name) fs:list_dir(fs:path:join(.base, location))
            I name.lowercase() == filename
               I fs:is_file(fs:path:join(.base, location, filename))
                  R location
      V search = ‘’
      L(_i) 0 .< search_depth
         V location = search_location(search)
         I location != ‘’
            R location
         last = fs:path:canonical(fs:path:absolute(fs:path:join(.base, search)))
         search = fs:path:join(search, ‘..’)
      X RuntimeError(‘Couldn't locate sample #.!’.format(filename))
   F.virtual.abstract path(String filename) -> String

T EXSSamplePoolDummy(EXSSamplePool)
   String name

   F (name = ‘’)
      .name = name

   F.virtual.assign path(String filename) -> String
      R fs:path:join(.name, filename)

T EXSSamplePoolFixed(EXSSamplePool)
   F (path)
      I fs:is_dir(path)
         .base = fs:path:dir_name(path)
      E
         X RuntimeError(‘#.is not a valid path!’.format(path))

   F.virtual.assign path(String filename) -> String
      R fs:path:join(.base, .locate(filename), filename)

T EXSSamplePoolLocator(EXSSamplePool)
   F (exsfile_name)
      .base = fs:path:dir_name(exsfile_name)

   F.virtual.assign path(String filename) -> String
      R fs:path:join(.locate(filename, 4), filename)

T EXSInstrument
   EXSSamplePool pool
   String exsfile_name
   [EXSZone] zones
   [EXSGroup] groups
   [EXSSample] samples

   F (exsfile_name, sample_location = ‘’)
      .exsfile_name = exsfile_name

      I fs:file_size(exsfile_name) > 1024 * 1024
         X RuntimeError(‘EXS file is too large; will not parse! (size > 1 MebiByte)’)
      :instrument_data = File(exsfile_name).read_bytes()

      I UInt32.unpack_from_be(:instrument_data, 0) == EXSHeader_sig & :instrument_data[16.<20] == Bytes(‘SOBT’)
         X RuntimeError(‘File is a big endian EXS file; cannot parse!’)
      I !(UInt32.unpack_from(:instrument_data, 0) == EXSHeader_sig) & :instrument_data[16.<20] == Bytes(‘TBOS’)
         X RuntimeError(‘File is not an EXS file; will not parse!’)

      I sample_location == ‘’
         .pool = EXSSamplePoolLocator(exsfile_name)
      E
         .pool = EXSSamplePoolFixed(sample_location)
      V offset = 0
      V end = :instrument_data.len
      L offset < end
         V sig = UInt32.unpack_from(:instrument_data, offset)

         I sig == EXSHeader_sig
            V t = EXSHeader(offset)
         E I sig == 0100'0101
            .zones.append(EXSZone(offset))
         E I sig == 0200'0101
            .groups.append(EXSGroup(offset))
         E I sig == 0300'0101
            .samples.append(EXSSample(offset))
         E I sig == 0400'0101
            V t = EXSParam(offset)
         E
            X RuntimeError(‘Encountered an unknown chunk signature! signature is ’hex(sig))
         offset += chunk_size(:instrument_data, offset)

   F build_sequences()
      ‘ exs handles round robin samples by using groups that point to the next group, and so on
			until the sequence is reset by pointing to group -1;
			here we trace each of those chains for simple processing later ’
      [[Int]] sequences

      L(group) .groups
         V gid = L.index
         I !group.sequence()
            L.continue

         L(=sequence) sequences
            I 0B
               L.break
         L.was_no_break
            [Int] sequence
            V cont = 1B
            L cont == 1B
               cont = 0B
               L(g) .groups
                  V gid2 = L.index
                  I g.sequence() == gid & !(gid2 == g.sequence()) & !(gid C sequence)
                     sequence.append(gid)
                     gid = gid2
                     cont = 1B
                     L.break
            sequence.drop()
            L !(gid == -1) & !(gid C sequence)
               sequence.append(gid)
               gid = .groups[gid].sequence()

            I sequence.len > 1
               sequences.append(sequence)
      R sequences

   F convert(sfzfilename, overwrite = 0B)
      V sequences = .build_sequences()

      F get_sequence_position(zone)
         L(sequence) @sequences
            I zone.group() C sequence
               R sequence.index(zone.group())
         R 0

      F get_rootnote(zone)
         I !zone.pitchtrack()
            I zone.rootnote() < zone.startnote() | zone.rootnote() > zone.endnote()
               R zone.startnote()
         R zone.rootnote()
      [(Int, Int, Int, Int, Int) = [EXSZone]] ranges
      L(zone) .zones
         V key = (zone.startnote(), zone.endnote(), get_rootnote(zone), zone.pan(), get_sequence_position(zone))
         I !(key C ranges)
            [EXSZone] empty_list
            ranges[key] = empty_list
         ranges[key].append(zone)
      [(Int, Int, Int, Int, Int) = Int] key_sequence
      L(key) sorted(ranges.keys())
         V keyrange = ranges[key]
         V group = keyrange[0].group()

         L(sequence) sequences
            I group C sequence
               group = sequence[0]
               L.break
         L.was_no_break
            L.continue
         key_sequence[key] = group

      I !overwrite & fs:is_file(sfzfilename)
         X RuntimeError(‘file #. already exists; will not overwrite!’.format(sfzfilename))
      V sfzfile = File(sfzfilename, ‘w’)
      sfzfile.write("// this file was generated from #. using vonred's #.. Trickster goddess incoming.\n\n".format(fs:path:base_name(.exsfile_name), fs:path:base_name(‘1.exs2sfz.py’)))

      L(key) sorted(ranges.keys())
         V keyrange = ranges[key]
         sfzfile.write(‘<group>’)

         I (key[0] == key[1] == key[2])
            sfzfile.write(‘ key=#.’.format(key[0]))
         E
            sfzfile.write(‘lokey=#. hikey=#. pitch_keycenter=#.’.format(keyrange[0].startnote(), keyrange[0].endnote(), keyrange[0].rootnote()))
         Int choke_group
         I key C key_sequence
            choke_group = key_sequence[key]
         E
            choke_group = keyrange[0].group()
         [(Int, Int) = Int] choke_voices
         L(zone) keyrange
            I (zone.minvel(), zone.maxvel()) C choke_voices
               choke_voices[(zone.minvel(), zone.maxvel())]++
            E
               choke_voices[(zone.minvel(), zone.maxvel())] = 1

         I .groups[keyrange[0].group()].polyphony() == choke_voices[(keyrange[0].minvel(), keyrange[0].maxvel())]
            I choke_group == 0
               choke_group = .groups.len
            sfzfile.write(‘ group=#. off_by=#. polyphony=#. off_mode=fast’.format(choke_group, choke_group, .groups[keyrange[0].group()].polyphony()))

         I .groups[keyrange[0].group()].output() > 0
            sfzfile.write(‘ output=#.’.format(.groups[keyrange[0].group()].output()))

         I keyrange[0].pan()
            sfzfile.write(‘ pan=#.’.format(keyrange[0].pan()))

         I keyrange[0].oneshot()
            sfzfile.write(‘ loop_mode=one_shot’)

         L(sequence) sequences
            I keyrange[0].group() C sequence
               sfzfile.write(‘ seq_length=#. seq_position=#.’.format(sequence.len, sequence.index(keyrange[0].group()) + 1))
               L.break
         sfzfile.write(" pitch_keytrack=#.\n".format(Int(keyrange[0].pitchtrack())))

         L(zone) keyrange
            sfzfile.write("\t<region> lovel=#03 hivel=#03 amp_velcurve_#03=1".format(zone.minvel(), zone.maxvel(), zone.maxvel()))

            I zone.finetune()
               sfzfile.write(‘ tune=#.’.format(zone.finetune()))

            I zone.volumeadjust()
               sfzfile.write(‘ volume=#.’.format(zone.volumeadjust()))

            I zone.samplestart()
               sfzfile.write(‘ offset=#.’.format(zone.samplestart()))

            I zone.sampleend() & zone.sampleend() < .samples[zone.sampleindex()].length()
               sfzfile.write(‘ end=#.’.format(zone.sampleend()))

            I zone._loop_()
               sfzfile.write(‘ loop_mode=loop_sustain loop_start=#. loop_end=#.’.format(zone.loopstart(), zone.loopend() - 1))

            I .groups[zone.group()].trigger() == 1
               sfzfile.write(‘ trigger=release’)
            sfzfile.write(‘ sample=#.’.format(.pool.path(.samples[zone.sampleindex()].name())))
            sfzfile.write("\n")

:start:
I :argv.len < 3 | :argv.len > 4
   print(‘Usage: #. EXSfile.exs SFZfile.sfz [samplefolder]’.format(‘1.exs2sfz.py’))
   print()
   print(‘    the samplefolder argument is optional; if not specified, the program will’)
   print(‘    attempt to locate the samples by searching folders surrounding the exs file’)
   print()
   exit(64)
V samplefolder = I :argv.len == 4 {:argv[3]} E ‘’
X.try
   V exs = EXSInstrument(:argv[1], samplefolder)
   exs.convert(:argv[2])
X.catch RuntimeError rerr
   exit(rerr)
