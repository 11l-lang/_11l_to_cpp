//import math
//import random
V FLOAT_MAX = 1e100

T Point
   x = 0.0
   y = 0.0
   group = 0

F generate_points(npoints, radius)
   V points = (0 .< npoints).map(_ -> Point())

   L(p) points
      V r = random:() * radius
      V ang = random:() * 2 * math:pi
      p.x = r * cos(ang)
      p.y = r * sin(ang)
   R points

F sqr_distance_2D(a, b)
   R (a.x - b.x) ^ 2 + (a.y - b.y) ^ 2

F nearest_cluster_center(point, cluster_centers)
   ‘Distance and index of the closest cluster center’
   V min_index = point.group
   V min_dist = :FLOAT_MAX

   L(cc) cluster_centers
      V i = L.index
      V d = sqr_distance_2D(cc, point)
      I min_dist > d
         min_dist = d
         min_index = i
   R (min_index, min_dist)

F kpp(&points, &cluster_centers)
   cluster_centers[0] = copy(random:choice(points))
   V d = (0 .< points.len).map(_ -> 0.0)

   L(i) 1 .< cluster_centers.len
      V sum = 0.0
      L(p) points
         V j = L.index
         d[j] = nearest_cluster_center(p, cluster_centers[0 .< i])[1]
         sum += d[j]
      sum *= random:()

      L(di) d
         V j = L.index
         sum -= di
         I sum > 0
            L.continue
         cluster_centers[i] = copy(points[j])
         L.break

   L(p) points
      p.group = nearest_cluster_center(p, cluster_centers)[0]

F lloyd(&points, nclusters)
   V cluster_centers = (0 .< nclusters).map(_ -> Point())
   kpp(&points, &cluster_centers)
   V lenpts10 = points.len >> 10
   V changed = 0
   L
      L(cc) cluster_centers
         cc.x = 0
         cc.y = 0
         cc.group = 0

      L(p) points
         cluster_centers[p.group].group++
         cluster_centers[p.group].x += p.x
         cluster_centers[p.group].y += p.y

      L(cc) cluster_centers
         cc.x /= cc.group
         cc.y /= cc.group
      changed = 0
      L(p) points
         V min_i = nearest_cluster_center(p, cluster_centers)[0]
         I min_i != p.group
            changed++
            p.group = min_i

      I changed <= lenpts10
         L.break

   L(cc) cluster_centers
      V i = L.index
      cc.group = i
   R cluster_centers

T Color
   Float r
   Float g
   Float b
   F (r, g, b)
      .r = r
      .g = g
      .b = b

F print_eps(points, cluster_centers, w = 400, h = 400)
   [Color] colors
   L(i) 0 .< cluster_centers.len
      colors.append(Color((3 * (i + 1) % 11) / 11.0, (7 * i % 11) / 11.0, (9 * i % 11) / 11.0))
   V max_x = -:FLOAT_MAX
   V max_y = -:FLOAT_MAX
   V min_x = :FLOAT_MAX
   V min_y = :FLOAT_MAX

   L(p) points
      I max_x < p.x
         max_x = p.x
      I min_x > p.x
         min_x = p.x
      I max_y < p.y
         max_y = p.y
      I min_y > p.y
         min_y = p.y
   V scale = min(w / (max_x - min_x), h / (max_y - min_y))
   V cx = (max_x + min_x) / 2
   V cy = (max_y + min_y) / 2
   print("%!PS-Adobe-3.0\n%%BoundingBox: -5 -5 #. #.".format(w + 10, h + 10))
   print(("/l {rlineto} def /m {rmoveto} def\n"‘’"/c { .25 sub exch .25 sub exch .5 0 360 arc fill } def\n"‘/s { moveto -2 0 m 2 2 l 2 -2 l -2 -2 l closepath ’""‘   gsave 1 setgray fill grestore gsave 3 setlinewidth’""‘ 1 setgray stroke grestore 0 setgray stroke }def’))

   L(cc) cluster_centers
      V i = L.index
      print((‘#. #. #. setrgbcolor’.format(colors[i].r, colors[i].g, colors[i].b)))

      L(p) points
         I p.group != i
            L.continue
         print((‘#.3 #.3 c’.format((p.x - cx) * scale + w / 2, (p.y - cy) * scale + h / 2)))
      print(("\n0 setgray #. #. s".format((cc.x - cx) * scale + w / 2, (cc.y - cy) * scale + h / 2)))
   print("\n%%%%EOF")

F main()
   V npoints = 30000
   V k = 7
   V points = generate_points(npoints, 10)
   V cluster_centers = lloyd(&points, k)
   print_eps(points, cluster_centers)
main()
