‘
This is a BLOCK compression algorithm
that uses the Huffman algorithm.

This simple block compressor assumes that the source file
is an exact multiple of the block length.
The encoding does not itself delimit the size of the file, so
the decoder needs to knows where the end of the compressed
file is. Thus we must either ensure the decoder knows
the original file's length, or we have to use a special
end-of-file character. A superior compressor would first
encode the source file's length at the head of the compressed
file; then the decoder would be able to stop at the right
point and correct any truncation errors. I'll fix this
in block2.py.

The package contains the following functions:

 findprobs(f=0.01,N=6):
    Find probabilities of all the events
    000000
    000001
     ...
    111111
    <-N ->

 Bencode(string,symbols,N):
    Reads in a string of 0s and 1s, forms blocks, and encodes with Huffman.

 Bdecode(string,root,N):
    Decode a binary string into blocks, then return appropriate 0s and 1s

 compress_it( inputfile, outputfile ):
    Make Huffman code, and compress

 uncompress_it( inputfile, outputfile ):
    Make Huffman code, and uncompress

 There are also three test functions.
 If block.py is run from a terminal, it invokes compress_it (using stdin)
 or uncompress_it (using stdin), respectively if there are zero arguments
 or one argument.

’
//import sys, os

T InternalNode
   String name
   leaf = 0
   [InternalNode] child
   F ()
   {
   }
   F children(child0, child1)
      .leaf = 0
      .child.append(child0)
      .child.append(child1)

T node
   Float count
   Int index
   String name
   InternalNode internalnode
   word = ‘’
   isinternal = 0
   F (count, index, name = ‘’)
      .count = Float(count)
      .index = index
      .name = name
      I .name == ‘’
         .name = ‘_’String(index)

   F <(other)
      R .count < other.count
   F report()
      I (.index == 1)
         print("#Symbol\tCount\tCodeword")
      print("#.\t(#.6)\t#.".format(.name, .count, .word))
   F associate(internalnode)
      .internalnode = internalnode
      .internalnode.leaf = 1
      .internalnode.name = .name

F find_idx(seq, index)
   L(item) seq
      I item.index == index
         R item

F find_name(seq, name)
   L(item) seq
      I item.name == name
         R item
   R node(0, -1)

F iterate([node] &c) -> InternalNode
   "\n\
    Run the Huffman algorithm on the list of \"nodes\" c.\n\
    The list of nodes c is destroyed as we go, then recreated.\n\
    Codewords 'co.word' are assigned to each node during the recreation of the list.\n\
    The order of the recreated list may well be different.\n\
    Use the list c for encoding.\n\
\n\
    The root of a new tree of \"internalnodes\" is returned.\n\
    This root should be used when decoding.\n\
\n\
    >>> c = [ node(0.5,1,'a'),  \
              node(0.25,2,'b'), \
              node(0.125,3,'c'),\
              node(0.125,4,'d') ]   # my doctest query has been resolved\n\
    >>> root = iterate(c)           # \"iterate(c)\" returns a node, not nothing, and doctest cares!\n\
    >>> reportcode(c)               # doctest: +NORMALIZE_WHITESPACE, +ELLIPSIS\n\
    #Symbol   Count	Codeword\n\
    a         (0.5)	1\n\
    b         (0.25)	01\n\
    c         (0.12)	000\n\
    d         (0.12)	001\n\
    "
   InternalNode root
   I (c.len > 1)
      c.sort()
      V deletednode = c[0]
      V second = c[1].index
      c[1].count += c[0].count
      c.pop(0)
      root = iterate(&c)
      V co = find_idx(c, second)
      deletednode.word = co.word‘0’
      c.append(deletednode)
      co.word += ‘1’
      co.count -= deletednode.count
      V newnode0 = InternalNode()
      V newnode1 = InternalNode()
      V treenode = co.internalnode
      treenode.children(newnode0, newnode1)
      deletednode.associate(newnode0)
      co.associate(newnode1)
   E
      c[0].word = ‘’
      root = InternalNode()
      c[0].associate(root)
   R root

F encode(sourcelist, code)
   ‘
    Takes a list of source symbols. Returns a binary string.
    ’
   V answer = ‘’
   L(s) sourcelist
      V co = find_name(code, s)

      I co.index == -1
         print(‘Warning: symbol ’s‘ has no encoding!’)
      E
         answer = answer‘’co.word
   R answer

F decode(string, root)
   ‘
    Decodes a binary string using the Huffman tree accessed via root
    ’
   [String] answer
   V clist = Array(string)
   V currentnode = root
   L(c) clist
      I (c == "\n")
         L.continue
      assert((c == ‘0’) | (c == ‘1’))
      currentnode = currentnode.child[Int(c)]
      I currentnode.leaf != 0
         answer.append(String(currentnode.name))
         currentnode = root
   R answer

F makenodes(probs)
   ‘
    Creates a list of nodes ready for the Huffman algorithm.
    Each node will receive a codeword when Huffman algorithm "iterate" runs.

    probs should be a list of pairs('<symbol>', <value>).

    >>> probs=[('a',0.5), ('b',0.25), ('c',0.125), ('d',0.125)]
    >>> symbols = makenodes(probs)
    >>> root = iterate(symbols)
    >>> zipped = encode(['a','a','b','a','c','b','c','d'], symbols)
    >>> print zipped
    1101100001000001
    >>> print decode( zipped, root )
    ['a', 'a', 'b', 'a', 'c', 'b', 'c', 'd']

    See also the file Example.py for a python program that uses this package.
    ’
   V m = 0
   [node] c
   L(p) probs
      m++
      c.append(node(p[1], m, p[0]))
   R c

F dec_to_bin(n, digits)
   ‘ n is the number to convert to binary;  digits is the number of bits you want
    Always prints full number of digits
    >>> print dec_to_bin( 17 , 9)
    000010001
    >>> print dec_to_bin( 17 , 5)
    10001

    Will behead the standard binary number if requested
    >>> print dec_to_bin( 17 , 4)
    0001
    ’
   I (n < 0)
      :stderr.write("warning, negative n not expected\n")
   V i = digits - 1
   V ans = ‘’
   L i >= 0
      V b = (((1 << i) [&] n) > 0)
      i--
      ans = ans‘’String(Int(b))
   R ans
V verbose = 0

F weight(string)
   ‘
    ## returns number of 0s and number of 1s in the string
    >>> print weight("00011")
    (3, 2)
    ’
   V w0 = 0
   V w1 = 0
   L(c) Array(string)
      I (c == ‘0’)
         w0++
      E I (c == ‘1’)
         w1++
   R (w0, w1)

F findprobs(f = 0.01, nn = 6)
   ‘ Find probabilities of all the events
    000000
    000001
     ...
    111111
    <-nn ->
    >>> print findprobs(0.1,3)              # doctest:+ELLIPSIS
    [('000', 0.7...),..., ('111', 0.001...)]
    ’
   [(String, Float)] answer
   L(n) 0 .< Int(2 ^ nn)
      V s = dec_to_bin(n, nn)
      V (w0, w1) = weight(s)
      I :verbose & 0
         print(s‘ ’w0‘ ’w1)
      answer.append((s, f ^ w1 * (1 - f) ^ w0))
   assert(answer.len == 2 ^ nn)
   R answer

F Bencode(string, symbols, n)
   ‘
    Reads in a string of 0s and 1s.
    Creates a list of blocks of size n.
    Sends this list to the general-purpose Huffman encoder
    defined by the nodes in the list "symbols".
    ’
   [String] blocks
   V chars = Array(string)
   V s = ‘’
   L(c) chars
      s = s‘’c
      I (s.len >= n)
         blocks.append(s)
         s = ‘’
   I (s.len > 0)
      print(‘warning, padding last block with 0s’)
      L (s.len < n)
         s = s‘0’
      blocks.append(s)

   I :verbose
      print(‘blocks to be encoded:’)
      print(blocks)
   V zipped = encode(blocks, symbols)
   R zipped

F Bdecode(string, root, n)
   ‘
    Decode a binary string into blocks.
    ’
   V answer = decode(string, root)
   I :verbose
      print(‘blocks from decoder:’)
      print(answer)
   V output = answer.join(‘’)
   R output

F easytest()
   ‘
    Tests block code with N=3, f=0.01 on a tiny example.
    >>> easytest()                 # doctest:+NORMALIZE_WHITESPACE
    #Symbol	Count	        Codeword
    000	        (0.97)	        1
    001	        (0.0098)	001
    010	        (0.0098)	010
    011	        (9.9e-05)	00001
    100	        (0.0098)	011
    101	        (9.9e-05)	00010
    110	        (9.9e-05)	00011
    111	        (1e-06) 	00000
    zipped  = 1001010000010110111
    decoded = ['000', '001', '010', '011', '100', '100', '000']
    OK!
    ’
   V n = 3
   V f = 0.01
   V probs = findprobs(f, n)
   V symbols = makenodes(probs)
   V root = iterate(&symbols)
   symbols = sorted(symbols, key' x -> x.index)
   L(co) symbols
      co.report()
   V source = [‘000’, ‘001’, ‘010’, ‘011’, ‘100’, ‘100’, ‘000’]
   V zipped = encode(source, symbols)
   print(‘zipped  = ’zipped)
   V answer = decode(zipped, root)
   print(‘decoded = ’, end' ‘’)
   print(answer)
   I (source != answer)
      print(‘ERROR’)
   E
      print(‘OK!’)
V f = 0.01
V n = 12
f = 0.01
n = 5
f = 0.01
n = 10

F compress_it(inputfile, outputfile)
   ‘
    Make Huffman code for blocks, and
    Compress from file (possibly stdin).
    ’
   V probs = findprobs(:f, :n)
   V symbols = makenodes(probs)
   V root = iterate(&symbols)
   V string = inputfile.read()
   outputfile.write(Bencode(string, symbols, :n))

F uncompress_it(inputfile, outputfile)
   ‘
    Make Huffman code for blocks, and
    UNCompress from file (possibly stdin).
    ’
   V probs = findprobs(:f, :n)
   V symbols = makenodes(probs)
   V root = iterate(&symbols)
   V string = inputfile.read()
   outputfile.write(Bdecode(string, root, :n))

F hardertest()
   print(‘Reading the BentCoinFile’)
   V inputfile = File(‘testdata/BentCoinFile’, ‘r’)
   V outputfile = File(‘tmp.zip’, ‘w’)
   print(‘Compressing to tmp.zip’)
   compress_it(inputfile, outputfile)
   outputfile.close()
   inputfile.close()
   inputfile = File(‘tmp.zip’, ‘r’)
   outputfile = File(‘tmp2’, ‘w’)
   print(‘Uncompressing to tmp2’)
   uncompress_it(inputfile, outputfile)
   outputfile.close()
   inputfile.close()
   print(‘Checking for differences...’)
   print((File(‘testdata/BentCoinFile’).read() == File(‘tmp2’).read()))

F test()
   easytest()
   hardertest()

:start:
test()
