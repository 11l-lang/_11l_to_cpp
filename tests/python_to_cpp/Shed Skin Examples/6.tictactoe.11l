//import math

F sigmoid(x)
   R Float(1) / (1 + exp(-x))

F sig(x, xshift = 0, xcompress = 1)
   R 0 + (1 * sigmoid(xcompress * (x - xshift)))

T SpaceNotEmpty
{
}

T MultiVictory
   Set[Int] victors
   F (victorslist)
      .victors = victorslist

T rectBoard
   Int edge
   [[Int]] __board
   Int __empty

   F (edge = 3)
      .edge = edge
      .__board = (0 .< edge).map(i -> @edge * [0])
      .__empty = edge ^ 2

   F assign(row, col, value)
      I (.__board[row][col] == 0)
         .__board[row][col] = value
         .__empty--
      E
         X SpaceNotEmpty()

   F isfull()
      R .__empty == 0

   F isvictory()
      [Int] victors

      L(row) .__board
         I Set(row).len == 1
            I row[0] != 0
               victors.append(row[0])

      L(i) 0 .< .edge
         V col = .__board.map(row -> row[@i])
         I Set(col).len == 1
            I col[0] != 0
               victors.append(col[0])
      [Int] ld
      L(i) 0 .< .edge
         ld.append(.__board[i][i])
      I Set(ld).len == 1
         I ld[0] != 0
            victors.append(ld[0])
      [Int] rd
      L(i) 0 .< .edge
         rd.append(.__board[i][.edge - (1 + i)])
      I Set(rd).len == 1
         I rd[0] != 0
            victors.append(rd[0])

      I victors.empty
         R 0
      I Set(victors).len > 1
         X MultiVictory(Set(victors))
      R victors[0]

   F String()
      V ret = ‘’
      L(row) 0 .< .edge
         I row != 0
            ret ‘’= "\n"
            L(i) 0 .< .edge
               I i != 0
                  ret ‘’= ‘+’
               ret ‘’= ‘---’
            ret ‘’= "\n"
         ret ‘’= ‘ ’
         L(col) 0 .< .edge
            I col != 0
               ret ‘’= ‘ | ’
            I .__board[row][col] == 0
               ret ‘’= ‘ ’
            E
               ret ‘’= String(.__board[row][col])
      R ret

   F doRow(fields, indices, player, [[Float]] &scores)
      V players = Set(fields).difference(Set([0]))

      I (players.len == 1)
         I Array(players)[0] == player
            L(rown, coln) indices
               scores[rown][coln] += 15 * sig(fields.count(player) / Float(.edge), 0.5, 10)
         E
            L(rown, coln) indices
               scores[rown][coln] += 15 * fields.count(Array(players)[0]) / Float(.edge)

   F makeAImove(player)
      V scores = (0 .< .edge).map(i -> @.edge * [0.0])

      L(rown) 0 .< .edge
         V row = .__board[rown]
         .doRow(row, (0 .< .edge).map(i -> (@rown, i)), player, &scores)

      L(coln) 0 .< .edge
         V col = .__board.map(row -> row[@coln])
         .doRow(col, (0 .< .edge).map(i -> (i, @coln)), player, &scores)
      V indices = (0 .< .edge).map(i -> (i, i))
      V ld = (0 .< .edge).map(i -> @.__board[i][i])
      .doRow(ld, indices, player, &scores)

      L(rown, coln) indices
         scores[rown][coln]++
      indices = (0 .< .edge).map(i -> (i, (@.edge - 1) - i))
      V rd = (0 .< .edge).map(i -> @.__board[i][(@.edge - 1) - i])
      .doRow(rd, indices, player, &scores)

      L(rown, coln) indices
         scores[rown][coln]++
      [(Float, (Int, Int))] scorelist
      L(rown) 0 .< .edge
         L(coln) 0 .< .edge
            I (.__board[rown][coln] == 0)
               scorelist.append((scores[rown][coln], (rown, coln)))
      scorelist.sort()
      scorelist.reverse()
      scorelist = scorelist.filter(x -> x[0] == @scorelist[0][0])
      R (scorelist[0][1][0], scorelist[0][1][1])

F aigame(size = 10, =turn = 1, players = 2)
   V b = rectBoard(size)

   L ((!b.isfull()) & (b.isvictory() == 0))
      I (turn == 1)
         V (r, c) = b.makeAImove(turn)
         b.assign(r, c, 1)
         turn = 2
      E
         V (r, c) = b.makeAImove(turn)
         b.assign(r, c, turn)
         I (turn == players)
            turn = 1
         E
            turn++
   print()
   print(b)
   print()
   I (b.isvictory() == 0)
      print(‘Board is full! Draw!’)
   E
      print(‘Victory for player ’String(b.isvictory())‘!’)

:start:
aigame()
