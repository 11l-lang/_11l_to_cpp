//import sys

T Exception
   String message
   Int line
   Int column
   Int pos
   F (message, line, column, pos)
      .message = message
      .line = line
      .column = column
      .pos = pos

T Converter
   [Int] to_html_called_inside_to_html_outer_pos_list
   Bool habr_html
   Bool ohd
   String instr

   F (habr_html, ohd)
      .habr_html = habr_html
      .ohd = ohd

   F instr_pos_to_line_column(=pos)
      pos += sum(.to_html_called_inside_to_html_outer_pos_list)
      A line = 1
      A line_start = -1
      A t = 0
      L t < pos
         I .instr[t] == "\r"
            I t < pos - 1 & .instr[t + 1] == "\n"
               t++
            line++
            line_start = t
         E I .instr[t] == "\n"
            line++
            line_start = t
         t++
      R (line, pos - line_start, pos)

   F to_html(instr, File? outfilef = N, ', outer_pos = 0) -> String
      .to_html_called_inside_to_html_outer_pos_list.append(outer_pos)
      [String] result
      T Writer
         (String -> N) write
      A outfile = Writer()
      I outfilef == N
         outfile.write = s -> @result.append(s)
      E
         outfile.write = s -> @outfilef.write(s)

      I .to_html_called_inside_to_html_outer_pos_list.len == 1
         .instr = instr

      F exit_with_error(message, pos)
         A p = @.instr_pos_to_line_column(pos)
         X Exception(message, p[0], p[1], p[2])
      A i = 0
      F next_char(offset = 1)
         R I @i + offset < @instr.len {@instr[@i + offset]} E "\0"[0]

      F i_next_str(str)
         R @instr[@i + 1 .< @i + 1 + str.len] == str

      F prev_char(offset = 1)
         R I @i - offset >= 0 {@instr[@i - offset]} E "\0"[0]

      F html_escape(=str)
         str = str.replace(‘&’, ‘&amp;’).replace(‘<’, ‘&lt;’)
         I @.habr_html
            str = str.replace(‘"’, ‘&quot;’)
         R str
      F html_escapeq(str)
         R str.replace(‘&’, ‘&amp;’).replace(‘"’, ‘&quot;’)
      A writepos = 0
      F write_to_pos(pos, npos)
         @outfile.write(@html_escape(@instr[@writepos .< pos]))
         @writepos = npos

      F write_to_i(add_str, skip_chars = 1)
         @write_to_pos(@i, @i + skip_chars)
         @outfile.write(add_str)

      F find_ending_pair_quote(=i)
         assert(@instr[i] == "‘")
         A startqpos = i
         A nesting_level = 0
         L
            I i == @instr.len
               @exit_with_error(‘Unpaired left single quotation mark’, startqpos)
            S @instr[i]
               "‘"
                  nesting_level++
               "’"
                  I --nesting_level == 0
                     R i
            i++

      F find_ending_sq_bracket(str, =i, start = 0)
         A starti = i
         assert(str[i] == ‘[’)
         A nesting_level = 0
         L
            S str[i]
               ‘[’
                  nesting_level++
               ‘]’
                  I --nesting_level == 0
                     R i
            i++
            I i == str.len
               @exit_with_error(‘Unended comment started’, start + starti)

      F remove_comments(=s, =start, level = 3)
         L
            A j = s.findi(‘[’ * level)
            I j == -1
               L.break
            A k = @find_ending_sq_bracket(s, j, start) + 1
            start += k - j
            s = s[0 .< j] + s[k ..]
         R s
      Dict[Int, String] nonunique_links
      A link = ‘’

      F write_http_link(startpos, Int endpos, q_offset = 1, =text = ‘’)
         A nesting_level = 0
         @i += 2
         L
            I @i == @instr.len
               @exit_with_error(‘Unended link’, endpos + q_offset)
            S @instr[@i]
               ‘[’
                  nesting_level++
               ‘]’
                  I nesting_level == 0
                     L.break
                  nesting_level--
               ‘ ’
                  L.break
            @i++
         @link = @html_escapeq(@instr[endpos + 1 + q_offset .< @i])
         String tag = ‘<a href="’@link‘"’
         I @link.starts_with(‘./’)
            tag ‘’= ‘ target="_self"’

         I @instr[@i] == ‘ ’
            tag ‘’= ‘ title="’
            I @next_char() == "‘"
               A endqpos2 = @find_ending_pair_quote(@i + 1)
               I @instr[endqpos2 + 1] != ‘]’
                  @exit_with_error("Expected `]` after `’`", endqpos2 + 1)
               tag ‘’= @html_escapeq(@remove_comments(@instr[@i + 2 .< endqpos2], @i + 2))
               @i = endqpos2 + 1
            E
               A endb = @find_ending_sq_bracket(@instr, endpos + q_offset)
               tag ‘’= @html_escapeq(@remove_comments(@instr[@i + 1 .< endb], @i + 1))
               @i = endb
            tag ‘’= ‘"’
         I @next_char() == ‘[’ & @next_char(2) == ‘-’
            A j = @i + 3
            L j < @instr.len
               I @instr[j] == ‘]’
                  @nonunique_links[Int(@instr[@i + 3 .< j])] = @link
                  @i = j
                  L.break
               I !@instr[j].is_digit()
                  L.break
               j++
         I text == ‘’
            @write_to_pos(startpos, @i + 1)
            text = @html_escape(@instr[startpos + q_offset .< endpos])
         @outfile.write(tag‘>’(I text != ‘’ {text} E @link)‘</a>’)

      F write_note(startpos, endpos, q_offset = 1)
         @i += q_offset
         A endqpos2 = @find_ending_pair_quote(@i + 1)
         I @instr[endqpos2 + 1] != ‘]’
            @exit_with_error("Bracket ] should follow after ’", endqpos2 + 1)
         @write_to_pos(startpos, endqpos2 + 2)
         @outfile.write(‘<abbr title="’@html_escapeq(@remove_comments(@instr[@i + 2 .< endqpos2], @i + 2))‘">’@html_escape(@remove_comments(@instr[startpos + q_offset .< endpos], startpos + q_offset))‘</abbr>’)
         @i = endqpos2 + 1
      A endi = 0
      F numbered_link(offset = 1)
         I @next_char(offset) == ‘-’ & @next_char(offset + 1).is_digit()
            A j = @i + offset + 1
            L j < @instr.len
               I @instr[j] == ‘]’
                  X.try
                     @link = @nonunique_links[Int(@instr[@i + offset + 1 .< j])]
                  X.catch KeyError
                     @exit_with_error(‘Link with such index was not declared previously’, @i + offset + 1)
                  @endi = j
                  R 1B
               I !@instr[j].is_digit()
                  L.break
               j++
         R 0B
      A ordered_list_current_number = -1
      F close_ordered_list()
         I @ordered_list_current_number != -1
            @write_to_i("</li>\n</ol>\n", 0)
            @ordered_list_current_number = -1
      A in_unordered_list = 0B
      F close_unordered_list()
         I @in_unordered_list
            @write_to_i("</li>\n</ul>\n", 0)
            @in_unordered_list = 0B
      [String] ending_tags
      A new_line_tag = "\0"

      L i < instr.len
         A ch = instr[i]
         I i == 0 | prev_char() == "\n"
            I ch == ‘.’ & (next_char() C " ‘")
               close_ordered_list()
               A s = ‘’
               I !in_unordered_list
                  s = "<ul>\n<li>"
                  in_unordered_list = 1B
               E
                  s = "</li>\n<li>"
               write_to_i(s)
               new_line_tag = ‘’
               I next_char() == ‘ ’
                  i++
               E
                  A endqpos = find_ending_pair_quote(i + 1)
                  outfile.write(.to_html(instr[i + 2 .< endqpos], outer_pos' i + 2))
                  i = endqpos
               writepos = i + 1
            E
               close_unordered_list()
               I ch.is_digit()
                  A j = i + 1
                  L j < instr.len
                     I !instr[j].is_digit()
                        L.break
                     j++
                  I instr[j .< j + 1] == ‘.’ & instr[j + 1 .< j + 2] C (‘ ’, "‘")
                     A value = Int(instr[i .< j])
                     A s = ‘’
                     I ordered_list_current_number == -1
                        s = (I value == 1 {‘<ol>’} E ‘<ol start="’String(value)‘">’)"\n<li>"
                        ordered_list_current_number = value
                     E
                        s = "</li>\n"(I value == ordered_list_current_number + 1 {‘<li>’} E ‘<li value="’String(value)‘">’)
                        ordered_list_current_number = value
                     write_to_i(s)
                     new_line_tag = ‘’
                     I instr[j + 1] == ‘ ’
                        i = j + 1
                     E
                        A endqpos = find_ending_pair_quote(j + 1)
                        outfile.write(.to_html(instr[j + 2 .< endqpos], outer_pos' j + 2))
                        i = endqpos
                     writepos = i + 1
                  E
                     close_ordered_list()
               E
                  close_ordered_list()

            I ch == ‘ ’
               write_to_i(‘&emsp;’)
            E I ch == ‘-’
               I i_next_str(‘--’)
                  A j = i + 3
                  L
                     I j == instr.len | instr[j] == "\n"
                        write_to_i("<hr />\n")
                        I j == instr.len
                           j--
                        i = j
                        writepos = j + 1
                        L.break
                     I instr[j] != ‘-’
                        L.break
                     j++
            E I ch C (‘>’, ‘<’) & (next_char() C " ‘[")
               write_to_pos(i, i + 2)
               outfile.write(‘<blockquote’((ch == ‘<’) * ‘ class="re"’)‘>’)
               I next_char() == ‘ ’
                  new_line_tag = ‘</blockquote>’
               E
                  I next_char() == ‘[’
                     I numbered_link(2)
                        A linkstr = link
                        I linkstr.len > 57
                           linkstr = linkstr[0 .< linkstr.rfindi(‘/’, 0, 47) + 1]‘...’
                        outfile.write(‘<a href="’link‘">[’instr[i + 3 .< endi]‘]<i>’linkstr‘</i></a>’)
                        i = endi + 1
                     E
                        i++
                        A endb = find_ending_sq_bracket(instr, i)
                        A linkn = ‘’
                        I instr[endb + 1 .< endb + 3] == ‘[-’
                           linkn = ‘[’instr[endb + 3 .< find_ending_sq_bracket(instr, endb + 1)]‘]’
                        link = instr[i + 1 .< endb]
                        A spacepos = link.findi(‘ ’)
                        I spacepos != -1
                           link = link[0 .< spacepos]
                        I link.len > 57
                           link = link[0 .< link.rfindi(‘/’, 0, 47) + 1]‘...’
                        write_http_link(i, i, 0, linkn‘<i>’link‘</i>’)
                        i++
                     I instr[i .< i + 2] != ":‘"
                        exit_with_error(‘Quotation with url should always has :‘...’ after [’link[0 .< link.findi(‘:’)]‘://url]’, i)
                     outfile.write(":<br />\n")
                     writepos = i + 2
                  E
                     A endqpos = find_ending_pair_quote(i + 1)
                     I instr[endqpos + 1 .< endqpos + 2] == ‘[’
                        A startqpos = i + 1
                        i = endqpos
                        outfile.write(‘<i>’)
                        assert(writepos == startqpos + 1)
                        writepos = startqpos
                        write_http_link(startqpos, endqpos)
                        outfile.write(‘</i>’)
                        i++
                        I instr[i .< i + 2] != ":‘"
                           exit_with_error(‘Quotation with url should always has :‘...’ after [’link[0 .< link.findi(‘:’)]‘://url]’, i)
                        outfile.write(":<br />\n")
                        writepos = i + 2
                     E I instr[endqpos + 1 .< endqpos + 2] == ‘:’
                        outfile.write(‘<i>’instr[i + 2 .< endqpos]"</i>:<br />\n")
                        i = endqpos + 2
                        I instr[i .< i + 1] != "‘"
                           exit_with_error(‘Quotation with author's name should be in the form >‘Author's name’:‘Quoted text.’ (opening quotation mark not found after colon)’, i)
                        writepos = i + 1
                  ending_tags.append(‘</blockquote>’)
               i++

         I ch == "‘"
            A prevci = i - 1
            A prevc = I prevci >= 0 {instr[prevci]} E "\0"[0]
            A startqpos = i
            i = find_ending_pair_quote(i)
            A endqpos = i
            A str_in_b = ‘’
            I prevc == ‘)’
               A openb = instr.rfindi(‘(’, 0, prevci - 1)
               I openb != -1 & openb > 0
                  str_in_b = instr[openb + 1 .< startqpos - 1]
                  prevci = openb - 1
                  prevc = instr[prevci]
            I prevc C ‘PР’
               write_to_pos(prevci, endqpos + 1)
               A title = ‘’
               Int endqpos2
               I i_next_str("[‘")
                  endqpos2 = find_ending_pair_quote(i + 2)
                  I instr[endqpos2 + 1] != ‘]’
                     exit_with_error("Expected `]` after `’`", endqpos2 + 1)
                  title = ‘ title="’html_escapeq(remove_comments(instr[i + 3 .< endqpos2], i + 3))‘"’
               A imgtag = ‘<img’
               I str_in_b != ‘’
                  A wh = str_in_b.replace(‘,’, ‘ ’).split(‘ ’)
                  assert(wh.len C (1, 2))
                  imgtag ‘’= ‘ width="’wh[0]‘" height="’wh.last‘"’
               imgtag ‘’= ‘ src="’instr[startqpos + 1 .< endqpos]‘"’title‘ />’
               I i_next_str(‘[http’) | i_next_str(‘[./’)
                  write_http_link(startqpos, endqpos, 1, imgtag)
                  writepos = i + 1
               E I i_next_str("[‘")
                  outfile.write(imgtag)
                  writepos = endqpos2 + 2
                  i = endqpos2 + 1
               E
                  outfile.write(imgtag)
                  i = endqpos
            E I i_next_str(‘[http’) | i_next_str(‘[./’)
               write_http_link(startqpos, endqpos)
            E I next_char() == ‘[’ & numbered_link(2)
               i = endi
               write_to_pos(startqpos, i + 1)
               outfile.write(‘<a href="’link‘">’html_escape(instr[startqpos + 1 .< endqpos])‘</a>’)
            E I i_next_str("[‘")
               write_note(startqpos, endqpos)
            E I next_char() == ‘{’ & (.habr_html | .ohd)
               A nesting_level = 0
               i += 2
               L
                  I i == instr.len
                     exit_with_error(‘Unended spoiler’, endqpos + 1)
                  S instr[i]
                     ‘{’
                        nesting_level++
                     ‘}’
                        I nesting_level == 0
                           L.break
                        nesting_level--
                  i++
               write_to_pos(prevci + 1, i + 1)
               A outer_p = endqpos + (I instr[endqpos + 2] == "\n" {3} E 2)
               I .habr_html
                  outfile.write(‘<spoiler title="’remove_comments(instr[startqpos + 1 .< endqpos], startqpos + 1).replace(‘"’, ‘''’)‘">’(.to_html(instr[outer_p .< i], outer_pos' outer_p))‘</spoiler>’)
               E
                  outfile.write(‘<span class="spoiler_title" onclick="return spoiler2(this, event)">’remove_comments(instr[startqpos + 1 .< endqpos], startqpos + 1)‘<br /></span>’""‘<div class="spoiler_text" style="display: none">’(.to_html(instr[outer_p .< i], outer_pos' outer_p))"</div>\n")
               I (next_char() == "\n" & !in_unordered_list & ordered_list_current_number == -1)
                  i++
                  writepos = i + 1
            E I prevc == ‘'’
               A t = startqpos - 1
               L t >= 0
                  I instr[t] != ‘'’
                     L.break
                  t--
               A eat_left = startqpos - 1 - t
               t = endqpos + 1
               L t < instr.len
                  I instr[t] != ‘'’
                     L.break
                  t++
               A eat_right = t - (endqpos + 1)
               write_to_pos(startqpos - eat_left, t)
               outfile.write(instr[startqpos + eat_left .< endqpos - eat_right + 1])
            E I prevc C ‘0OО’
               write_to_pos(prevci, endqpos + 1)
               outfile.write(html_escape(instr[startqpos + 1 .< endqpos]).replace("\n", "<br />\n"))
            E I prevc == ‘#’
               A ins = instr[startqpos + 1 .< endqpos]
               I .habr_html
                  write_to_pos(prevci, endqpos + 1)
                  A contains_new_line = "\n" C ins
                  outfile.write((I str_in_b != ‘’ {‘<source lang="’str_in_b‘">’} E I contains_new_line {‘<source>’} E ‘<code>’) + ins + (I str_in_b != ‘’ | contains_new_line {‘</source>’} E ‘</code>’))

               E
                  write_to_pos(prevci, endqpos + 1)
                  outfile.write(‘<pre style="display: inline">’html_escape(instr[startqpos + 1 .< endqpos])‘</pre>’)
               I ins[0] == "\n" & instr[i + 1 .< i + 2] == "\n"
                  new_line_tag = ‘’
            E I prevc C ‘TТ’
               write_to_pos(prevci, endqpos + 1)
               A header_row = 0B
               A hor_row_align = ‘’
               A ver_row_align = ‘’
               [Array[Array[String]]] table
               A j = startqpos + 1
               L j < endqpos
                  ch = instr[j]
                  I ch == "‘"
                     [[String]] empty_list
                     table.append(empty_list)
                     A endrow = find_ending_pair_quote(j)
                     A hor_col_align = ‘’
                     A ver_col_align = ‘’
                     j++
                     L j < endrow
                        ch = instr[j]
                        I ch == "‘"
                           A end_of_column = find_ending_pair_quote(j)
                           A style = ‘’
                           I hor_row_align != ‘’ | hor_col_align != ‘’
                              style ‘’= ‘text-align: ’(I hor_col_align != ‘’ {hor_col_align} E hor_row_align)
                           I ver_row_align != ‘’ | ver_col_align != ‘’
                              I style != ‘’
                                 style ‘’= ‘; ’
                              style ‘’= ‘vertical-align: ’(I ver_col_align != ‘’ {ver_col_align} E ver_row_align)
                           hor_col_align = ‘’
                           ver_col_align = ‘’
                           table.last.append([.to_html(instr[j + 1 .< end_of_column], outer_pos' j + 1), (I header_row {‘th’} E ‘td’) + (I style != ‘’ {‘ style="’style‘"’} E ‘’)])
                           j = end_of_column
                        E I ch C ‘<>’ & instr[j + 1 .< j + 2] C (‘<’, ‘>’)
                           hor_col_align = S instr[j .< j + 2] {‘<<’ {‘left’}; ‘>>’ {‘right’}; ‘><’ {‘center’}; ‘<>’ {‘justify’}}
                           j++
                        E I instr[j .< j + 2] C ("/\\", "\\/")
                           ver_col_align = I instr[j .< j + 2] == "/\\" {‘top’} E ‘bottom’
                           j++
                        E I ch == ‘-’
                           I table.last.empty
                              exit_with_error(‘Wrong table column span marker "-"’, j)
                           table.last.append([‘’, ‘-’])
                        E I ch == ‘|’
                           I table.len == 1
                              exit_with_error(‘Wrong table row span marker "|"’, j)
                           table.last.append([‘’, ‘|’])
                        E I instr[j .< j + 3] == ‘[[[’
                           j = find_ending_sq_bracket(instr, j)
                        E I ch !C "  \t\n"
                           exit_with_error(‘Unknown formatting character inside table row’, j)
                        j++
                     header_row = 0B
                     hor_row_align = ‘’
                     ver_row_align = ‘’
                  E I ch C ‘HН’
                     header_row = 1B
                  E I ch C ‘<>’ & instr[j + 1 .< j + 2] C (‘<’, ‘>’)
                     hor_row_align = S instr[j .< j + 2] {‘<<’ {‘left’}; ‘>>’ {‘right’}; ‘><’ {‘center’}; ‘<>’ {‘justify’}}
                     j++
                  E I instr[j .< j + 2] C ("/\\", "\\/")
                     ver_row_align = I instr[j .< j + 2] == "/\\" {‘top’} E ‘bottom’
                     j++
                  E I instr[j .< j + 3] == ‘[[[’
                     j = find_ending_sq_bracket(instr, j)
                  E I ch !C "  \t\n"
                     exit_with_error(‘Unknown formatting character inside table’, j)
                  j++

               L(y) (table.len - 1 .< -1).step(-1)
                  L(x) (table[y].len - 1 .< -1).step(-1)
                     I table[y][x][1] C (‘-’, ‘|’)
                        A xx = x
                        A yy = y
                        L
                           I table[yy][xx][1] == ‘-’
                              xx--
                           E I table[yy][xx][1] == ‘|’
                              yy--
                           E
                              L.break
                        I xx < x
                           table[yy][xx][1] += ‘ colspan="’String(x - xx + 1)‘"’
                        I yy < y
                           table[yy][xx][1] += ‘ rowspan="’String(y - yy + 1)‘"’
                        L(xxx) xx .< x + 1
                           L(yyy) yy .< y + 1
                              I !(xxx == xx & yyy == yy)
                                 table[yyy][xxx][1] = ‘’
               outfile.write(‘<table’(‘ style="display: inline"’ * (prevci != 0 & instr[prevci - 1] != "\n"))">\n")
               L(row) table
                  outfile.write(‘<tr>’)
                  L(colcolattrs) row
                     A col = colcolattrs[0]
                     A colattrs = colcolattrs[1]
                     I colattrs != ‘’
                        outfile.write(‘<’colattrs‘>’col‘</’colattrs[0.<2]‘>’)
                  outfile.write("</tr>\n")
               outfile.write("</table>\n")
               I !(prevci != 0 & instr[prevci - 1] != "\n")
                  new_line_tag = ‘’
            E I prevc C ‘<>’ & instr[prevci - 1] C ‘<>’
               write_to_pos(prevci - 1, endqpos + 1)
               outfile.write(‘<div align="’(S instr[prevci - 1] + prevc {‘<<’ {‘left’}; ‘>>’ {‘right’}; ‘><’ {‘center’}; ‘<>’ {‘justify’}})‘">’(.to_html(instr[startqpos + 1 .< endqpos], outer_pos' startqpos + 1))"</div>\n")
               new_line_tag = ‘’
            E I i_next_str(":‘") & instr[find_ending_pair_quote(i + 2) + 1 ..][0.<1] == ‘<’
               A endrq = find_ending_pair_quote(i + 2)
               i = endrq + 1
               write_to_pos(prevci + 1, i + 1)
               outfile.write(‘<blockquote>’(.to_html(instr[startqpos + 1 .< endqpos], outer_pos' startqpos + 1))"<br />\n<div align='right'><i>"instr[endqpos + 3 .< endrq]‘</i></div></blockquote>’)
               new_line_tag = ‘’
            E
               i = startqpos
               I prev_char() C ‘*_-~’
                  write_to_pos(i - 1, i + 1)
                  A tag = S prev_char() {‘*’ {‘b’}; ‘_’ {‘u’}; ‘-’ {‘s’}; ‘~’ {‘i’}}
                  outfile.write(‘<’tag‘>’)
                  ending_tags.append(‘</’tag‘>’)
               E I prevc C ‘HН’
                  write_to_pos(prevci, i + 1)
                  A tag = ‘h’String(min(max(3 - (I str_in_b == ‘’ {0} E Int(str_in_b)), 1), 6))
                  outfile.write(‘<’tag‘>’)
                  ending_tags.append(‘</’tag‘>’)
               E I prevc C ‘CС’
                  write_to_pos(prevci, i + 1)
                  A which_color = ‘color’
                  I str_in_b[0.<1] == ‘-’
                     str_in_b = str_in_b[1..]
                     which_color = ‘background-color’
                  I str_in_b[0.<1] == ‘#’
                     A new_str_in_b = ‘’
                     L(c) str_in_b
                        A cc = (S c.lowercase() {‘а’ {‘A’}; ‘б’ {‘B’}; ‘с’ {‘C’}; ‘д’ {‘D’}; ‘е’ {‘E’}; ‘ф’ {‘F’} E c})[0]
                        new_str_in_b ‘’= I c.is_lowercase() {cc.lowercase()} E cc
                     str_in_b = new_str_in_b
                  E I str_in_b.len C (1, 3) & str_in_b.is_digit()
                     A new_str = ‘#’
                     L(ii) I str_in_b.len == 3 {[0, 1, 2]} E [0, 0, 0]
                        new_str ‘’= hex((Int(str_in_b[ii]) * 00'FF + 4) I/ 8).zfill(2)
                     str_in_b = new_str
                  I .habr_html
                     outfile.write(‘<font color="’str_in_b‘">’)
                     ending_tags.append(‘</font>’)
                  E
                     outfile.write(‘<span style="’which_color‘: ’str_in_b‘">’)
                     ending_tags.append(‘</span>’)
               E I (instr[prevci - 1 .< prevci], prevc) C ((‘/’, "\\"), ("\\", ‘/’))
                  write_to_pos(prevci - 1, i + 1)
                  A tag = I (instr[prevci - 1], prevc) == (‘/’, "\\") {‘sup’} E ‘sub’
                  outfile.write(‘<’tag‘>’)
                  ending_tags.append(‘</’tag‘>’)
               E I prevc == ‘!’
                  write_to_pos(prevci, i + 1)
                  outfile.write(I .habr_html {‘<blockquote>’} E ‘<div class="note">’)
                  ending_tags.append(I .habr_html {‘</blockquote>’} E ‘</div>’)
               E
                  ending_tags.append("’")
         E I ch == "’"
            write_to_pos(i, i + 1)
            I ending_tags.empty
               exit_with_error(‘Unpaired right single quotation mark’, i)
            A last = ending_tags.pop()
            outfile.write(last)
            I next_char() == "\n" & (last.starts_with(‘</h’) | last C (‘</blockquote>’, ‘</div>’))
               outfile.write("\n")
               i++
               writepos++
         E I ch == ‘`’
            A start = i
            i++
            L i < instr.len
               I instr[i] != ‘`’
                  L.break
               i++
            A end = instr.findi((i - start) * ‘`’, i)
            I end == -1
               exit_with_error(‘Unended ` started’, start)
            write_to_pos(start, end + i - start)
            A ins = instr[i .< end]
            A delta = ins.count("‘") - ins.count("’")
            I delta > 0
               L(ii) 0 .< delta
                  ending_tags.append("’")
            E
               L(ii) 0 .< -delta
                  I ending_tags.pop() != "’"
                     exit_with_error(‘Unpaired single quotation mark found inside code block/span beginning’, start)
            ins = html_escape(ins)
            I !("\n" C ins)
               outfile.write(I .habr_html {‘<code>’ins‘</code>’} E ‘<pre style="display: inline">’ins‘</pre>’)
            E
               outfile.write(‘<pre>’ins‘</pre>’("\n" * (!(.habr_html))))
               new_line_tag = ‘’
            i = end + i - start - 1
         E I ch == ‘[’
            I i_next_str(‘http’) | i_next_str(‘./’) | i_next_str("‘") | numbered_link()
               A s = i - 1
               L s >= writepos & instr[s] !C "\r\n\t [{(‘“"
                  s--
               I i_next_str("‘")
                  write_note(s + 1, i, 0)
               E I i_next_str(‘http’) | i_next_str(‘./’)
                  write_http_link(s + 1, i, 0)
               E
                  write_to_pos(s + 1, endi + 1)
                  outfile.write(‘<a href="’link‘">’html_escape(instr[s + 1 .< i])‘</a>’)
                  i = endi
            E I i_next_str(‘[[’)
               A comment_start = i
               A nesting_level = 0
               L
                  S instr[i]
                     ‘[’
                        nesting_level++
                     ‘]’
                        I --nesting_level == 0
                           L.break
                     "‘"
                        ending_tags.append("’")
                     "’"
                        assert(ending_tags.pop() == "’")
                  i++
                  I i == instr.len
                     exit_with_error(‘Unended comment started’, comment_start)
               write_to_pos(comment_start, i + 1)
               I instr[comment_start + 3 .< comment_start + 4] != ‘[’
                  outfile.write(‘<!--’)
                  outfile.write(remove_comments(instr[comment_start .< i + 1], comment_start, 4))
                  outfile.write(‘-->’)
            E
               write_to_i((‘<span class="sq"><span class="sq_brackets">’ * .ohd)‘’(‘<font color="#BFBFBF">’ * .habr_html)‘[’(‘</font><font color="gray">’ * .habr_html)‘’(.ohd * ‘</span>’))
         E I ch == ‘]’
            write_to_i((‘<span class="sq_brackets">’ * .ohd)‘’(‘</font><font color="#BFBFBF">’ * .habr_html)‘]’(‘</font>’ * .habr_html)‘’(.ohd * ‘</span></span>’))
         E I ch == ‘{’
            write_to_i(‘<span class="cu_brackets" onclick="return spoiler(this, event)"><span class="cu_brackets_b">’ * .ohd‘{’(.ohd * ‘</span><span>…</span><span class="cu" style="display: none">’))
         E I ch == ‘}’
            write_to_i(‘</span><span class="cu_brackets_b">’ * .ohd‘}’(.ohd * ‘</span></span>’))
         E I ch == "\n"
            write_to_i((I new_line_tag != "\0" {new_line_tag} E ‘<br />’) + (I new_line_tag != ‘’ {"\n"} E ‘’))
            new_line_tag = "\0"
         i++
      close_ordered_list()
      close_unordered_list()
      write_to_pos(instr.len, 0)
      assert(ending_tags.empty)
      assert(.to_html_called_inside_to_html_outer_pos_list.pop() == outer_pos)

      I outfilef == N
         A r = result.join(‘’)
         I .habr_html
            r = r.replace("</blockquote>\n", ‘</blockquote>’)
         R r
      R ‘’

F to_html(instr, File? outfilef = N, ohd = 0B, ', habr_html = 0B)
   R Converter(habr_html, ohd).to_html(instr, outfilef)

:start:
I ‘-h’ C :argv | ‘--help’ C :argv
   print(‘A Python implementation of pq markup to HTML converter.

Usage: pqmarkup [options] [INPUTFILE]

Positional arguments:
  INPUT_FILE            input file (STDIN is assumed if no INPUT_FILE is
                        given)

Options:
  -h, --help            show this help message and exit
  --habr-html           for publishing posts on habr.com
  --output-html-document
                        add some html header for rough testing preview of your
                        converted documents
  -f [OUTPUT_FILE], --file [OUTPUT_FILE]
                        write output to OUTPUT_FILE (defaults to STDOUT)’)
   exit(0)
A args_habr_html = ‘--habr-html’ C :argv
A args_output_html_document = ‘--output-html-document’ C :argv
A args_infile = :stdin
A i = 1
L i < :argv.len
   I :argv[i] C (‘-f’, ‘--file’)
      i += 2
      L.continue
   I !:argv[i].starts_with(‘-’)
      args_infile = File(:argv[i], ‘r’, encoding' ‘utf-8-sig’)
      L.break
   i++
A args_outfile = :stdout
I ‘-f’ C :argv
   args_outfile = File(:argv[:argv.index(‘-f’) + 1], ‘w’, encoding' ‘utf-8’)
E I ‘--file’ C :argv
   args_outfile = File(:argv[:argv.index(‘--file’) + 1], ‘w’, encoding' ‘utf-8’)

I args_output_html_document & args_habr_html
   exit(‘Options --output-html-document and --habr-html are mutually exclusive’)

I args_output_html_document
   args_outfile.write(‘<html>
<head>
<meta charset="utf-8" />
<base target="_blank">
<script type="text/javascript">
function spoiler(element, event)
{
    if (event.target.nodeName == 'A' || event.target.parentNode.nodeName == 'A' || event.target.onclick)//чтобы работали ссылки в спойлерах и спойлеры2 в спойлерах
        return;
    var e = element.firstChild.nextSibling.nextSibling;//element.getElementsByTagName('span')[0]
    e.previousSibling.style.display = e.style.display;//<span>…</span> must have inverted display style
    e.style.display = (e.style.display == "none" ? "" : "none");
    element.firstChild.style.fontWeight =
    element. lastChild.style.fontWeight = (e.style.display == "" ? "normal" : "bold");
    event.stopPropagation();
    //[-Чтобы была возможность выделять текст внутри раскрытого ‘скрытого текста’/спойлера, необходимо [скрытие/]закрытие спойлера делать не просто по нажатию левой кнопки мыши, а по отпусканию левой кнопки мыши при условии отсутствия движения курсора [мыши] после того, как была нажата левая кнопка мыши.-]
}
function spoiler2(element, event)
{
    element.nextSibling.style.display = (element.nextSibling.style.display == "none" ? "" : "none");
}
</script>
<style type="text/css">
body td {
    font-size: 14px;
    font-family: Verdana, sans-serif;
    line-height: 160%;
}
span.cu_brackets_b {
    font-size: initial;
    font-family: initial;
    font-weight: bold;
}
a {
    text-decoration: none;
    color: #6da3bd;
}
a:hover {
    text-decoration: underline;
    color: #4d7285;
}
h1, h2, h3, h4, h5, h6 {
    margin: 0;
    font-weight: 400;
}
h1 {font-size: 190%; line-height: 120%;}
h2 {font-size: 160%;}
h3 {font-size: 137.5%;}
h4 {font-size: 120%;}
h5 {font-size: 110%;}
h6 {font-size: 100%;}
td {text-align: justify; /*font-family: Tahoma, sans-serif;*/}
span.sq {color: gray; font-size: 0.8rem; font-weight: normal; /*pointer-events: none;*/}
span.sq_brackets {color: #BFBFBF;}
span.cu_brackets {cursor: pointer;}
span.cu {background-color: #F7F7FF;}
abbr {text-decoration: none; border-bottom: 1px dotted;}
pre {margin: 0;}’""‘
pre, code {font-family: 'Courier New'; line-height: normal}
ul, ol {margin: 11px 0 7px 0;}
ul li, ol li {padding: 7px 0;}
ul li:first-child, ol li:first-child {padding-top   : 0;}
ul  li:last-child, ol  li:last-child {padding-bottom: 0;}
table table {margin: 9px 0; border-collapse: collapse;}
table table th, table table td {padding: 6px 13px; border: 1px solid #BFBFBF;}
span.spoiler_title {
    color: #548eaa;
    cursor: pointer;
    border-bottom: 1px dotted;
}
div.spoiler_text {
    /*border: 1px dotted;*/
    margin: 5px;
    padding: 3px;
}
blockquote {
    margin: 0 0 7px 0;
    padding: 7px 12px;
}
blockquote:not(.re) {border-left:  0.2em solid #90ddaa; background-color: #fbfffb;}
blockquote.re       {border-right: 0.2em solid #90ddaa; background-color: #f4fff8;}
div.note {
    padding: 18px 20px;
    background: #ffffd7;
}
</style>
</head>
<body>
<table width="55%" align="center"><tr><td>
’)
X.try
   to_html(args_infile.read(), args_outfile, args_output_html_document, habr_html' args_habr_html)
X.catch Exception e
   :stderr.write(e.message‘ at line ’String(e.line)‘, column ’String(e.column)"\n")
   exit(-1)
I args_output_html_document
   args_outfile.write(‘
</td></tr></table>
</body>
</html>’)
