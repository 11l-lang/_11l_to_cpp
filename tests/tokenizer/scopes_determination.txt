// Based on [https://golang.org/doc/effective_go.html#named-results]
fn read_full(Reader r, [Byte] buf) -> type {Int n = 0; Error? error}
                                                                     ^{
    loop buf.len > 0 && error == null
                                      ^{
        Int nr
        nr, result.err = r.read(buf) // keyword result is inspired by Nim[http://nim-lang.org/docs/tut1.html] (also there is Result in Delphi[https://www.safaribooksonline.com/library/view/delphi-in-a/1565926595/re276.html])
        result.n += nr
        buf = buf[nr..]

^}}


// Based on [https://golang.org/doc/effective_go.html#named-results]
fn read_full(Reader r, [Byte] buf) -> type {Int n = 0; Error? error}
                                                                     ^{
    loop buf.len > 0 && error == null
                                      ^{
        Int nr
        nr, result.err = r.read(buf) // keyword result is inspired by Nim[http://nim-lang.org/docs/tut1.html] (also there is Result in Delphi[https://www.safaribooksonline.com/library/view/delphi-in-a/1565926595/re276.html])
        result.n += nr
        buf = buf[nr..]
    k
    ^}
     ^}


fn read_full(Reader r, [Byte] buf) -> type {Int n = 0; Error? error} {
    loop buf.len > 0 && error == null {
        result.n += nr
        buf = buf[nr..]
    }
}


fn read_full(Reader r, [Byte] buf) -> type {Int n = 0; Error? error} {
loop buf.len > 0 && error == null {
result.n += nr
buf = buf[nr..]
}
}


fn read_full(Reader r, [Byte] buf)
{
    buf = buf[nr..]
}


fn read_full(Reader r, [Byte] buf)
    {
    buf = buf[nr..]
    }


fn f()
{
a = 1
loop 1
       ^{
	print(1)
}
^}


str = "unclosed string
      ^Error: unclosed string literal


str = ‘unclosed string
      ^Error: unpaired left single quotation mark


---
// balancing ’[[


replaced = line.replace(‘[’, ‘<span class="sq"><span class="sq_brackets">[</span>’)
                                                                                   ^…
              \.replace(‘]’, ‘<span class="sq_brackets">]</span></span>’)
                                                                         ^…
              \.replace(‘{’, ‘<span class="cu_brackets"><span class="cu_brackets_b">{</span><span>…</span><span class="cu" style="display:none">’)
                                                                                                                                                  ^…
              \.replace(‘}’, ‘</span><span class="cu_brackets_b">}</span></span>’)


replaced = line.replace(‘[’, ‘<span class="sq"><span class="sq_brackets">[</span>’)\.replace(‘]’, ‘<span class="sq_brackets">]</span></span>’)
                                                                                   ^Error: unexpected character `\`


\.replace(‘]’, ‘<span class="sq_brackets">]</span></span>’)
^Error: unexpected character `\`


---
// [https://github.com/bbatsov/ruby-style-guide/pull/176#issuecomment-292355405 <- https://github.com/bbatsov/ruby-style-guide/issues/169 <- google:‘ruby multi line expressions’]:‘Ah wouldn't it be just so great if Ruby could read syntax like this one...’
// (Всё же решил отказаться от этого синтаксиса, пусть `.` в конце строки всегда означает оператор `with`.)
//replaced = line.replace('[', '<span class="sq"><span class="sq_brackets">[</span>').
//                                                                                     ^{
//               .replace(']', '<span class="sq_brackets">]</span></span>').
//                                                                          ^…
//               .replace('{', '<span class="cu_brackets"><span class="cu_brackets_b">{</span><span>…</span><span class="cu" style="display:none">').
//                                                                                                                                                   ^…
//               .replace('}', '</span><span class="cu_brackets_b">}</span></span>')
//
//^}


main_window_pos.
                 ^{
    .x = 10
    .y = 20

^}


---
// Не знаю, как быть в таком случае (возможно стоит ввести другой символ):
outfile.write(line.replace('[', '<span class="sq"><span class="sq_brackets">[</span>')
//                                                                                    ^…
                  .replace(']', '<span class="sq_brackets">]</span></span>')
//                                                                          ^…
                  .replace('{', '<span class="cu_brackets"><span class="cu_brackets_b">{</span><span>…</span><span class="cu" style="display:none">')
//                                                                                                                                                   ^…
                  .replace('}', '</span><span class="cu_brackets_b">}</span></span>'))


loop
     ^{
   switch instr[i]
                   ^{
      "["
          ^{
         nesting_level++
      "]"
      ^}
          ^{
         if --nesting_level == 0
                                 ^{
            loop.break
      "‘"
      ^}}
          ^{
         ending_tags.append("’") //‘‘
      "’"
      ^}
          ^{
         assert(ending_tags.pop() == "’")
   i++
   ^}}
   if i == instr.len
                     ^{
      exit_with_error("Unended comment started", comment_start)

^}}


loop
     ^{
   switch instr[i]
   {
   "["
       ^{
      nesting_level++
   "]"
   ^}
       ^{
      if --nesting_level == 0
                              ^{
         loop.break
   }
   ^}}
   i++

^}


--- // Эти тесты пока не могут быть учтены из-за решения отказаться от учёта new_scope_keywords на уровне лексического анализатора
Array[type
           ^{
          Int id
          String value] arr
                      ^}


---
arr.sort(fn (a, b)
                   ^{
             r = a.id < b.id // here is no line joining despite we are inside brackets in `sort(...)`
             return r
         , reversed' true // Notice: you can not put this in previous line!
         ^}               …
        )


---
arr.sort(fn (a, b)
                   ^{
             return a.id < b.id) // But you can close parenthesis/bracket
                               ^}


---
line.replace(switch
                    ^{
                '[' {'<span class="sq"><span class="sq_brackets">[</span>'}
                ']' {'<span class="sq_brackets">]</span></span>'}
                '{' {'<span class="cu_brackets"><span class="cu_brackets_b">{</span><span>…</span><span class="cu" style="display:none">'}
                '}' {'</span><span class="cu_brackets_b">}</span></span>'}
            )
            ^}


--- // [-fix-]
fn sign(x)
           ^{
    return if x < 0
                   ^…
             -1
           else if x > 0
           ^Error: `if` scope is empty, after applied implied line joining: ```
    return if x < 0 -1
           else if x > 0
```
              1
           else 0
//}


fn sign(x)
           ^{
    return if x < 0
                    ^{
        (-1)
    else if x > 0
    ^}
                  ^{
          1
    else 0
    ^}

^}


return if n < 0
          {-n}
else
     ^{
            n

^}


// Решил просто не считать `-` за бинарный оператор в контексте автоматического склеивания строк
return if n < 0
                ^{
         -n
else
^}
     ^{
          n

^}


// Трюк аналогичный `&` ([:‘Символ `&` обрабатывается по-особенному’]) с `-` не проходит, так как `-` к тому же ещё и квалификатор константности:
String non_const_string
- String const_string


// in Go you can not put `{` on the next line like this:
fn min(a, b)
{
    return if a < b
                    ^{
               a
    else
    ^}
         ^{
               b
}
^}
// }


if whole_file // ...
             ^…
        & (os.path.isdir(os.path.splitext(view().file_name())[0]) // ...
        |  os.path.basename(view().file_name()) == ".pq") // ...
                                                          ^{
    html_fname = view().file_name()

^}


//{
if next_char() == "\n" // чтобы переход на новую строку/перевод строки после `}` игнорировался
                      ^…
        & !in_unordered_list // если находимся внутри списка, то пропуска новой строки делать не нужно
                            ^…
        & ordered_list_current_number == null
                                              ^{
    i += 1
    writepos = i + 1

^}


res = aa
        ^…
    + bb


--- // should be detected by syntax analyzer?
return
       f()
       ^Error: unexpected indent


--- // should be detected by syntax analyzer?
loop 10

^Error: `loop` scope is empty


if a:
	if b:
		i = 0
                j = 8
                ^Error: inconsistent indentations:\
```\
TABTABi = 0\
SSSSSSSSSSSSSSSSj = 8\
```
// Python для этого кода выдаёт ошибку `TabError: inconsistent use of tabs and spaces in indentation`.


if a:
	if b:
		i = 0
      j = 8
      ^Error: inconsistent indentations:\
```\
TABTABi = 0\
SSSSSSj = 8\
```
// Обратите внимание, что Python для этого кода выдаёт ошибку `IndentationError: unindent does not match any outer indentation level`
// по той причине, что в Python'е [https://docs.python.org/3/reference/lexical_analysis.html]:‘Tabs are replaced (from left to right) by one to eight spaces’.
// Я предлагаю отказаться от магических цифр вроде 8 пробелов на один символ табуляции, и если и разрешать вообще использовать табы, то по-честному: считая их
// количество, а не преобразовывая их в пробелы.
// Символ табуляции в сообщении об ошибке я обозначаю тремя символами `TAB`, потому что слово tab состоит из трёх букв.
// И если между табуляциями вдруг окажется случайный пробел, которого не увидишь в редакторе, то при таком обозначении его сразу будет видно:
//	 	.
//TABSTAB.
// Да, при таком подходе ширина не соответствует тому, как работают табы, но задача в данном случае — показать программисту то, как его код видит лексический
// анализатор, и чтобы не хардкодить 8 пробелов на табуляцию, 4, или 2, или 3 (и уж тем более, не выносить это в настройки), символы табуляции рассматриваются
// просто как разделяющие символы, и в строке-контексте ```...``` в сообщении об ошибке `inconsistent indentations` выводятся как `TAB`.


if a:
	if b:
		\(...) i = 0
      \(...) j = 8
      ^Error: inconsistent indentations:\
```\
TABTAB\(...) i = 0\
SSSSSS\(...) j = 8\
```


if a:
	if b:
		i = 0
                  j = 8
                  ^Error: inconsistent indentations:\
```\
TABTABi = 0\
SSSSSSSSSSSSSSSSSSj = 8\
```
// Python для этого кода выдаёт ошибку `IndentationError: unexpected indent`.
// Хотя если установить значение табуляции в 9 пробелов, код получается выровненный и такое сообщение для программиста будет непонятно.


if a:
	if b:
		i = 0
        j = 8
        ^Error: inconsistent indentations:\
```\
TABTABi = 0\
SSSSSSSSj = 8\
```
// Python для этого кода выдаёт ошибку `TabError: inconsistent use of tabs and spaces in indentation`.
// (Такую же ошибку, как в первом из этих четырёх примеров. Это указывает на то, что помимо 8 пробелов на табуляцию, в лексическом анализаторе
// Python есть [недокументированная] обработка для 4-х пробелов на табуляцию [[[для 2-х пробелов на табуляцию такой обработки уже нет]]].)


if b:
    j = 8
	i = 0
 ^Error: inconsistent indentations:\
```\
SSSSj = 8\
TABi = 0\
```


if 1:
	        i = 0
	        ^Error: mixing tabs and spaces in indentation: `TABSSSSSSSSi = 0`
        	j = 1
// Python этот код не считает ошибочным, не смотря на утверждение [http://legacy.python.org/dev/peps/pep-0008/#tabs-or-spaces
//  <- https://stackoverflow.com/questions/2034517/pythons-interpretation-of-tabs-and-spaces-to-indent
//  <- google:‘python mixed tabs and spaces’]:‘Python 3 disallows mixing the use of tabs and spaces for indentation.’
// Я согласен, что можно такое выравнивание обрабатывать корректно (то есть, по-честному сравнивая последовательности символов пробелов и
// табуляции [а не заменяя табуляции на 8 пробелов]) на случай копирования откуда-то куска кода с табами или с пробелами и с последующим
// выравниваем его в IDE. Но я считаю это [оставлять после вставки кода смешанными пробелы и табуляцию] плохой практикой, и считаю, что в
// этом случае следует просто выдавать ошибку, а не пытаться его [этот случай] корректно обрабатывать. Ну и хорошая IDE не должна
// допускать мешанины из пробелов и табуляции в отступах.


if 1:
    i = 0
   j = 1
   ^Error: unindent does not match any outer indentation level


if a {
    b = 0
c = 0
^Error: too much unindent, what is this unindent intended for?
}


+1
^Error: source can not starts with a binary operator


// Additional checks for implied line continuation rules
r = 1
     ^…
    + 2 +
         ^…
    3


--- // should be detected by syntax analyzer?
r = 1
     ^…
    + 2
    3
    ^Error: unexpected indent


a=b
++i // Plus symbol at the beginning here should not be treated as binary + operator, so there is no implied line joining


a = 1
     ^…
  / 2 // Символ + в конце этой строки находится под комментарием и не должен вызывать срабатывание автоматического склеивания строк +
      ^{
    3
b = 0
^}


---
a = ({1})
     ^Error: naked braces (without new scope keyword) within parentheses/brackets is not allowed


// {{
fn f() {
}}
 ^Error: there is no corresponding opening brace for `}`


// [[(
r = (a + b]
          ^Error: there is no corresponding opening parenthesis/bracket for `]`


r = [a + b)
          ^Error: there is no corresponding opening parenthesis/bracket for `)`
// ]


r = (a +
    ^Error: there is no corresponding closing parenthesis/bracket/brace for `(`
// ))


--- // should be detected by syntax analyzer?
setTimeout(fn () {
	if ...
           ^{
	    ...
})
^}


--- // [-Нужно решить, что делать с этой [оригинальной] версией кода теста (смотри также 3 теста с `sign(x)`[‘поддержку else if возможно стоит вынести из синтаксического анализатора ("парсера") на уровень лексического анализатора (scopes_determinator.py)’], `return if` и `min(a, b)` из afc41ebe63e2258c16585a570ca72a5cc875a811). Пока что я не могу формализовать такой вид.-]
r = if 1 + (if true {1} else 5) > 5
                                    ^{
        5
    else
    ^}    {
        6

^}


r = if 1 + (if true {1} else 5) > 5
                                    ^{
        5
else
^}
     ^{
        6

^}


// Символ `&` обрабатывается по-особенному
V &s, str1, str2
I condition
            ^{
   &s = str1 // Здесь не происходит автоматического склеивания данной строки с предыдущей, так как после `&` нет пробела
E
^}
  ^{
   &s = str2

I  digest1[0] == ns[0] & digest1[@-1] == ns[1]
^}
                                              ^…
 & digest2[0] == ns[0] & digest2[@-1] == ns[1] // А эта строка склеивается с предыдущей, так как после `&` стоит пробел
                                               ^{
   results [+]= ns

^}